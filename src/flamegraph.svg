<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="607"><g><title>6124728320 (6 samples, 0.99%)</title><rect x="0.0000%" y="581" width="0.9885%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>__pthread_wqthread_setup (4 samples, 0.66%)</title><rect x="0.3295%" y="565" width="0.6590%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.5795%" y="575.50"></text></g><g><title>_mach_continuous_time (4 samples, 0.66%)</title><rect x="0.3295%" y="549" width="0.6590%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.5795%" y="559.50"></text></g><g><title>__kernelrpc_vm_read (4 samples, 0.66%)</title><rect x="0.3295%" y="533" width="0.6590%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.5795%" y="543.50"></text></g><g><title>_proc_clear_dirty (4 samples, 0.66%)</title><rect x="0.3295%" y="517" width="0.6590%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.5795%" y="527.50"></text></g><g><title>6125301760 (3 samples, 0.49%)</title><rect x="0.9885%" y="581" width="0.4942%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="3"/><text x="1.2385%" y="591.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.33%)</title><rect x="1.1532%" y="565" width="0.3295%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="1.4032%" y="575.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.16%)</title><rect x="1.3180%" y="549" width="0.1647%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="1.5680%" y="559.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.16%)</title><rect x="1.3180%" y="533" width="0.1647%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="1.5680%" y="543.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="1.3180%" y="517" width="0.1647%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="1.5680%" y="527.50"></text></g><g><title>_proc_clear_dirty (7 samples, 1.15%)</title><rect x="1.6474%" y="517" width="1.1532%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="7"/><text x="1.8974%" y="527.50"></text></g><g><title>6125875200 (10 samples, 1.65%)</title><rect x="1.4827%" y="581" width="1.6474%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="10"/><text x="1.7327%" y="591.50"></text></g><g><title>__pthread_cond_wait (10 samples, 1.65%)</title><rect x="1.4827%" y="565" width="1.6474%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="10"/><text x="1.7327%" y="575.50"></text></g><g><title>_mach_continuous_time (9 samples, 1.48%)</title><rect x="1.6474%" y="549" width="1.4827%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="9"/><text x="1.8974%" y="559.50"></text></g><g><title>__kernelrpc_vm_read (9 samples, 1.48%)</title><rect x="1.6474%" y="533" width="1.4827%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="9"/><text x="1.8974%" y="543.50"></text></g><g><title>_proc_signal_delegate (2 samples, 0.33%)</title><rect x="2.8007%" y="517" width="0.3295%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="2"/><text x="3.0507%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.33%)</title><rect x="3.1301%" y="565" width="0.3295%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="2"/><text x="3.3801%" y="575.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.33%)</title><rect x="3.1301%" y="549" width="0.3295%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="2"/><text x="3.3801%" y="559.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.33%)</title><rect x="3.1301%" y="533" width="0.3295%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="2"/><text x="3.3801%" y="543.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.33%)</title><rect x="3.1301%" y="517" width="0.3295%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="2"/><text x="3.3801%" y="527.50"></text></g><g><title>6126448640 (3 samples, 0.49%)</title><rect x="3.1301%" y="581" width="0.4942%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="3"/><text x="3.3801%" y="591.50"></text></g><g><title>_pthread_rwlock_rdlock (1 samples, 0.16%)</title><rect x="3.4596%" y="565" width="0.1647%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="1"/><text x="3.7096%" y="575.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.16%)</title><rect x="3.4596%" y="549" width="0.1647%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="3.7096%" y="559.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.16%)</title><rect x="3.4596%" y="533" width="0.1647%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="3.7096%" y="543.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="3.4596%" y="517" width="0.1647%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="3.7096%" y="527.50"></text></g><g><title>6127022080 (1 samples, 0.16%)</title><rect x="3.6244%" y="581" width="0.1647%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="3.8744%" y="591.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.16%)</title><rect x="3.6244%" y="565" width="0.1647%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="3.8744%" y="575.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="3.6244%" y="549" width="0.1647%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="3.8744%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.16%)</title><rect x="3.7891%" y="341" width="0.1647%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="1"/><text x="4.0391%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.16%)</title><rect x="3.7891%" y="325" width="0.1647%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="1"/><text x="4.0391%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="3.7891%" y="309" width="0.1647%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="1"/><text x="4.0391%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (6 samples, 0.99%)</title><rect x="3.9539%" y="341" width="0.9885%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="6"/><text x="4.2039%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (6 samples, 0.99%)</title><rect x="3.9539%" y="325" width="0.9885%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="6"/><text x="4.2039%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (6 samples, 0.99%)</title><rect x="3.9539%" y="309" width="0.9885%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="6"/><text x="4.2039%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.99%)</title><rect x="3.9539%" y="293" width="0.9885%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="6"/><text x="4.2039%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.99%)</title><rect x="3.9539%" y="277" width="0.9885%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="6"/><text x="4.2039%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.99%)</title><rect x="3.9539%" y="261" width="0.9885%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="6"/><text x="4.2039%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (9 samples, 1.48%)</title><rect x="4.9423%" y="341" width="1.4827%" height="15" fill="rgb(245,192,40)" fg:x="30" fg:w="9"/><text x="5.1923%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (9 samples, 1.48%)</title><rect x="4.9423%" y="325" width="1.4827%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="9"/><text x="5.1923%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (9 samples, 1.48%)</title><rect x="4.9423%" y="309" width="1.4827%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="9"/><text x="5.1923%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (9 samples, 1.48%)</title><rect x="4.9423%" y="293" width="1.4827%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="9"/><text x="5.1923%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (9 samples, 1.48%)</title><rect x="4.9423%" y="277" width="1.4827%" height="15" fill="rgb(208,69,12)" fg:x="30" fg:w="9"/><text x="5.1923%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.48%)</title><rect x="4.9423%" y="261" width="1.4827%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="9"/><text x="5.1923%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (2 samples, 0.33%)</title><rect x="6.4250%" y="341" width="0.3295%" height="15" fill="rgb(213,116,39)" fg:x="39" fg:w="2"/><text x="6.6750%" y="351.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="6.4250%" y="325" width="0.3295%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="2"/><text x="6.6750%" y="335.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (2 samples, 0.33%)</title><rect x="6.4250%" y="309" width="0.3295%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="2"/><text x="6.6750%" y="319.50"></text></g><g><title>_pthread_cond_broadcast (2 samples, 0.33%)</title><rect x="6.4250%" y="293" width="0.3295%" height="15" fill="rgb(218,138,4)" fg:x="39" fg:w="2"/><text x="6.6750%" y="303.50"></text></g><g><title>_pthread_rwlock_init (2 samples, 0.33%)</title><rect x="6.4250%" y="277" width="0.3295%" height="15" fill="rgb(250,191,14)" fg:x="39" fg:w="2"/><text x="6.6750%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (5 samples, 0.82%)</title><rect x="6.7545%" y="341" width="0.8237%" height="15" fill="rgb(239,60,40)" fg:x="41" fg:w="5"/><text x="7.0045%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (5 samples, 0.82%)</title><rect x="6.7545%" y="325" width="0.8237%" height="15" fill="rgb(206,27,48)" fg:x="41" fg:w="5"/><text x="7.0045%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.82%)</title><rect x="6.7545%" y="309" width="0.8237%" height="15" fill="rgb(225,35,8)" fg:x="41" fg:w="5"/><text x="7.0045%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.82%)</title><rect x="6.7545%" y="293" width="0.8237%" height="15" fill="rgb(250,213,24)" fg:x="41" fg:w="5"/><text x="7.0045%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.82%)</title><rect x="6.7545%" y="277" width="0.8237%" height="15" fill="rgb(247,123,22)" fg:x="41" fg:w="5"/><text x="7.0045%" y="287.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (27 samples, 4.45%)</title><rect x="7.5783%" y="341" width="4.4481%" height="15" fill="rgb(231,138,38)" fg:x="46" fg:w="27"/><text x="7.8283%" y="351.50">std::..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (27 samples, 4.45%)</title><rect x="7.5783%" y="325" width="4.4481%" height="15" fill="rgb(231,145,46)" fg:x="46" fg:w="27"/><text x="7.8283%" y="335.50">std::..</text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (27 samples, 4.45%)</title><rect x="7.5783%" y="309" width="4.4481%" height="15" fill="rgb(251,118,11)" fg:x="46" fg:w="27"/><text x="7.8283%" y="319.50">std::..</text></g><g><title>__pthread_mutex_firstfit_unlock_slow (27 samples, 4.45%)</title><rect x="7.5783%" y="293" width="4.4481%" height="15" fill="rgb(217,147,25)" fg:x="46" fg:w="27"/><text x="7.8283%" y="303.50">__pth..</text></g><g><title>_pthread_rwlock_init (27 samples, 4.45%)</title><rect x="7.5783%" y="277" width="4.4481%" height="15" fill="rgb(247,81,37)" fg:x="46" fg:w="27"/><text x="7.8283%" y="287.50">_pthr..</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (13 samples, 2.14%)</title><rect x="12.0264%" y="341" width="2.1417%" height="15" fill="rgb(209,12,38)" fg:x="73" fg:w="13"/><text x="12.2764%" y="351.50">s..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (13 samples, 2.14%)</title><rect x="12.0264%" y="325" width="2.1417%" height="15" fill="rgb(227,1,9)" fg:x="73" fg:w="13"/><text x="12.2764%" y="335.50">s..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (13 samples, 2.14%)</title><rect x="12.0264%" y="309" width="2.1417%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="13"/><text x="12.2764%" y="319.50">s..</text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (12 samples, 1.98%)</title><rect x="12.1911%" y="293" width="1.9769%" height="15" fill="rgb(221,10,30)" fg:x="74" fg:w="12"/><text x="12.4411%" y="303.50">s..</text></g><g><title>std::thread::Thread::park (12 samples, 1.98%)</title><rect x="12.1911%" y="277" width="1.9769%" height="15" fill="rgb(210,229,1)" fg:x="74" fg:w="12"/><text x="12.4411%" y="287.50">s..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (12 samples, 1.98%)</title><rect x="12.1911%" y="261" width="1.9769%" height="15" fill="rgb(222,148,37)" fg:x="74" fg:w="12"/><text x="12.4411%" y="271.50">s..</text></g><g><title>___platform_sigaction (12 samples, 1.98%)</title><rect x="12.1911%" y="245" width="1.9769%" height="15" fill="rgb(234,67,33)" fg:x="74" fg:w="12"/><text x="12.4411%" y="255.50">_..</text></g><g><title>_semaphore_destroy (12 samples, 1.98%)</title><rect x="12.1911%" y="229" width="1.9769%" height="15" fill="rgb(247,98,35)" fg:x="74" fg:w="12"/><text x="12.4411%" y="239.50">_..</text></g><g><title>_mach_continuous_time (12 samples, 1.98%)</title><rect x="12.1911%" y="213" width="1.9769%" height="15" fill="rgb(247,138,52)" fg:x="74" fg:w="12"/><text x="12.4411%" y="223.50">_..</text></g><g><title>_geteuid (12 samples, 1.98%)</title><rect x="12.1911%" y="197" width="1.9769%" height="15" fill="rgb(213,79,30)" fg:x="74" fg:w="12"/><text x="12.4411%" y="207.50">_..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (15 samples, 2.47%)</title><rect x="14.1680%" y="293" width="2.4712%" height="15" fill="rgb(246,177,23)" fg:x="86" fg:w="15"/><text x="14.4180%" y="303.50">&lt;t..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 2.64%)</title><rect x="14.1680%" y="309" width="2.6359%" height="15" fill="rgb(230,62,27)" fg:x="86" fg:w="16"/><text x="14.4180%" y="319.50">&lt;c..</text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="16.6392%" y="293" width="0.1647%" height="15" fill="rgb(216,154,8)" fg:x="101" fg:w="1"/><text x="16.8892%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.16%)</title><rect x="16.6392%" y="277" width="0.1647%" height="15" fill="rgb(244,35,45)" fg:x="101" fg:w="1"/><text x="16.8892%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.16%)</title><rect x="16.6392%" y="261" width="0.1647%" height="15" fill="rgb(251,115,12)" fg:x="101" fg:w="1"/><text x="16.8892%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.16%)</title><rect x="16.6392%" y="245" width="0.1647%" height="15" fill="rgb(240,54,50)" fg:x="101" fg:w="1"/><text x="16.8892%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.16%)</title><rect x="16.6392%" y="229" width="0.1647%" height="15" fill="rgb(233,84,52)" fg:x="101" fg:w="1"/><text x="16.8892%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="16.6392%" y="213" width="0.1647%" height="15" fill="rgb(207,117,47)" fg:x="101" fg:w="1"/><text x="16.8892%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="16.6392%" y="197" width="0.1647%" height="15" fill="rgb(249,43,39)" fg:x="101" fg:w="1"/><text x="16.8892%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.16%)</title><rect x="16.6392%" y="181" width="0.1647%" height="15" fill="rgb(209,38,44)" fg:x="101" fg:w="1"/><text x="16.8892%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.16%)</title><rect x="16.6392%" y="165" width="0.1647%" height="15" fill="rgb(236,212,23)" fg:x="101" fg:w="1"/><text x="16.8892%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.16%)</title><rect x="16.6392%" y="149" width="0.1647%" height="15" fill="rgb(242,79,21)" fg:x="101" fg:w="1"/><text x="16.8892%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.16%)</title><rect x="16.6392%" y="133" width="0.1647%" height="15" fill="rgb(211,96,35)" fg:x="101" fg:w="1"/><text x="16.8892%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.16%)</title><rect x="16.6392%" y="117" width="0.1647%" height="15" fill="rgb(253,215,40)" fg:x="101" fg:w="1"/><text x="16.8892%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="277" width="0.4942%" height="15" fill="rgb(211,81,21)" fg:x="102" fg:w="3"/><text x="17.0540%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="261" width="0.4942%" height="15" fill="rgb(208,190,38)" fg:x="102" fg:w="3"/><text x="17.0540%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.49%)</title><rect x="16.8040%" y="245" width="0.4942%" height="15" fill="rgb(235,213,38)" fg:x="102" fg:w="3"/><text x="17.0540%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (3 samples, 0.49%)</title><rect x="16.8040%" y="229" width="0.4942%" height="15" fill="rgb(237,122,38)" fg:x="102" fg:w="3"/><text x="17.0540%" y="239.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (3 samples, 0.49%)</title><rect x="16.8040%" y="213" width="0.4942%" height="15" fill="rgb(244,218,35)" fg:x="102" fg:w="3"/><text x="17.0540%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="197" width="0.4942%" height="15" fill="rgb(240,68,47)" fg:x="102" fg:w="3"/><text x="17.0540%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="181" width="0.4942%" height="15" fill="rgb(210,16,53)" fg:x="102" fg:w="3"/><text x="17.0540%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="165" width="0.4942%" height="15" fill="rgb(235,124,12)" fg:x="102" fg:w="3"/><text x="17.0540%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.49%)</title><rect x="16.8040%" y="149" width="0.4942%" height="15" fill="rgb(224,169,11)" fg:x="102" fg:w="3"/><text x="17.0540%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.49%)</title><rect x="16.8040%" y="133" width="0.4942%" height="15" fill="rgb(250,166,2)" fg:x="102" fg:w="3"/><text x="17.0540%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (23 samples, 3.79%)</title><rect x="16.8040%" y="309" width="3.7891%" height="15" fill="rgb(242,216,29)" fg:x="102" fg:w="23"/><text x="17.0540%" y="319.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (23 samples, 3.79%)</title><rect x="16.8040%" y="293" width="3.7891%" height="15" fill="rgb(230,116,27)" fg:x="102" fg:w="23"/><text x="17.0540%" y="303.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (20 samples, 3.29%)</title><rect x="17.2982%" y="277" width="3.2949%" height="15" fill="rgb(228,99,48)" fg:x="105" fg:w="20"/><text x="17.5482%" y="287.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (20 samples, 3.29%)</title><rect x="17.2982%" y="261" width="3.2949%" height="15" fill="rgb(253,11,6)" fg:x="105" fg:w="20"/><text x="17.5482%" y="271.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (20 samples, 3.29%)</title><rect x="17.2982%" y="245" width="3.2949%" height="15" fill="rgb(247,143,39)" fg:x="105" fg:w="20"/><text x="17.5482%" y="255.50">cor..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 3.29%)</title><rect x="17.2982%" y="229" width="3.2949%" height="15" fill="rgb(236,97,10)" fg:x="105" fg:w="20"/><text x="17.5482%" y="239.50">&lt;ha..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (2 samples, 0.33%)</title><rect x="20.2636%" y="213" width="0.3295%" height="15" fill="rgb(233,208,19)" fg:x="123" fg:w="2"/><text x="20.5136%" y="223.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (2 samples, 0.33%)</title><rect x="20.2636%" y="197" width="0.3295%" height="15" fill="rgb(216,164,2)" fg:x="123" fg:w="2"/><text x="20.5136%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (2 samples, 0.33%)</title><rect x="20.2636%" y="181" width="0.3295%" height="15" fill="rgb(220,129,5)" fg:x="123" fg:w="2"/><text x="20.5136%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.33%)</title><rect x="20.2636%" y="165" width="0.3295%" height="15" fill="rgb(242,17,10)" fg:x="123" fg:w="2"/><text x="20.5136%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.33%)</title><rect x="20.2636%" y="149" width="0.3295%" height="15" fill="rgb(242,107,0)" fg:x="123" fg:w="2"/><text x="20.5136%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.33%)</title><rect x="20.2636%" y="133" width="0.3295%" height="15" fill="rgb(251,28,31)" fg:x="123" fg:w="2"/><text x="20.5136%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.33%)</title><rect x="20.2636%" y="117" width="0.3295%" height="15" fill="rgb(233,223,10)" fg:x="123" fg:w="2"/><text x="20.5136%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="20.2636%" y="101" width="0.3295%" height="15" fill="rgb(215,21,27)" fg:x="123" fg:w="2"/><text x="20.5136%" y="111.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (45 samples, 7.41%)</title><rect x="14.1680%" y="341" width="7.4135%" height="15" fill="rgb(232,23,21)" fg:x="86" fg:w="45"/><text x="14.4180%" y="351.50">torpedo::a..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (45 samples, 7.41%)</title><rect x="14.1680%" y="325" width="7.4135%" height="15" fill="rgb(244,5,23)" fg:x="86" fg:w="45"/><text x="14.4180%" y="335.50">torpedo::a..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (6 samples, 0.99%)</title><rect x="20.5931%" y="309" width="0.9885%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="6"/><text x="20.8431%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (110 samples, 18.12%)</title><rect x="3.7891%" y="533" width="18.1219%" height="15" fill="rgb(247,70,30)" fg:x="23" fg:w="110"/><text x="4.0391%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (110 samples, 18.12%)</title><rect x="3.7891%" y="517" width="18.1219%" height="15" fill="rgb(212,68,19)" fg:x="23" fg:w="110"/><text x="4.0391%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (110 samples, 18.12%)</title><rect x="3.7891%" y="501" width="18.1219%" height="15" fill="rgb(240,187,13)" fg:x="23" fg:w="110"/><text x="4.0391%" y="511.50">core::ops::function::FnOnce:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (110 samples, 18.12%)</title><rect x="3.7891%" y="485" width="18.1219%" height="15" fill="rgb(223,113,26)" fg:x="23" fg:w="110"/><text x="4.0391%" y="495.50">std::thread::Builder::spawn_..</text></g><g><title>std::panic::catch_unwind (110 samples, 18.12%)</title><rect x="3.7891%" y="469" width="18.1219%" height="15" fill="rgb(206,192,2)" fg:x="23" fg:w="110"/><text x="4.0391%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (110 samples, 18.12%)</title><rect x="3.7891%" y="453" width="18.1219%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="110"/><text x="4.0391%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (110 samples, 18.12%)</title><rect x="3.7891%" y="437" width="18.1219%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="110"/><text x="4.0391%" y="447.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (110 samples, 18.12%)</title><rect x="3.7891%" y="421" width="18.1219%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="110"/><text x="4.0391%" y="431.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (110 samples, 18.12%)</title><rect x="3.7891%" y="405" width="18.1219%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="110"/><text x="4.0391%" y="415.50">std::thread::Builder::spawn_..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (110 samples, 18.12%)</title><rect x="3.7891%" y="389" width="18.1219%" height="15" fill="rgb(245,172,44)" fg:x="23" fg:w="110"/><text x="4.0391%" y="399.50">std::sys::backtrace::__rust_..</text></g><g><title>torpedo::level::level_loop::{{closure}} (110 samples, 18.12%)</title><rect x="3.7891%" y="373" width="18.1219%" height="15" fill="rgb(236,23,11)" fg:x="23" fg:w="110"/><text x="4.0391%" y="383.50">torpedo::level::level_loop::..</text></g><g><title>torpedo::physics::update (110 samples, 18.12%)</title><rect x="3.7891%" y="357" width="18.1219%" height="15" fill="rgb(205,117,38)" fg:x="23" fg:w="110"/><text x="4.0391%" y="367.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (2 samples, 0.33%)</title><rect x="21.5815%" y="341" width="0.3295%" height="15" fill="rgb(237,72,25)" fg:x="131" fg:w="2"/><text x="21.8315%" y="351.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.33%)</title><rect x="21.5815%" y="325" width="0.3295%" height="15" fill="rgb(244,70,9)" fg:x="131" fg:w="2"/><text x="21.8315%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.33%)</title><rect x="21.5815%" y="309" width="0.3295%" height="15" fill="rgb(217,125,39)" fg:x="131" fg:w="2"/><text x="21.8315%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.33%)</title><rect x="21.5815%" y="293" width="0.3295%" height="15" fill="rgb(235,36,10)" fg:x="131" fg:w="2"/><text x="21.8315%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.33%)</title><rect x="21.5815%" y="277" width="0.3295%" height="15" fill="rgb(251,123,47)" fg:x="131" fg:w="2"/><text x="21.8315%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.33%)</title><rect x="21.5815%" y="261" width="0.3295%" height="15" fill="rgb(221,13,13)" fg:x="131" fg:w="2"/><text x="21.8315%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.33%)</title><rect x="21.5815%" y="245" width="0.3295%" height="15" fill="rgb(238,131,9)" fg:x="131" fg:w="2"/><text x="21.8315%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.33%)</title><rect x="21.5815%" y="229" width="0.3295%" height="15" fill="rgb(211,50,8)" fg:x="131" fg:w="2"/><text x="21.8315%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (51 samples, 8.40%)</title><rect x="21.9110%" y="533" width="8.4020%" height="15" fill="rgb(245,182,24)" fg:x="133" fg:w="51"/><text x="22.1610%" y="543.50">core::ptr::d..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (51 samples, 8.40%)</title><rect x="21.9110%" y="517" width="8.4020%" height="15" fill="rgb(242,14,37)" fg:x="133" fg:w="51"/><text x="22.1610%" y="527.50">&lt;std::sys::p..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (51 samples, 8.40%)</title><rect x="21.9110%" y="501" width="8.4020%" height="15" fill="rgb(246,228,12)" fg:x="133" fg:w="51"/><text x="22.1610%" y="511.50">std::sys::pa..</text></g><g><title>6129741824 (165 samples, 27.18%)</title><rect x="3.7891%" y="581" width="27.1829%" height="15" fill="rgb(213,55,15)" fg:x="23" fg:w="165"/><text x="4.0391%" y="591.50">6129741824</text></g><g><title>__pthread_cond_wait (165 samples, 27.18%)</title><rect x="3.7891%" y="565" width="27.1829%" height="15" fill="rgb(209,9,3)" fg:x="23" fg:w="165"/><text x="4.0391%" y="575.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (165 samples, 27.18%)</title><rect x="3.7891%" y="549" width="27.1829%" height="15" fill="rgb(230,59,30)" fg:x="23" fg:w="165"/><text x="4.0391%" y="559.50">std::sys::pal::unix::thread::Thread::new::th..</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (4 samples, 0.66%)</title><rect x="30.3130%" y="533" width="0.6590%" height="15" fill="rgb(209,121,21)" fg:x="184" fg:w="4"/><text x="30.5630%" y="543.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (4 samples, 0.66%)</title><rect x="30.3130%" y="517" width="0.6590%" height="15" fill="rgb(220,109,13)" fg:x="184" fg:w="4"/><text x="30.5630%" y="527.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (4 samples, 0.66%)</title><rect x="30.3130%" y="501" width="0.6590%" height="15" fill="rgb(232,18,1)" fg:x="184" fg:w="4"/><text x="30.5630%" y="511.50"></text></g><g><title>_host_get_special_port (2 samples, 0.33%)</title><rect x="30.6425%" y="485" width="0.3295%" height="15" fill="rgb(215,41,42)" fg:x="186" fg:w="2"/><text x="30.8925%" y="495.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.16%)</title><rect x="35.7496%" y="565" width="0.1647%" height="15" fill="rgb(224,123,36)" fg:x="217" fg:w="1"/><text x="35.9996%" y="575.50"></text></g><g><title>__platform_strnlen (1 samples, 0.16%)</title><rect x="35.7496%" y="549" width="0.1647%" height="15" fill="rgb(240,125,3)" fg:x="217" fg:w="1"/><text x="35.9996%" y="559.50"></text></g><g><title>__platform_strnlen (1 samples, 0.16%)</title><rect x="35.7496%" y="533" width="0.1647%" height="15" fill="rgb(205,98,50)" fg:x="217" fg:w="1"/><text x="35.9996%" y="543.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.16%)</title><rect x="35.7496%" y="517" width="0.1647%" height="15" fill="rgb(205,185,37)" fg:x="217" fg:w="1"/><text x="35.9996%" y="527.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.16%)</title><rect x="35.9143%" y="565" width="0.1647%" height="15" fill="rgb(238,207,15)" fg:x="218" fg:w="1"/><text x="36.1643%" y="575.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.16%)</title><rect x="35.9143%" y="549" width="0.1647%" height="15" fill="rgb(213,199,42)" fg:x="218" fg:w="1"/><text x="36.1643%" y="559.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="35.9143%" y="533" width="0.1647%" height="15" fill="rgb(235,201,11)" fg:x="218" fg:w="1"/><text x="36.1643%" y="543.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.16%)</title><rect x="36.9028%" y="229" width="0.1647%" height="15" fill="rgb(207,46,11)" fg:x="224" fg:w="1"/><text x="37.1528%" y="239.50"></text></g><g><title>_proc_clear_dirty (3 samples, 0.49%)</title><rect x="37.0675%" y="229" width="0.4942%" height="15" fill="rgb(241,35,35)" fg:x="225" fg:w="3"/><text x="37.3175%" y="239.50"></text></g><g><title>Unknown (9 samples, 1.48%)</title><rect x="36.2438%" y="245" width="1.4827%" height="15" fill="rgb(243,32,47)" fg:x="220" fg:w="9"/><text x="36.4938%" y="255.50"></text></g><g><title>_task_info (1 samples, 0.16%)</title><rect x="37.5618%" y="229" width="0.1647%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="1"/><text x="37.8118%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (11 samples, 1.81%)</title><rect x="36.0791%" y="325" width="1.8122%" height="15" fill="rgb(219,102,11)" fg:x="219" fg:w="11"/><text x="36.3291%" y="335.50">c..</text></g><g><title>Unknown (11 samples, 1.81%)</title><rect x="36.0791%" y="309" width="1.8122%" height="15" fill="rgb(243,110,44)" fg:x="219" fg:w="11"/><text x="36.3291%" y="319.50">U..</text></g><g><title>Unknown (11 samples, 1.81%)</title><rect x="36.0791%" y="293" width="1.8122%" height="15" fill="rgb(222,74,54)" fg:x="219" fg:w="11"/><text x="36.3291%" y="303.50">U..</text></g><g><title>Unknown (11 samples, 1.81%)</title><rect x="36.0791%" y="277" width="1.8122%" height="15" fill="rgb(216,99,12)" fg:x="219" fg:w="11"/><text x="36.3291%" y="287.50">U..</text></g><g><title>Unknown (11 samples, 1.81%)</title><rect x="36.0791%" y="261" width="1.8122%" height="15" fill="rgb(226,22,26)" fg:x="219" fg:w="11"/><text x="36.3291%" y="271.50">U..</text></g><g><title>_mach_continuous_time (1 samples, 0.16%)</title><rect x="37.7265%" y="245" width="0.1647%" height="15" fill="rgb(217,163,10)" fg:x="229" fg:w="1"/><text x="37.9765%" y="255.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.16%)</title><rect x="37.7265%" y="229" width="0.1647%" height="15" fill="rgb(213,25,53)" fg:x="229" fg:w="1"/><text x="37.9765%" y="239.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="37.7265%" y="213" width="0.1647%" height="15" fill="rgb(252,105,26)" fg:x="229" fg:w="1"/><text x="37.9765%" y="223.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (2 samples, 0.33%)</title><rect x="42.3394%" y="197" width="0.3295%" height="15" fill="rgb(220,39,43)" fg:x="257" fg:w="2"/><text x="42.5894%" y="207.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="42.6689%" y="197" width="0.1647%" height="15" fill="rgb(229,68,48)" fg:x="259" fg:w="1"/><text x="42.9189%" y="207.50"></text></g><g><title>Unknown (13 samples, 2.14%)</title><rect x="40.8567%" y="213" width="2.1417%" height="15" fill="rgb(252,8,32)" fg:x="248" fg:w="13"/><text x="41.1067%" y="223.50">U..</text></g><g><title>_proc_setpcontrol (1 samples, 0.16%)</title><rect x="42.8336%" y="197" width="0.1647%" height="15" fill="rgb(223,20,43)" fg:x="260" fg:w="1"/><text x="43.0836%" y="207.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.16%)</title><rect x="42.9984%" y="213" width="0.1647%" height="15" fill="rgb(229,81,49)" fg:x="261" fg:w="1"/><text x="43.2484%" y="223.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.33%)</title><rect x="43.1631%" y="213" width="0.3295%" height="15" fill="rgb(236,28,36)" fg:x="262" fg:w="2"/><text x="43.4131%" y="223.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.33%)</title><rect x="43.1631%" y="197" width="0.3295%" height="15" fill="rgb(249,185,26)" fg:x="262" fg:w="2"/><text x="43.4131%" y="207.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.33%)</title><rect x="43.1631%" y="181" width="0.3295%" height="15" fill="rgb(249,174,33)" fg:x="262" fg:w="2"/><text x="43.4131%" y="191.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.16%)</title><rect x="43.4926%" y="213" width="0.1647%" height="15" fill="rgb(233,201,37)" fg:x="264" fg:w="1"/><text x="43.7426%" y="223.50"></text></g><g><title>_proc_clear_dirty (5 samples, 0.82%)</title><rect x="43.6573%" y="213" width="0.8237%" height="15" fill="rgb(221,78,26)" fg:x="265" fg:w="5"/><text x="43.9073%" y="223.50"></text></g><g><title>Unknown (32 samples, 5.27%)</title><rect x="39.3740%" y="229" width="5.2718%" height="15" fill="rgb(250,127,30)" fg:x="239" fg:w="32"/><text x="39.6240%" y="239.50">Unknown</text></g><g><title>_vm_copy (1 samples, 0.16%)</title><rect x="44.4811%" y="213" width="0.1647%" height="15" fill="rgb(230,49,44)" fg:x="270" fg:w="1"/><text x="44.7311%" y="223.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="44.4811%" y="197" width="0.1647%" height="15" fill="rgb(229,67,23)" fg:x="270" fg:w="1"/><text x="44.7311%" y="207.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.16%)</title><rect x="44.6458%" y="229" width="0.1647%" height="15" fill="rgb(249,83,47)" fg:x="271" fg:w="1"/><text x="44.8958%" y="239.50"></text></g><g><title>_host_get_special_port (1 samples, 0.16%)</title><rect x="44.8105%" y="229" width="0.1647%" height="15" fill="rgb(215,43,3)" fg:x="272" fg:w="1"/><text x="45.0605%" y="239.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.33%)</title><rect x="44.9753%" y="229" width="0.3295%" height="15" fill="rgb(238,154,13)" fg:x="273" fg:w="2"/><text x="45.2253%" y="239.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.33%)</title><rect x="44.9753%" y="213" width="0.3295%" height="15" fill="rgb(219,56,2)" fg:x="273" fg:w="2"/><text x="45.2253%" y="223.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.33%)</title><rect x="44.9753%" y="197" width="0.3295%" height="15" fill="rgb(233,0,4)" fg:x="273" fg:w="2"/><text x="45.2253%" y="207.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.16%)</title><rect x="45.3048%" y="229" width="0.1647%" height="15" fill="rgb(235,30,7)" fg:x="275" fg:w="1"/><text x="45.5548%" y="239.50"></text></g><g><title>raylib::core::RaylibBuilder::build (47 samples, 7.74%)</title><rect x="37.8913%" y="325" width="7.7430%" height="15" fill="rgb(250,79,13)" fg:x="230" fg:w="47"/><text x="38.1413%" y="335.50">raylib::cor..</text></g><g><title>raylib::core::init_window (47 samples, 7.74%)</title><rect x="37.8913%" y="309" width="7.7430%" height="15" fill="rgb(211,146,34)" fg:x="230" fg:w="47"/><text x="38.1413%" y="319.50">raylib::cor..</text></g><g><title>Unknown (47 samples, 7.74%)</title><rect x="37.8913%" y="293" width="7.7430%" height="15" fill="rgb(228,22,38)" fg:x="230" fg:w="47"/><text x="38.1413%" y="303.50">Unknown</text></g><g><title>Unknown (46 samples, 7.58%)</title><rect x="38.0560%" y="277" width="7.5783%" height="15" fill="rgb(235,168,5)" fg:x="231" fg:w="46"/><text x="38.3060%" y="287.50">Unknown</text></g><g><title>Unknown (46 samples, 7.58%)</title><rect x="38.0560%" y="261" width="7.5783%" height="15" fill="rgb(221,155,16)" fg:x="231" fg:w="46"/><text x="38.3060%" y="271.50">Unknown</text></g><g><title>Unknown (46 samples, 7.58%)</title><rect x="38.0560%" y="245" width="7.5783%" height="15" fill="rgb(215,215,53)" fg:x="231" fg:w="46"/><text x="38.3060%" y="255.50">Unknown</text></g><g><title>_task_info (1 samples, 0.16%)</title><rect x="45.4695%" y="229" width="0.1647%" height="15" fill="rgb(223,4,10)" fg:x="276" fg:w="1"/><text x="45.7195%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.16%)</title><rect x="45.6343%" y="309" width="0.1647%" height="15" fill="rgb(234,103,6)" fg:x="277" fg:w="1"/><text x="45.8843%" y="319.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.16%)</title><rect x="45.6343%" y="293" width="0.1647%" height="15" fill="rgb(227,97,0)" fg:x="277" fg:w="1"/><text x="45.8843%" y="303.50"></text></g><g><title>torpedo::game::game_create_level (1 samples, 0.16%)</title><rect x="45.6343%" y="277" width="0.1647%" height="15" fill="rgb(234,150,53)" fg:x="277" fg:w="1"/><text x="45.8843%" y="287.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.16%)</title><rect x="45.6343%" y="261" width="0.1647%" height="15" fill="rgb(228,201,54)" fg:x="277" fg:w="1"/><text x="45.8843%" y="271.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.16%)</title><rect x="45.6343%" y="245" width="0.1647%" height="15" fill="rgb(222,22,37)" fg:x="277" fg:w="1"/><text x="45.8843%" y="255.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.16%)</title><rect x="45.6343%" y="229" width="0.1647%" height="15" fill="rgb(237,53,32)" fg:x="277" fg:w="1"/><text x="45.8843%" y="239.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.16%)</title><rect x="45.6343%" y="213" width="0.1647%" height="15" fill="rgb(233,25,53)" fg:x="277" fg:w="1"/><text x="45.8843%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.16%)</title><rect x="45.6343%" y="197" width="0.1647%" height="15" fill="rgb(210,40,34)" fg:x="277" fg:w="1"/><text x="45.8843%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.16%)</title><rect x="45.6343%" y="181" width="0.1647%" height="15" fill="rgb(241,220,44)" fg:x="277" fg:w="1"/><text x="45.8843%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="309" width="0.1647%" height="15" fill="rgb(235,28,35)" fg:x="278" fg:w="1"/><text x="46.0490%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::ComponentList&lt;torpedo::level::TagComp&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="293" width="0.1647%" height="15" fill="rgb(210,56,17)" fg:x="278" fg:w="1"/><text x="46.0490%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="277" width="0.1647%" height="15" fill="rgb(224,130,29)" fg:x="278" fg:w="1"/><text x="46.0490%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="261" width="0.1647%" height="15" fill="rgb(235,212,8)" fg:x="278" fg:w="1"/><text x="46.0490%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="245" width="0.1647%" height="15" fill="rgb(223,33,50)" fg:x="278" fg:w="1"/><text x="46.0490%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="229" width="0.1647%" height="15" fill="rgb(219,149,13)" fg:x="278" fg:w="1"/><text x="46.0490%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TagComp&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="213" width="0.1647%" height="15" fill="rgb(250,156,29)" fg:x="278" fg:w="1"/><text x="46.0490%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TagComp&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="197" width="0.1647%" height="15" fill="rgb(216,193,19)" fg:x="278" fg:w="1"/><text x="46.0490%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="181" width="0.1647%" height="15" fill="rgb(216,135,14)" fg:x="278" fg:w="1"/><text x="46.0490%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1 samples, 0.16%)</title><rect x="45.7990%" y="165" width="0.1647%" height="15" fill="rgb(241,47,5)" fg:x="278" fg:w="1"/><text x="46.0490%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="45.7990%" y="149" width="0.1647%" height="15" fill="rgb(233,42,35)" fg:x="278" fg:w="1"/><text x="46.0490%" y="159.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="58.1549%" y="229" width="0.1647%" height="15" fill="rgb(231,13,6)" fg:x="353" fg:w="1"/><text x="58.4049%" y="239.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.16%)</title><rect x="58.3196%" y="229" width="0.1647%" height="15" fill="rgb(207,181,40)" fg:x="354" fg:w="1"/><text x="58.5696%" y="239.50"></text></g><g><title>__kernelrpc_vm_remap (1 samples, 0.16%)</title><rect x="58.4843%" y="229" width="0.1647%" height="15" fill="rgb(254,173,49)" fg:x="355" fg:w="1"/><text x="58.7343%" y="239.50"></text></g><g><title>_mach_continuous_time (21 samples, 3.46%)</title><rect x="58.6491%" y="229" width="3.4596%" height="15" fill="rgb(221,1,38)" fg:x="356" fg:w="21"/><text x="58.8991%" y="239.50">_ma..</text></g><g><title>__kernelrpc_vm_read (21 samples, 3.46%)</title><rect x="58.6491%" y="213" width="3.4596%" height="15" fill="rgb(206,124,46)" fg:x="356" fg:w="21"/><text x="58.8991%" y="223.50">__k..</text></g><g><title>_proc_clear_dirty (21 samples, 3.46%)</title><rect x="58.6491%" y="197" width="3.4596%" height="15" fill="rgb(249,21,11)" fg:x="356" fg:w="21"/><text x="58.8991%" y="207.50">_pr..</text></g><g><title>_proc_clear_dirty (36 samples, 5.93%)</title><rect x="62.1087%" y="229" width="5.9308%" height="15" fill="rgb(222,201,40)" fg:x="377" fg:w="36"/><text x="62.3587%" y="239.50">_proc_cl..</text></g><g><title>_proc_setpcontrol (6 samples, 0.99%)</title><rect x="68.0395%" y="229" width="0.9885%" height="15" fill="rgb(235,61,29)" fg:x="413" fg:w="6"/><text x="68.2895%" y="239.50"></text></g><g><title>_pthread_get_qos_class_np (2 samples, 0.33%)</title><rect x="69.0280%" y="229" width="0.3295%" height="15" fill="rgb(219,207,3)" fg:x="419" fg:w="2"/><text x="69.2780%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (144 samples, 23.72%)</title><rect x="45.9638%" y="309" width="23.7232%" height="15" fill="rgb(222,56,46)" fg:x="279" fg:w="144"/><text x="46.2138%" y="319.50">core::ptr::drop_in_place&lt;raylib::core:..</text></g><g><title>Unknown (144 samples, 23.72%)</title><rect x="45.9638%" y="293" width="23.7232%" height="15" fill="rgb(239,76,54)" fg:x="279" fg:w="144"/><text x="46.2138%" y="303.50">Unknown</text></g><g><title>Unknown (144 samples, 23.72%)</title><rect x="45.9638%" y="277" width="23.7232%" height="15" fill="rgb(231,124,27)" fg:x="279" fg:w="144"/><text x="46.2138%" y="287.50">Unknown</text></g><g><title>Unknown (142 samples, 23.39%)</title><rect x="46.2932%" y="261" width="23.3937%" height="15" fill="rgb(249,195,6)" fg:x="281" fg:w="142"/><text x="46.5432%" y="271.50">Unknown</text></g><g><title>Unknown (142 samples, 23.39%)</title><rect x="46.2932%" y="245" width="23.3937%" height="15" fill="rgb(237,174,47)" fg:x="281" fg:w="142"/><text x="46.5432%" y="255.50">Unknown</text></g><g><title>_vm_remap (2 samples, 0.33%)</title><rect x="69.3575%" y="229" width="0.3295%" height="15" fill="rgb(206,201,31)" fg:x="421" fg:w="2"/><text x="69.6075%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (1 samples, 0.16%)</title><rect x="69.6870%" y="309" width="0.1647%" height="15" fill="rgb(231,57,52)" fg:x="423" fg:w="1"/><text x="69.9370%" y="319.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="69.6870%" y="293" width="0.1647%" height="15" fill="rgb(248,177,22)" fg:x="423" fg:w="1"/><text x="69.9370%" y="303.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="69.6870%" y="277" width="0.1647%" height="15" fill="rgb(215,211,37)" fg:x="423" fg:w="1"/><text x="69.9370%" y="287.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (15 samples, 2.47%)</title><rect x="69.8517%" y="309" width="2.4712%" height="15" fill="rgb(241,128,51)" fg:x="424" fg:w="15"/><text x="70.1017%" y="319.50">st..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (15 samples, 2.47%)</title><rect x="69.8517%" y="293" width="2.4712%" height="15" fill="rgb(227,165,31)" fg:x="424" fg:w="15"/><text x="70.1017%" y="303.50">st..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (15 samples, 2.47%)</title><rect x="69.8517%" y="277" width="2.4712%" height="15" fill="rgb(228,167,24)" fg:x="424" fg:w="15"/><text x="70.1017%" y="287.50">st..</text></g><g><title>_pthread_mutex_setprioceiling (15 samples, 2.47%)</title><rect x="69.8517%" y="261" width="2.4712%" height="15" fill="rgb(228,143,12)" fg:x="424" fg:w="15"/><text x="70.1017%" y="271.50">_p..</text></g><g><title>__pthread_cond_wait (5 samples, 0.82%)</title><rect x="71.4992%" y="245" width="0.8237%" height="15" fill="rgb(249,149,8)" fg:x="434" fg:w="5"/><text x="71.7492%" y="255.50"></text></g><g><title>___workq_open (5 samples, 0.82%)</title><rect x="71.4992%" y="229" width="0.8237%" height="15" fill="rgb(243,35,44)" fg:x="434" fg:w="5"/><text x="71.7492%" y="239.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (6 samples, 0.99%)</title><rect x="72.3229%" y="229" width="0.9885%" height="15" fill="rgb(246,89,9)" fg:x="439" fg:w="6"/><text x="72.5729%" y="239.50"></text></g><g><title>std::thread::spawn (7 samples, 1.15%)</title><rect x="72.3229%" y="309" width="1.1532%" height="15" fill="rgb(233,213,13)" fg:x="439" fg:w="7"/><text x="72.5729%" y="319.50"></text></g><g><title>std::thread::Builder::spawn (7 samples, 1.15%)</title><rect x="72.3229%" y="293" width="1.1532%" height="15" fill="rgb(233,141,41)" fg:x="439" fg:w="7"/><text x="72.5729%" y="303.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (7 samples, 1.15%)</title><rect x="72.3229%" y="277" width="1.1532%" height="15" fill="rgb(239,167,4)" fg:x="439" fg:w="7"/><text x="72.5729%" y="287.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (7 samples, 1.15%)</title><rect x="72.3229%" y="261" width="1.1532%" height="15" fill="rgb(209,217,16)" fg:x="439" fg:w="7"/><text x="72.5729%" y="271.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (7 samples, 1.15%)</title><rect x="72.3229%" y="245" width="1.1532%" height="15" fill="rgb(219,88,35)" fg:x="439" fg:w="7"/><text x="72.5729%" y="255.50"></text></g><g><title>_pthread_workqueue_addthreads_np (1 samples, 0.16%)</title><rect x="73.3114%" y="229" width="0.1647%" height="15" fill="rgb(220,193,23)" fg:x="445" fg:w="1"/><text x="73.5614%" y="239.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.16%)</title><rect x="73.3114%" y="213" width="0.1647%" height="15" fill="rgb(230,90,52)" fg:x="445" fg:w="1"/><text x="73.5614%" y="223.50"></text></g><g><title>torpedo::game::run_game_systems (7 samples, 1.15%)</title><rect x="73.4761%" y="309" width="1.1532%" height="15" fill="rgb(252,106,19)" fg:x="446" fg:w="7"/><text x="73.7261%" y="319.50"></text></g><g><title>torpedo::ui::UI::new_frame_v (7 samples, 1.15%)</title><rect x="73.4761%" y="293" width="1.1532%" height="15" fill="rgb(206,74,20)" fg:x="446" fg:w="7"/><text x="73.7261%" y="303.50"></text></g><g><title>torpedo::ui::UI::new_frame (7 samples, 1.15%)</title><rect x="73.4761%" y="277" width="1.1532%" height="15" fill="rgb(230,138,44)" fg:x="446" fg:w="7"/><text x="73.7261%" y="287.50"></text></g><g><title>torpedo::ui::Frame::add_child (7 samples, 1.15%)</title><rect x="73.4761%" y="261" width="1.1532%" height="15" fill="rgb(235,182,43)" fg:x="446" fg:w="7"/><text x="73.7261%" y="271.50"></text></g><g><title>std::io::stdio::_print (7 samples, 1.15%)</title><rect x="73.4761%" y="245" width="1.1532%" height="15" fill="rgb(242,16,51)" fg:x="446" fg:w="7"/><text x="73.7261%" y="255.50"></text></g><g><title>std::io::stdio::print_to (7 samples, 1.15%)</title><rect x="73.4761%" y="229" width="1.1532%" height="15" fill="rgb(248,9,4)" fg:x="446" fg:w="7"/><text x="73.7261%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 1.15%)</title><rect x="73.4761%" y="213" width="1.1532%" height="15" fill="rgb(210,31,22)" fg:x="446" fg:w="7"/><text x="73.7261%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 1.15%)</title><rect x="73.4761%" y="197" width="1.1532%" height="15" fill="rgb(239,54,39)" fg:x="446" fg:w="7"/><text x="73.7261%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (7 samples, 1.15%)</title><rect x="73.4761%" y="181" width="1.1532%" height="15" fill="rgb(230,99,41)" fg:x="446" fg:w="7"/><text x="73.7261%" y="191.50"></text></g><g><title>core::fmt::write (7 samples, 1.15%)</title><rect x="73.4761%" y="165" width="1.1532%" height="15" fill="rgb(253,106,12)" fg:x="446" fg:w="7"/><text x="73.7261%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 1.15%)</title><rect x="73.4761%" y="149" width="1.1532%" height="15" fill="rgb(213,46,41)" fg:x="446" fg:w="7"/><text x="73.7261%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 1.15%)</title><rect x="73.4761%" y="133" width="1.1532%" height="15" fill="rgb(215,133,35)" fg:x="446" fg:w="7"/><text x="73.7261%" y="143.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 1.15%)</title><rect x="73.4761%" y="117" width="1.1532%" height="15" fill="rgb(213,28,5)" fg:x="446" fg:w="7"/><text x="73.7261%" y="127.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 1.15%)</title><rect x="73.4761%" y="101" width="1.1532%" height="15" fill="rgb(215,77,49)" fg:x="446" fg:w="7"/><text x="73.7261%" y="111.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (7 samples, 1.15%)</title><rect x="73.4761%" y="85" width="1.1532%" height="15" fill="rgb(248,100,22)" fg:x="446" fg:w="7"/><text x="73.7261%" y="95.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (7 samples, 1.15%)</title><rect x="73.4761%" y="69" width="1.1532%" height="15" fill="rgb(208,67,9)" fg:x="446" fg:w="7"/><text x="73.7261%" y="79.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (7 samples, 1.15%)</title><rect x="73.4761%" y="53" width="1.1532%" height="15" fill="rgb(219,133,21)" fg:x="446" fg:w="7"/><text x="73.7261%" y="63.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (7 samples, 1.15%)</title><rect x="73.4761%" y="37" width="1.1532%" height="15" fill="rgb(246,46,29)" fg:x="446" fg:w="7"/><text x="73.7261%" y="47.50"></text></g><g><title>_pthread_cond_broadcast (61 samples, 10.05%)</title><rect x="75.9473%" y="293" width="10.0494%" height="15" fill="rgb(246,185,52)" fg:x="461" fg:w="61"/><text x="76.1973%" y="303.50">_pthread_cond_b..</text></g><g><title>_pthread_rwlock_init (61 samples, 10.05%)</title><rect x="75.9473%" y="277" width="10.0494%" height="15" fill="rgb(252,136,11)" fg:x="461" fg:w="61"/><text x="76.1973%" y="287.50">_pthread_rwlock..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (38 samples, 6.26%)</title><rect x="85.9967%" y="293" width="6.2603%" height="15" fill="rgb(219,138,53)" fg:x="522" fg:w="38"/><text x="86.2467%" y="303.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (38 samples, 6.26%)</title><rect x="85.9967%" y="277" width="6.2603%" height="15" fill="rgb(211,51,23)" fg:x="522" fg:w="38"/><text x="86.2467%" y="287.50">core::pt..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 6.26%)</title><rect x="85.9967%" y="261" width="6.2603%" height="15" fill="rgb(247,221,28)" fg:x="522" fg:w="38"/><text x="86.2467%" y="271.50">&lt;std::sy..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (38 samples, 6.26%)</title><rect x="85.9967%" y="245" width="6.2603%" height="15" fill="rgb(251,222,45)" fg:x="522" fg:w="38"/><text x="86.2467%" y="255.50">std::sys..</text></g><g><title>_pthread_cond_broadcast (36 samples, 5.93%)</title><rect x="86.3262%" y="229" width="5.9308%" height="15" fill="rgb(217,162,53)" fg:x="524" fg:w="36"/><text x="86.5762%" y="239.50">_pthread..</text></g><g><title>_pthread_rwlock_init (36 samples, 5.93%)</title><rect x="86.3262%" y="213" width="5.9308%" height="15" fill="rgb(229,93,14)" fg:x="524" fg:w="36"/><text x="86.5762%" y="223.50">_pthread..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (31 samples, 5.11%)</title><rect x="92.2570%" y="293" width="5.1071%" height="15" fill="rgb(209,67,49)" fg:x="560" fg:w="31"/><text x="92.5070%" y="303.50">core::..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 5.11%)</title><rect x="92.2570%" y="277" width="5.1071%" height="15" fill="rgb(213,87,29)" fg:x="560" fg:w="31"/><text x="92.5070%" y="287.50">&lt;std::..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (31 samples, 5.11%)</title><rect x="92.2570%" y="261" width="5.1071%" height="15" fill="rgb(205,151,52)" fg:x="560" fg:w="31"/><text x="92.5070%" y="271.50">std::s..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (31 samples, 5.11%)</title><rect x="92.2570%" y="245" width="5.1071%" height="15" fill="rgb(253,215,39)" fg:x="560" fg:w="31"/><text x="92.5070%" y="255.50">std::s..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (31 samples, 5.11%)</title><rect x="92.2570%" y="229" width="5.1071%" height="15" fill="rgb(221,220,41)" fg:x="560" fg:w="31"/><text x="92.5070%" y="239.50">std::s..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (31 samples, 5.11%)</title><rect x="92.2570%" y="213" width="5.1071%" height="15" fill="rgb(218,133,21)" fg:x="560" fg:w="31"/><text x="92.5070%" y="223.50">std::s..</text></g><g><title>std::thread::Thread::unpark (31 samples, 5.11%)</title><rect x="92.2570%" y="197" width="5.1071%" height="15" fill="rgb(221,193,43)" fg:x="560" fg:w="31"/><text x="92.5070%" y="207.50">std::t..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (31 samples, 5.11%)</title><rect x="92.2570%" y="181" width="5.1071%" height="15" fill="rgb(240,128,52)" fg:x="560" fg:w="31"/><text x="92.5070%" y="191.50">std::s..</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.66%)</title><rect x="97.3641%" y="293" width="0.6590%" height="15" fill="rgb(253,114,12)" fg:x="591" fg:w="4"/><text x="97.6141%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (4 samples, 0.66%)</title><rect x="97.3641%" y="277" width="0.6590%" height="15" fill="rgb(215,223,47)" fg:x="591" fg:w="4"/><text x="97.6141%" y="287.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (4 samples, 0.66%)</title><rect x="97.3641%" y="261" width="0.6590%" height="15" fill="rgb(248,225,23)" fg:x="591" fg:w="4"/><text x="97.6141%" y="271.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (7 samples, 1.15%)</title><rect x="98.0231%" y="293" width="1.1532%" height="15" fill="rgb(250,108,0)" fg:x="595" fg:w="7"/><text x="98.2731%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (7 samples, 1.15%)</title><rect x="98.0231%" y="277" width="1.1532%" height="15" fill="rgb(228,208,7)" fg:x="595" fg:w="7"/><text x="98.2731%" y="287.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_rectangle_rounded (1 samples, 0.16%)</title><rect x="99.1763%" y="277" width="0.1647%" height="15" fill="rgb(244,45,10)" fg:x="602" fg:w="1"/><text x="99.4263%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.1763%" y="261" width="0.1647%" height="15" fill="rgb(207,125,25)" fg:x="602" fg:w="1"/><text x="99.4263%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.1763%" y="245" width="0.1647%" height="15" fill="rgb(210,195,18)" fg:x="602" fg:w="1"/><text x="99.4263%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.1763%" y="229" width="0.1647%" height="15" fill="rgb(249,80,12)" fg:x="602" fg:w="1"/><text x="99.4263%" y="239.50"></text></g><g><title>torpedo::draw_call::run_draw_calls (2 samples, 0.33%)</title><rect x="99.1763%" y="293" width="0.3295%" height="15" fill="rgb(221,65,9)" fg:x="602" fg:w="2"/><text x="99.4263%" y="303.50"></text></g><g><title>torpedo::draw_call::render_text_bounded (1 samples, 0.16%)</title><rect x="99.3410%" y="277" width="0.1647%" height="15" fill="rgb(235,49,36)" fg:x="603" fg:w="1"/><text x="99.5910%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.3410%" y="261" width="0.1647%" height="15" fill="rgb(225,32,20)" fg:x="603" fg:w="1"/><text x="99.5910%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.3410%" y="245" width="0.1647%" height="15" fill="rgb(215,141,46)" fg:x="603" fg:w="1"/><text x="99.5910%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.16%)</title><rect x="99.3410%" y="229" width="0.1647%" height="15" fill="rgb(250,160,47)" fg:x="603" fg:w="1"/><text x="99.5910%" y="239.50"></text></g><g><title>all (607 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="607"/><text x="0.2500%" y="607.50"></text></g><g><title>8707296384 (419 samples, 69.03%)</title><rect x="30.9720%" y="581" width="69.0280%" height="15" fill="rgb(234,217,39)" fg:x="188" fg:w="419"/><text x="31.2220%" y="591.50">8707296384</text></g><g><title>_main (388 samples, 63.92%)</title><rect x="36.0791%" y="565" width="63.9209%" height="15" fill="rgb(207,178,40)" fg:x="219" fg:w="388"/><text x="36.3291%" y="575.50">_main</text></g><g><title>std::rt::lang_start_internal (388 samples, 63.92%)</title><rect x="36.0791%" y="549" width="63.9209%" height="15" fill="rgb(221,136,13)" fg:x="219" fg:w="388"/><text x="36.3291%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (388 samples, 63.92%)</title><rect x="36.0791%" y="533" width="63.9209%" height="15" fill="rgb(249,199,10)" fg:x="219" fg:w="388"/><text x="36.3291%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (388 samples, 63.92%)</title><rect x="36.0791%" y="517" width="63.9209%" height="15" fill="rgb(249,222,13)" fg:x="219" fg:w="388"/><text x="36.3291%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (388 samples, 63.92%)</title><rect x="36.0791%" y="501" width="63.9209%" height="15" fill="rgb(244,185,38)" fg:x="219" fg:w="388"/><text x="36.3291%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (388 samples, 63.92%)</title><rect x="36.0791%" y="485" width="63.9209%" height="15" fill="rgb(236,202,9)" fg:x="219" fg:w="388"/><text x="36.3291%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (388 samples, 63.92%)</title><rect x="36.0791%" y="469" width="63.9209%" height="15" fill="rgb(250,229,37)" fg:x="219" fg:w="388"/><text x="36.3291%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (388 samples, 63.92%)</title><rect x="36.0791%" y="453" width="63.9209%" height="15" fill="rgb(206,174,23)" fg:x="219" fg:w="388"/><text x="36.3291%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (388 samples, 63.92%)</title><rect x="36.0791%" y="437" width="63.9209%" height="15" fill="rgb(211,33,43)" fg:x="219" fg:w="388"/><text x="36.3291%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (388 samples, 63.92%)</title><rect x="36.0791%" y="421" width="63.9209%" height="15" fill="rgb(245,58,50)" fg:x="219" fg:w="388"/><text x="36.3291%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (388 samples, 63.92%)</title><rect x="36.0791%" y="405" width="63.9209%" height="15" fill="rgb(244,68,36)" fg:x="219" fg:w="388"/><text x="36.3291%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (388 samples, 63.92%)</title><rect x="36.0791%" y="389" width="63.9209%" height="15" fill="rgb(232,229,15)" fg:x="219" fg:w="388"/><text x="36.3291%" y="399.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (388 samples, 63.92%)</title><rect x="36.0791%" y="373" width="63.9209%" height="15" fill="rgb(254,30,23)" fg:x="219" fg:w="388"/><text x="36.3291%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (388 samples, 63.92%)</title><rect x="36.0791%" y="357" width="63.9209%" height="15" fill="rgb(235,160,14)" fg:x="219" fg:w="388"/><text x="36.3291%" y="367.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (388 samples, 63.92%)</title><rect x="36.0791%" y="341" width="63.9209%" height="15" fill="rgb(212,155,44)" fg:x="219" fg:w="388"/><text x="36.3291%" y="351.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (330 samples, 54.37%)</title><rect x="45.6343%" y="325" width="54.3657%" height="15" fill="rgb(226,2,50)" fg:x="277" fg:w="330"/><text x="45.8843%" y="335.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (154 samples, 25.37%)</title><rect x="74.6293%" y="309" width="25.3707%" height="15" fill="rgb(234,177,6)" fg:x="453" fg:w="154"/><text x="74.8793%" y="319.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (3 samples, 0.49%)</title><rect x="99.5058%" y="293" width="0.4942%" height="15" fill="rgb(217,24,9)" fg:x="604" fg:w="3"/><text x="99.7558%" y="303.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (3 samples, 0.49%)</title><rect x="99.5058%" y="277" width="0.4942%" height="15" fill="rgb(220,13,46)" fg:x="604" fg:w="3"/><text x="99.7558%" y="287.50"></text></g><g><title>Unknown (3 samples, 0.49%)</title><rect x="99.5058%" y="261" width="0.4942%" height="15" fill="rgb(239,221,27)" fg:x="604" fg:w="3"/><text x="99.7558%" y="271.50"></text></g><g><title>Unknown (3 samples, 0.49%)</title><rect x="99.5058%" y="245" width="0.4942%" height="15" fill="rgb(222,198,25)" fg:x="604" fg:w="3"/><text x="99.7558%" y="255.50"></text></g><g><title>Unknown (3 samples, 0.49%)</title><rect x="99.5058%" y="229" width="0.4942%" height="15" fill="rgb(211,99,13)" fg:x="604" fg:w="3"/><text x="99.7558%" y="239.50"></text></g><g><title>Unknown (3 samples, 0.49%)</title><rect x="99.5058%" y="213" width="0.4942%" height="15" fill="rgb(232,111,31)" fg:x="604" fg:w="3"/><text x="99.7558%" y="223.50"></text></g></svg></svg>