<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="5833"><g><title>_geteuid (1 samples, 0.02%)</title><rect x="0.0686%" y="517" width="0.0171%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3186%" y="527.50"></text></g><g><title>6102839296 (16 samples, 0.27%)</title><rect x="0.0000%" y="549" width="0.2743%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="16"/><text x="0.2500%" y="559.50"></text></g><g><title>__pthread_wqthread_setup (14 samples, 0.24%)</title><rect x="0.0343%" y="533" width="0.2400%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="14"/><text x="0.2843%" y="543.50"></text></g><g><title>_mach_continuous_time (11 samples, 0.19%)</title><rect x="0.0857%" y="517" width="0.1886%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="11"/><text x="0.3357%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (11 samples, 0.19%)</title><rect x="0.0857%" y="501" width="0.1886%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="11"/><text x="0.3357%" y="511.50"></text></g><g><title>_proc_clear_dirty (11 samples, 0.19%)</title><rect x="0.0857%" y="485" width="0.1886%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="11"/><text x="0.3357%" y="495.50"></text></g><g><title>__pthread_wqthread_setup (11 samples, 0.19%)</title><rect x="0.2743%" y="533" width="0.1886%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="11"/><text x="0.5243%" y="543.50"></text></g><g><title>_mach_continuous_time (6 samples, 0.10%)</title><rect x="0.3600%" y="517" width="0.1029%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="6"/><text x="0.6100%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (6 samples, 0.10%)</title><rect x="0.3600%" y="501" width="0.1029%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="6"/><text x="0.6100%" y="511.50"></text></g><g><title>_proc_clear_dirty (6 samples, 0.10%)</title><rect x="0.3600%" y="485" width="0.1029%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="6"/><text x="0.6100%" y="495.50"></text></g><g><title>6103412736 (12 samples, 0.21%)</title><rect x="0.2743%" y="549" width="0.2057%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="12"/><text x="0.5243%" y="559.50"></text></g><g><title>_pthread_rwlock_rdlock (1 samples, 0.02%)</title><rect x="0.4629%" y="533" width="0.0171%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="1"/><text x="0.7129%" y="543.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="0.4629%" y="517" width="0.0171%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="1"/><text x="0.7129%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="0.4629%" y="501" width="0.0171%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="1"/><text x="0.7129%" y="511.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="0.4629%" y="485" width="0.0171%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="1"/><text x="0.7129%" y="495.50"></text></g><g><title>__pthread_mutex_droplock (1 samples, 0.02%)</title><rect x="0.4800%" y="517" width="0.0171%" height="15" fill="rgb(231,73,38)" fg:x="28" fg:w="1"/><text x="0.7300%" y="527.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.03%)</title><rect x="0.4972%" y="485" width="0.0343%" height="15" fill="rgb(225,20,46)" fg:x="29" fg:w="2"/><text x="0.7472%" y="495.50"></text></g><g><title>6103986176 (6 samples, 0.10%)</title><rect x="0.4800%" y="549" width="0.1029%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="6"/><text x="0.7300%" y="559.50"></text></g><g><title>__pthread_cond_wait (6 samples, 0.10%)</title><rect x="0.4800%" y="533" width="0.1029%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="6"/><text x="0.7300%" y="543.50"></text></g><g><title>_mach_continuous_time (5 samples, 0.09%)</title><rect x="0.4972%" y="517" width="0.0857%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="5"/><text x="0.7472%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (5 samples, 0.09%)</title><rect x="0.4972%" y="501" width="0.0857%" height="15" fill="rgb(249,33,26)" fg:x="29" fg:w="5"/><text x="0.7472%" y="511.50"></text></g><g><title>_proc_signal_delegate (3 samples, 0.05%)</title><rect x="0.5315%" y="485" width="0.0514%" height="15" fill="rgb(235,183,28)" fg:x="31" fg:w="3"/><text x="0.7815%" y="495.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.02%)</title><rect x="0.6343%" y="517" width="0.0171%" height="15" fill="rgb(221,5,38)" fg:x="37" fg:w="1"/><text x="0.8843%" y="527.50"></text></g><g><title>_geteuid (1 samples, 0.02%)</title><rect x="0.6515%" y="517" width="0.0171%" height="15" fill="rgb(247,18,42)" fg:x="38" fg:w="1"/><text x="0.9015%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (19 samples, 0.33%)</title><rect x="0.5829%" y="533" width="0.3257%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="19"/><text x="0.8329%" y="543.50"></text></g><g><title>_mach_continuous_time (14 samples, 0.24%)</title><rect x="0.6686%" y="517" width="0.2400%" height="15" fill="rgb(249,31,29)" fg:x="39" fg:w="14"/><text x="0.9186%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (14 samples, 0.24%)</title><rect x="0.6686%" y="501" width="0.2400%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="14"/><text x="0.9186%" y="511.50"></text></g><g><title>_proc_clear_dirty (14 samples, 0.24%)</title><rect x="0.6686%" y="485" width="0.2400%" height="15" fill="rgb(238,160,17)" fg:x="39" fg:w="14"/><text x="0.9186%" y="495.50"></text></g><g><title>6104559616 (20 samples, 0.34%)</title><rect x="0.5829%" y="549" width="0.3429%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="20"/><text x="0.8329%" y="559.50"></text></g><g><title>_pthread_rwlock_rdlock (1 samples, 0.02%)</title><rect x="0.9086%" y="533" width="0.0171%" height="15" fill="rgb(232,36,49)" fg:x="53" fg:w="1"/><text x="1.1586%" y="543.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="0.9086%" y="517" width="0.0171%" height="15" fill="rgb(209,103,24)" fg:x="53" fg:w="1"/><text x="1.1586%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="0.9086%" y="501" width="0.0171%" height="15" fill="rgb(229,88,8)" fg:x="53" fg:w="1"/><text x="1.1586%" y="511.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="0.9086%" y="485" width="0.0171%" height="15" fill="rgb(213,181,19)" fg:x="53" fg:w="1"/><text x="1.1586%" y="495.50"></text></g><g><title>6105133056 (1 samples, 0.02%)</title><rect x="0.9258%" y="549" width="0.0171%" height="15" fill="rgb(254,191,54)" fg:x="54" fg:w="1"/><text x="1.1758%" y="559.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.02%)</title><rect x="0.9258%" y="533" width="0.0171%" height="15" fill="rgb(241,83,37)" fg:x="54" fg:w="1"/><text x="1.1758%" y="543.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="0.9258%" y="517" width="0.0171%" height="15" fill="rgb(233,36,39)" fg:x="54" fg:w="1"/><text x="1.1758%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="0.9258%" y="501" width="0.0171%" height="15" fill="rgb(226,3,54)" fg:x="54" fg:w="1"/><text x="1.1758%" y="511.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="0.9258%" y="485" width="0.0171%" height="15" fill="rgb(245,192,40)" fg:x="54" fg:w="1"/><text x="1.1758%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2001%" y="213" width="0.0171%" height="15" fill="rgb(238,167,29)" fg:x="70" fg:w="1"/><text x="1.4501%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2001%" y="197" width="0.0171%" height="15" fill="rgb(232,182,51)" fg:x="70" fg:w="1"/><text x="1.4501%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2001%" y="181" width="0.0171%" height="15" fill="rgb(231,60,39)" fg:x="70" fg:w="1"/><text x="1.4501%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="1.2001%" y="165" width="0.0171%" height="15" fill="rgb(208,69,12)" fg:x="70" fg:w="1"/><text x="1.4501%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="1.2001%" y="149" width="0.0171%" height="15" fill="rgb(235,93,37)" fg:x="70" fg:w="1"/><text x="1.4501%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="1.2001%" y="133" width="0.0171%" height="15" fill="rgb(213,116,39)" fg:x="70" fg:w="1"/><text x="1.4501%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="1.2001%" y="117" width="0.0171%" height="15" fill="rgb(222,207,29)" fg:x="70" fg:w="1"/><text x="1.4501%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="1.2001%" y="309" width="0.0343%" height="15" fill="rgb(206,96,30)" fg:x="70" fg:w="2"/><text x="1.4501%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="1.2001%" y="293" width="0.0343%" height="15" fill="rgb(218,138,4)" fg:x="70" fg:w="2"/><text x="1.4501%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="1.2001%" y="277" width="0.0343%" height="15" fill="rgb(250,191,14)" fg:x="70" fg:w="2"/><text x="1.4501%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.03%)</title><rect x="1.2001%" y="261" width="0.0343%" height="15" fill="rgb(239,60,40)" fg:x="70" fg:w="2"/><text x="1.4501%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.03%)</title><rect x="1.2001%" y="245" width="0.0343%" height="15" fill="rgb(206,27,48)" fg:x="70" fg:w="2"/><text x="1.4501%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.03%)</title><rect x="1.2001%" y="229" width="0.0343%" height="15" fill="rgb(225,35,8)" fg:x="70" fg:w="2"/><text x="1.4501%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="1.2172%" y="213" width="0.0171%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="1"/><text x="1.4672%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1.2172%" y="197" width="0.0171%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="1"/><text x="1.4672%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2344%" y="229" width="0.0171%" height="15" fill="rgb(231,138,38)" fg:x="72" fg:w="1"/><text x="1.4844%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2344%" y="213" width="0.0171%" height="15" fill="rgb(231,145,46)" fg:x="72" fg:w="1"/><text x="1.4844%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="1.2344%" y="197" width="0.0171%" height="15" fill="rgb(251,118,11)" fg:x="72" fg:w="1"/><text x="1.4844%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="1.2344%" y="181" width="0.0171%" height="15" fill="rgb(217,147,25)" fg:x="72" fg:w="1"/><text x="1.4844%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="1.2344%" y="165" width="0.0171%" height="15" fill="rgb(247,81,37)" fg:x="72" fg:w="1"/><text x="1.4844%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="1.2344%" y="149" width="0.0171%" height="15" fill="rgb(209,12,38)" fg:x="72" fg:w="1"/><text x="1.4844%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="1.2344%" y="133" width="0.0171%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="1"/><text x="1.4844%" y="143.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (5 samples, 0.09%)</title><rect x="1.2344%" y="309" width="0.0857%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="5"/><text x="1.4844%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.09%)</title><rect x="1.2344%" y="293" width="0.0857%" height="15" fill="rgb(221,10,30)" fg:x="72" fg:w="5"/><text x="1.4844%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.09%)</title><rect x="1.2344%" y="277" width="0.0857%" height="15" fill="rgb(210,229,1)" fg:x="72" fg:w="5"/><text x="1.4844%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.09%)</title><rect x="1.2344%" y="261" width="0.0857%" height="15" fill="rgb(222,148,37)" fg:x="72" fg:w="5"/><text x="1.4844%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.09%)</title><rect x="1.2344%" y="245" width="0.0857%" height="15" fill="rgb(234,67,33)" fg:x="72" fg:w="5"/><text x="1.4844%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.07%)</title><rect x="1.2515%" y="229" width="0.0686%" height="15" fill="rgb(247,98,35)" fg:x="73" fg:w="4"/><text x="1.5015%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.07%)</title><rect x="1.2515%" y="213" width="0.0686%" height="15" fill="rgb(247,138,52)" fg:x="73" fg:w="4"/><text x="1.5015%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="1.3201%" y="309" width="0.0171%" height="15" fill="rgb(213,79,30)" fg:x="77" fg:w="1"/><text x="1.5701%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="1.3201%" y="293" width="0.0171%" height="15" fill="rgb(246,177,23)" fg:x="77" fg:w="1"/><text x="1.5701%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.02%)</title><rect x="1.3201%" y="277" width="0.0171%" height="15" fill="rgb(230,62,27)" fg:x="77" fg:w="1"/><text x="1.5701%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (80 samples, 1.37%)</title><rect x="1.3372%" y="309" width="1.3715%" height="15" fill="rgb(216,154,8)" fg:x="78" fg:w="80"/><text x="1.5872%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (80 samples, 1.37%)</title><rect x="1.3372%" y="293" width="1.3715%" height="15" fill="rgb(244,35,45)" fg:x="78" fg:w="80"/><text x="1.5872%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (80 samples, 1.37%)</title><rect x="1.3372%" y="277" width="1.3715%" height="15" fill="rgb(251,115,12)" fg:x="78" fg:w="80"/><text x="1.5872%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 1.37%)</title><rect x="1.3372%" y="261" width="1.3715%" height="15" fill="rgb(240,54,50)" fg:x="78" fg:w="80"/><text x="1.5872%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 1.37%)</title><rect x="1.3372%" y="245" width="1.3715%" height="15" fill="rgb(233,84,52)" fg:x="78" fg:w="80"/><text x="1.5872%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (80 samples, 1.37%)</title><rect x="1.3372%" y="229" width="1.3715%" height="15" fill="rgb(207,117,47)" fg:x="78" fg:w="80"/><text x="1.5872%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (65 samples, 1.11%)</title><rect x="2.7087%" y="309" width="1.1143%" height="15" fill="rgb(249,43,39)" fg:x="158" fg:w="65"/><text x="2.9587%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (65 samples, 1.11%)</title><rect x="2.7087%" y="293" width="1.1143%" height="15" fill="rgb(209,38,44)" fg:x="158" fg:w="65"/><text x="2.9587%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (65 samples, 1.11%)</title><rect x="2.7087%" y="277" width="1.1143%" height="15" fill="rgb(236,212,23)" fg:x="158" fg:w="65"/><text x="2.9587%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (65 samples, 1.11%)</title><rect x="2.7087%" y="261" width="1.1143%" height="15" fill="rgb(242,79,21)" fg:x="158" fg:w="65"/><text x="2.9587%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (65 samples, 1.11%)</title><rect x="2.7087%" y="245" width="1.1143%" height="15" fill="rgb(211,96,35)" fg:x="158" fg:w="65"/><text x="2.9587%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 1.11%)</title><rect x="2.7087%" y="229" width="1.1143%" height="15" fill="rgb(253,215,40)" fg:x="158" fg:w="65"/><text x="2.9587%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (17 samples, 0.29%)</title><rect x="3.8231%" y="309" width="0.2914%" height="15" fill="rgb(211,81,21)" fg:x="223" fg:w="17"/><text x="4.0731%" y="319.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.29%)</title><rect x="3.8231%" y="293" width="0.2914%" height="15" fill="rgb(208,190,38)" fg:x="223" fg:w="17"/><text x="4.0731%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (17 samples, 0.29%)</title><rect x="3.8231%" y="277" width="0.2914%" height="15" fill="rgb(235,213,38)" fg:x="223" fg:w="17"/><text x="4.0731%" y="287.50"></text></g><g><title>_pthread_cond_broadcast (17 samples, 0.29%)</title><rect x="3.8231%" y="261" width="0.2914%" height="15" fill="rgb(237,122,38)" fg:x="223" fg:w="17"/><text x="4.0731%" y="271.50"></text></g><g><title>_pthread_rwlock_init (17 samples, 0.29%)</title><rect x="3.8231%" y="245" width="0.2914%" height="15" fill="rgb(244,218,35)" fg:x="223" fg:w="17"/><text x="4.0731%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (67 samples, 1.15%)</title><rect x="4.1145%" y="309" width="1.1486%" height="15" fill="rgb(240,68,47)" fg:x="240" fg:w="67"/><text x="4.3645%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (67 samples, 1.15%)</title><rect x="4.1145%" y="293" width="1.1486%" height="15" fill="rgb(210,16,53)" fg:x="240" fg:w="67"/><text x="4.3645%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 1.15%)</title><rect x="4.1145%" y="277" width="1.1486%" height="15" fill="rgb(235,124,12)" fg:x="240" fg:w="67"/><text x="4.3645%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 1.15%)</title><rect x="4.1145%" y="261" width="1.1486%" height="15" fill="rgb(224,169,11)" fg:x="240" fg:w="67"/><text x="4.3645%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (67 samples, 1.15%)</title><rect x="4.1145%" y="245" width="1.1486%" height="15" fill="rgb(250,166,2)" fg:x="240" fg:w="67"/><text x="4.3645%" y="255.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (42 samples, 0.72%)</title><rect x="5.2632%" y="309" width="0.7200%" height="15" fill="rgb(242,216,29)" fg:x="307" fg:w="42"/><text x="5.5132%" y="319.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (42 samples, 0.72%)</title><rect x="5.2632%" y="293" width="0.7200%" height="15" fill="rgb(230,116,27)" fg:x="307" fg:w="42"/><text x="5.5132%" y="303.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (42 samples, 0.72%)</title><rect x="5.2632%" y="277" width="0.7200%" height="15" fill="rgb(228,99,48)" fg:x="307" fg:w="42"/><text x="5.5132%" y="287.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (42 samples, 0.72%)</title><rect x="5.2632%" y="261" width="0.7200%" height="15" fill="rgb(253,11,6)" fg:x="307" fg:w="42"/><text x="5.5132%" y="271.50"></text></g><g><title>_pthread_rwlock_init (42 samples, 0.72%)</title><rect x="5.2632%" y="245" width="0.7200%" height="15" fill="rgb(247,143,39)" fg:x="307" fg:w="42"/><text x="5.5132%" y="255.50"></text></g><g><title>_mach_continuous_time (745 samples, 12.77%)</title><rect x="6.1203%" y="181" width="12.7722%" height="15" fill="rgb(236,97,10)" fg:x="357" fg:w="745"/><text x="6.3703%" y="191.50">_mach_continuous_ti..</text></g><g><title>_geteuid (745 samples, 12.77%)</title><rect x="6.1203%" y="165" width="12.7722%" height="15" fill="rgb(233,208,19)" fg:x="357" fg:w="745"/><text x="6.3703%" y="175.50">_geteuid</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (764 samples, 13.10%)</title><rect x="5.9832%" y="309" width="13.0979%" height="15" fill="rgb(216,164,2)" fg:x="349" fg:w="764"/><text x="6.2332%" y="319.50">std::sync::poison::r..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (764 samples, 13.10%)</title><rect x="5.9832%" y="293" width="13.0979%" height="15" fill="rgb(220,129,5)" fg:x="349" fg:w="764"/><text x="6.2332%" y="303.50">std::sys::sync::rwlo..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (764 samples, 13.10%)</title><rect x="5.9832%" y="277" width="13.0979%" height="15" fill="rgb(242,17,10)" fg:x="349" fg:w="764"/><text x="6.2332%" y="287.50">std::sys::sync::rwlo..</text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (763 samples, 13.08%)</title><rect x="6.0003%" y="261" width="13.0807%" height="15" fill="rgb(242,107,0)" fg:x="350" fg:w="763"/><text x="6.2503%" y="271.50">std::sys::sync::rwlo..</text></g><g><title>std::thread::Thread::park (763 samples, 13.08%)</title><rect x="6.0003%" y="245" width="13.0807%" height="15" fill="rgb(251,28,31)" fg:x="350" fg:w="763"/><text x="6.2503%" y="255.50">std::thread::Thread:..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (763 samples, 13.08%)</title><rect x="6.0003%" y="229" width="13.0807%" height="15" fill="rgb(233,223,10)" fg:x="350" fg:w="763"/><text x="6.2503%" y="239.50">std::sys::sync::thre..</text></g><g><title>___platform_sigaction (756 samples, 12.96%)</title><rect x="6.1203%" y="213" width="12.9607%" height="15" fill="rgb(215,21,27)" fg:x="357" fg:w="756"/><text x="6.3703%" y="223.50">___platform_sigacti..</text></g><g><title>_semaphore_destroy (756 samples, 12.96%)</title><rect x="6.1203%" y="197" width="12.9607%" height="15" fill="rgb(232,23,21)" fg:x="357" fg:w="756"/><text x="6.3703%" y="207.50">_semaphore_destroy</text></g><g><title>_proc_clear_dirty (11 samples, 0.19%)</title><rect x="18.8925%" y="181" width="0.1886%" height="15" fill="rgb(244,5,23)" fg:x="1102" fg:w="11"/><text x="19.1425%" y="191.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (95 samples, 1.63%)</title><rect x="19.0982%" y="277" width="1.6287%" height="15" fill="rgb(226,81,46)" fg:x="1114" fg:w="95"/><text x="19.3482%" y="287.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (95 samples, 1.63%)</title><rect x="19.0982%" y="261" width="1.6287%" height="15" fill="rgb(247,70,30)" fg:x="1114" fg:w="95"/><text x="19.3482%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="20.7098%" y="245" width="0.0171%" height="15" fill="rgb(212,68,19)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="20.7098%" y="229" width="0.0171%" height="15" fill="rgb(240,187,13)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="20.7098%" y="213" width="0.0171%" height="15" fill="rgb(223,113,26)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="20.7098%" y="197" width="0.0171%" height="15" fill="rgb(206,192,2)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="20.7098%" y="181" width="0.0171%" height="15" fill="rgb(241,108,4)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="20.7098%" y="165" width="0.0171%" height="15" fill="rgb(247,173,49)" fg:x="1208" fg:w="1"/><text x="20.9598%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (60 samples, 1.03%)</title><rect x="20.7269%" y="245" width="1.0286%" height="15" fill="rgb(224,114,35)" fg:x="1209" fg:w="60"/><text x="20.9769%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (60 samples, 1.03%)</title><rect x="20.7269%" y="229" width="1.0286%" height="15" fill="rgb(245,159,27)" fg:x="1209" fg:w="60"/><text x="20.9769%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 1.03%)</title><rect x="20.7269%" y="213" width="1.0286%" height="15" fill="rgb(245,172,44)" fg:x="1209" fg:w="60"/><text x="20.9769%" y="223.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (42 samples, 0.72%)</title><rect x="21.0355%" y="197" width="0.7200%" height="15" fill="rgb(236,23,11)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="207.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (42 samples, 0.72%)</title><rect x="21.0355%" y="181" width="0.7200%" height="15" fill="rgb(205,117,38)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (42 samples, 0.72%)</title><rect x="21.0355%" y="165" width="0.7200%" height="15" fill="rgb(237,72,25)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (42 samples, 0.72%)</title><rect x="21.0355%" y="149" width="0.7200%" height="15" fill="rgb(244,70,9)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (42 samples, 0.72%)</title><rect x="21.0355%" y="133" width="0.7200%" height="15" fill="rgb(217,125,39)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (42 samples, 0.72%)</title><rect x="21.0355%" y="117" width="0.7200%" height="15" fill="rgb(235,36,10)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.72%)</title><rect x="21.0355%" y="101" width="0.7200%" height="15" fill="rgb(251,123,47)" fg:x="1227" fg:w="42"/><text x="21.2855%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (313 samples, 5.37%)</title><rect x="20.7269%" y="277" width="5.3660%" height="15" fill="rgb(221,13,13)" fg:x="1209" fg:w="313"/><text x="20.9769%" y="287.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (313 samples, 5.37%)</title><rect x="20.7269%" y="261" width="5.3660%" height="15" fill="rgb(238,131,9)" fg:x="1209" fg:w="313"/><text x="20.9769%" y="271.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (253 samples, 4.34%)</title><rect x="21.7555%" y="245" width="4.3374%" height="15" fill="rgb(211,50,8)" fg:x="1269" fg:w="253"/><text x="22.0055%" y="255.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (253 samples, 4.34%)</title><rect x="21.7555%" y="229" width="4.3374%" height="15" fill="rgb(245,182,24)" fg:x="1269" fg:w="253"/><text x="22.0055%" y="239.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (253 samples, 4.34%)</title><rect x="21.7555%" y="213" width="4.3374%" height="15" fill="rgb(242,14,37)" fg:x="1269" fg:w="253"/><text x="22.0055%" y="223.50">core:..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (253 samples, 4.34%)</title><rect x="21.7555%" y="197" width="4.3374%" height="15" fill="rgb(246,228,12)" fg:x="1269" fg:w="253"/><text x="22.0055%" y="207.50">&lt;hash..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (17 samples, 0.29%)</title><rect x="25.8015%" y="181" width="0.2914%" height="15" fill="rgb(213,55,15)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="191.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (17 samples, 0.29%)</title><rect x="25.8015%" y="165" width="0.2914%" height="15" fill="rgb(209,9,3)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (17 samples, 0.29%)</title><rect x="25.8015%" y="149" width="0.2914%" height="15" fill="rgb(230,59,30)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (17 samples, 0.29%)</title><rect x="25.8015%" y="133" width="0.2914%" height="15" fill="rgb(209,121,21)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (17 samples, 0.29%)</title><rect x="25.8015%" y="117" width="0.2914%" height="15" fill="rgb(220,109,13)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (17 samples, 0.29%)</title><rect x="25.8015%" y="101" width="0.2914%" height="15" fill="rgb(232,18,1)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (17 samples, 0.29%)</title><rect x="25.8015%" y="85" width="0.2914%" height="15" fill="rgb(215,41,42)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.29%)</title><rect x="25.8015%" y="69" width="0.2914%" height="15" fill="rgb(224,123,36)" fg:x="1505" fg:w="17"/><text x="26.0515%" y="79.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (451 samples, 7.73%)</title><rect x="19.0811%" y="309" width="7.7319%" height="15" fill="rgb(240,125,3)" fg:x="1113" fg:w="451"/><text x="19.3311%" y="319.50">torpedo::ar..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (451 samples, 7.73%)</title><rect x="19.0811%" y="293" width="7.7319%" height="15" fill="rgb(205,98,50)" fg:x="1113" fg:w="451"/><text x="19.3311%" y="303.50">torpedo::ar..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (42 samples, 0.72%)</title><rect x="26.0929%" y="277" width="0.7200%" height="15" fill="rgb(205,185,37)" fg:x="1522" fg:w="42"/><text x="26.3429%" y="287.50"></text></g><g><title>torpedo::level::TransformComp::update (1 samples, 0.02%)</title><rect x="26.8130%" y="309" width="0.0171%" height="15" fill="rgb(238,207,15)" fg:x="1564" fg:w="1"/><text x="27.0630%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="26.8301%" y="213" width="0.0343%" height="15" fill="rgb(213,199,42)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="26.8301%" y="197" width="0.0343%" height="15" fill="rgb(235,201,11)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="26.8301%" y="181" width="0.0343%" height="15" fill="rgb(207,46,11)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.03%)</title><rect x="26.8301%" y="165" width="0.0343%" height="15" fill="rgb(241,35,35)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="26.8301%" y="149" width="0.0343%" height="15" fill="rgb(243,32,47)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="26.8301%" y="133" width="0.0343%" height="15" fill="rgb(247,202,23)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="143.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="26.8301%" y="117" width="0.0343%" height="15" fill="rgb(219,102,11)" fg:x="1565" fg:w="2"/><text x="27.0801%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,504 samples, 25.78%)</title><rect x="1.1829%" y="501" width="25.7843%" height="15" fill="rgb(243,110,44)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,504 samples, 25.78%)</title><rect x="1.1829%" y="485" width="25.7843%" height="15" fill="rgb(222,74,54)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,504 samples, 25.78%)</title><rect x="1.1829%" y="469" width="25.7843%" height="15" fill="rgb(216,99,12)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="479.50">core::ops::function::FnOnce::call_once{{v..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,504 samples, 25.78%)</title><rect x="1.1829%" y="453" width="25.7843%" height="15" fill="rgb(226,22,26)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="463.50">std::thread::Builder::spawn_unchecked_::{..</text></g><g><title>std::panic::catch_unwind (1,504 samples, 25.78%)</title><rect x="1.1829%" y="437" width="25.7843%" height="15" fill="rgb(217,163,10)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,504 samples, 25.78%)</title><rect x="1.1829%" y="421" width="25.7843%" height="15" fill="rgb(213,25,53)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,504 samples, 25.78%)</title><rect x="1.1829%" y="405" width="25.7843%" height="15" fill="rgb(252,105,26)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="415.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,504 samples, 25.78%)</title><rect x="1.1829%" y="389" width="25.7843%" height="15" fill="rgb(220,39,43)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="399.50">&lt;core::panic::unwind_safe::AssertUnwindSa..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,504 samples, 25.78%)</title><rect x="1.1829%" y="373" width="25.7843%" height="15" fill="rgb(229,68,48)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="383.50">std::thread::Builder::spawn_unchecked_::{..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,504 samples, 25.78%)</title><rect x="1.1829%" y="357" width="25.7843%" height="15" fill="rgb(252,8,32)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="367.50">std::sys::backtrace::__rust_begin_short_b..</text></g><g><title>torpedo::level::level_loop::{{closure}} (1,504 samples, 25.78%)</title><rect x="1.1829%" y="341" width="25.7843%" height="15" fill="rgb(223,20,43)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="351.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (1,504 samples, 25.78%)</title><rect x="1.1829%" y="325" width="25.7843%" height="15" fill="rgb(229,81,49)" fg:x="69" fg:w="1504"/><text x="1.4329%" y="335.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (8 samples, 0.14%)</title><rect x="26.8301%" y="309" width="0.1372%" height="15" fill="rgb(236,28,36)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="26.8301%" y="293" width="0.1372%" height="15" fill="rgb(249,185,26)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.14%)</title><rect x="26.8301%" y="277" width="0.1372%" height="15" fill="rgb(249,174,33)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.14%)</title><rect x="26.8301%" y="261" width="0.1372%" height="15" fill="rgb(233,201,37)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.14%)</title><rect x="26.8301%" y="245" width="0.1372%" height="15" fill="rgb(221,78,26)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.14%)</title><rect x="26.8301%" y="229" width="0.1372%" height="15" fill="rgb(250,127,30)" fg:x="1565" fg:w="8"/><text x="27.0801%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.10%)</title><rect x="26.8644%" y="213" width="0.1029%" height="15" fill="rgb(230,49,44)" fg:x="1567" fg:w="6"/><text x="27.1144%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.10%)</title><rect x="26.8644%" y="197" width="0.1029%" height="15" fill="rgb(229,67,23)" fg:x="1567" fg:w="6"/><text x="27.1144%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (433 samples, 7.42%)</title><rect x="26.9673%" y="501" width="7.4233%" height="15" fill="rgb(249,83,47)" fg:x="1573" fg:w="433"/><text x="27.2173%" y="511.50">core::ptr:..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (433 samples, 7.42%)</title><rect x="26.9673%" y="485" width="7.4233%" height="15" fill="rgb(215,43,3)" fg:x="1573" fg:w="433"/><text x="27.2173%" y="495.50">&lt;std::sys:..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (433 samples, 7.42%)</title><rect x="26.9673%" y="469" width="7.4233%" height="15" fill="rgb(238,154,13)" fg:x="1573" fg:w="433"/><text x="27.2173%" y="479.50">std::sys::..</text></g><g><title>6107852800 (1,999 samples, 34.27%)</title><rect x="0.9429%" y="549" width="34.2705%" height="15" fill="rgb(219,56,2)" fg:x="55" fg:w="1999"/><text x="1.1929%" y="559.50">6107852800</text></g><g><title>__pthread_cond_wait (1,998 samples, 34.25%)</title><rect x="0.9601%" y="533" width="34.2534%" height="15" fill="rgb(233,0,4)" fg:x="56" fg:w="1998"/><text x="1.2101%" y="543.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,985 samples, 34.03%)</title><rect x="1.1829%" y="517" width="34.0305%" height="15" fill="rgb(235,30,7)" fg:x="69" fg:w="1985"/><text x="1.4329%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (48 samples, 0.82%)</title><rect x="34.3905%" y="501" width="0.8229%" height="15" fill="rgb(250,79,13)" fg:x="2006" fg:w="48"/><text x="34.6405%" y="511.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (48 samples, 0.82%)</title><rect x="34.3905%" y="485" width="0.8229%" height="15" fill="rgb(211,146,34)" fg:x="2006" fg:w="48"/><text x="34.6405%" y="495.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (36 samples, 0.62%)</title><rect x="34.5963%" y="469" width="0.6172%" height="15" fill="rgb(228,22,38)" fg:x="2018" fg:w="36"/><text x="34.8463%" y="479.50"></text></g><g><title>_host_get_special_port (24 samples, 0.41%)</title><rect x="34.8020%" y="453" width="0.4115%" height="15" fill="rgb(235,168,5)" fg:x="2030" fg:w="24"/><text x="35.0520%" y="463.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.02%)</title><rect x="35.7792%" y="533" width="0.0171%" height="15" fill="rgb(221,155,16)" fg:x="2087" fg:w="1"/><text x="36.0292%" y="543.50"></text></g><g><title>__platform_strnlen (1 samples, 0.02%)</title><rect x="35.7792%" y="517" width="0.0171%" height="15" fill="rgb(215,215,53)" fg:x="2087" fg:w="1"/><text x="36.0292%" y="527.50"></text></g><g><title>__platform_strnlen (1 samples, 0.02%)</title><rect x="35.7792%" y="501" width="0.0171%" height="15" fill="rgb(223,4,10)" fg:x="2087" fg:w="1"/><text x="36.0292%" y="511.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.02%)</title><rect x="35.7792%" y="485" width="0.0171%" height="15" fill="rgb(234,103,6)" fg:x="2087" fg:w="1"/><text x="36.0292%" y="495.50"></text></g><g><title>___workq_open (1 samples, 0.02%)</title><rect x="35.7792%" y="469" width="0.0171%" height="15" fill="rgb(227,97,0)" fg:x="2087" fg:w="1"/><text x="36.0292%" y="479.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="35.7963%" y="533" width="0.0171%" height="15" fill="rgb(234,150,53)" fg:x="2088" fg:w="1"/><text x="36.0463%" y="543.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="35.7963%" y="517" width="0.0171%" height="15" fill="rgb(228,201,54)" fg:x="2088" fg:w="1"/><text x="36.0463%" y="527.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="35.7963%" y="501" width="0.0171%" height="15" fill="rgb(222,22,37)" fg:x="2088" fg:w="1"/><text x="36.0463%" y="511.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="35.8821%" y="197" width="0.0171%" height="15" fill="rgb(237,53,32)" fg:x="2093" fg:w="1"/><text x="36.1321%" y="207.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="35.8821%" y="181" width="0.0171%" height="15" fill="rgb(233,25,53)" fg:x="2093" fg:w="1"/><text x="36.1321%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="35.8821%" y="165" width="0.0171%" height="15" fill="rgb(210,40,34)" fg:x="2093" fg:w="1"/><text x="36.1321%" y="175.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.03%)</title><rect x="35.8992%" y="197" width="0.0343%" height="15" fill="rgb(241,220,44)" fg:x="2094" fg:w="2"/><text x="36.1492%" y="207.50"></text></g><g><title>Unknown (7 samples, 0.12%)</title><rect x="35.8306%" y="213" width="0.1200%" height="15" fill="rgb(235,28,35)" fg:x="2090" fg:w="7"/><text x="36.0806%" y="223.50"></text></g><g><title>_task_info (1 samples, 0.02%)</title><rect x="35.9335%" y="197" width="0.0171%" height="15" fill="rgb(210,56,17)" fg:x="2096" fg:w="1"/><text x="36.1835%" y="207.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="35.9506%" y="213" width="0.0171%" height="15" fill="rgb(224,130,29)" fg:x="2097" fg:w="1"/><text x="36.2006%" y="223.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="35.9506%" y="197" width="0.0171%" height="15" fill="rgb(235,212,8)" fg:x="2097" fg:w="1"/><text x="36.2006%" y="207.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="35.9506%" y="181" width="0.0171%" height="15" fill="rgb(223,33,50)" fg:x="2097" fg:w="1"/><text x="36.2006%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 0.17%)</title><rect x="35.8135%" y="293" width="0.1714%" height="15" fill="rgb(219,149,13)" fg:x="2089" fg:w="10"/><text x="36.0635%" y="303.50"></text></g><g><title>Unknown (10 samples, 0.17%)</title><rect x="35.8135%" y="277" width="0.1714%" height="15" fill="rgb(250,156,29)" fg:x="2089" fg:w="10"/><text x="36.0635%" y="287.50"></text></g><g><title>Unknown (10 samples, 0.17%)</title><rect x="35.8135%" y="261" width="0.1714%" height="15" fill="rgb(216,193,19)" fg:x="2089" fg:w="10"/><text x="36.0635%" y="271.50"></text></g><g><title>Unknown (10 samples, 0.17%)</title><rect x="35.8135%" y="245" width="0.1714%" height="15" fill="rgb(216,135,14)" fg:x="2089" fg:w="10"/><text x="36.0635%" y="255.50"></text></g><g><title>Unknown (10 samples, 0.17%)</title><rect x="35.8135%" y="229" width="0.1714%" height="15" fill="rgb(241,47,5)" fg:x="2089" fg:w="10"/><text x="36.0635%" y="239.50"></text></g><g><title>_semaphore_create (1 samples, 0.02%)</title><rect x="35.9678%" y="213" width="0.0171%" height="15" fill="rgb(233,42,35)" fg:x="2098" fg:w="1"/><text x="36.2178%" y="223.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.02%)</title><rect x="36.5678%" y="165" width="0.0171%" height="15" fill="rgb(231,13,6)" fg:x="2133" fg:w="1"/><text x="36.8178%" y="175.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.02%)</title><rect x="36.5849%" y="165" width="0.0171%" height="15" fill="rgb(207,181,40)" fg:x="2134" fg:w="1"/><text x="36.8349%" y="175.50"></text></g><g><title>Unknown (12 samples, 0.21%)</title><rect x="36.4135%" y="181" width="0.2057%" height="15" fill="rgb(254,173,49)" fg:x="2124" fg:w="12"/><text x="36.6635%" y="191.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.02%)</title><rect x="36.6021%" y="165" width="0.0171%" height="15" fill="rgb(221,1,38)" fg:x="2135" fg:w="1"/><text x="36.8521%" y="175.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.03%)</title><rect x="36.6192%" y="181" width="0.0343%" height="15" fill="rgb(206,124,46)" fg:x="2136" fg:w="2"/><text x="36.8692%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.03%)</title><rect x="36.6192%" y="165" width="0.0343%" height="15" fill="rgb(249,21,11)" fg:x="2136" fg:w="2"/><text x="36.8692%" y="175.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.03%)</title><rect x="36.6192%" y="149" width="0.0343%" height="15" fill="rgb(222,201,40)" fg:x="2136" fg:w="2"/><text x="36.8692%" y="159.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.02%)</title><rect x="36.6535%" y="181" width="0.0171%" height="15" fill="rgb(235,61,29)" fg:x="2138" fg:w="1"/><text x="36.9035%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="36.6707%" y="181" width="0.0171%" height="15" fill="rgb(219,207,3)" fg:x="2139" fg:w="1"/><text x="36.9207%" y="191.50"></text></g><g><title>Unknown (30 samples, 0.51%)</title><rect x="36.1906%" y="197" width="0.5143%" height="15" fill="rgb(222,56,46)" fg:x="2111" fg:w="30"/><text x="36.4406%" y="207.50"></text></g><g><title>_vm_copy (1 samples, 0.02%)</title><rect x="36.6878%" y="181" width="0.0171%" height="15" fill="rgb(239,76,54)" fg:x="2140" fg:w="1"/><text x="36.9378%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="36.6878%" y="165" width="0.0171%" height="15" fill="rgb(231,124,27)" fg:x="2140" fg:w="1"/><text x="36.9378%" y="175.50"></text></g><g><title>_host_get_special_port (1 samples, 0.02%)</title><rect x="36.7050%" y="197" width="0.0171%" height="15" fill="rgb(249,195,6)" fg:x="2141" fg:w="1"/><text x="36.9550%" y="207.50"></text></g><g><title>raylib::core::RaylibBuilder::build (45 samples, 0.77%)</title><rect x="35.9849%" y="293" width="0.7715%" height="15" fill="rgb(237,174,47)" fg:x="2099" fg:w="45"/><text x="36.2349%" y="303.50"></text></g><g><title>raylib::core::init_window (45 samples, 0.77%)</title><rect x="35.9849%" y="277" width="0.7715%" height="15" fill="rgb(206,201,31)" fg:x="2099" fg:w="45"/><text x="36.2349%" y="287.50"></text></g><g><title>Unknown (45 samples, 0.77%)</title><rect x="35.9849%" y="261" width="0.7715%" height="15" fill="rgb(231,57,52)" fg:x="2099" fg:w="45"/><text x="36.2349%" y="271.50"></text></g><g><title>Unknown (45 samples, 0.77%)</title><rect x="35.9849%" y="245" width="0.7715%" height="15" fill="rgb(248,177,22)" fg:x="2099" fg:w="45"/><text x="36.2349%" y="255.50"></text></g><g><title>Unknown (45 samples, 0.77%)</title><rect x="35.9849%" y="229" width="0.7715%" height="15" fill="rgb(215,211,37)" fg:x="2099" fg:w="45"/><text x="36.2349%" y="239.50"></text></g><g><title>Unknown (43 samples, 0.74%)</title><rect x="36.0192%" y="213" width="0.7372%" height="15" fill="rgb(241,128,51)" fg:x="2101" fg:w="43"/><text x="36.2692%" y="223.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.03%)</title><rect x="36.7221%" y="197" width="0.0343%" height="15" fill="rgb(227,165,31)" fg:x="2142" fg:w="2"/><text x="36.9721%" y="207.50"></text></g><g><title>torpedo::game::ship::create_basic_ship (1 samples, 0.02%)</title><rect x="36.7564%" y="229" width="0.0171%" height="15" fill="rgb(228,167,24)" fg:x="2144" fg:w="1"/><text x="37.0064%" y="239.50"></text></g><g><title>torpedo::game::ship::ShipBuilder::body (1 samples, 0.02%)</title><rect x="36.7564%" y="213" width="0.0171%" height="15" fill="rgb(228,143,12)" fg:x="2144" fg:w="1"/><text x="37.0064%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="36.7564%" y="197" width="0.0171%" height="15" fill="rgb(249,149,8)" fg:x="2144" fg:w="1"/><text x="37.0064%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 0.03%)</title><rect x="36.7564%" y="277" width="0.0343%" height="15" fill="rgb(243,35,44)" fg:x="2144" fg:w="2"/><text x="37.0064%" y="287.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.03%)</title><rect x="36.7564%" y="261" width="0.0343%" height="15" fill="rgb(246,89,9)" fg:x="2144" fg:w="2"/><text x="37.0064%" y="271.50"></text></g><g><title>torpedo::game::game_create_level (2 samples, 0.03%)</title><rect x="36.7564%" y="245" width="0.0343%" height="15" fill="rgb(233,213,13)" fg:x="2144" fg:w="2"/><text x="37.0064%" y="255.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.02%)</title><rect x="36.7735%" y="229" width="0.0171%" height="15" fill="rgb(233,141,41)" fg:x="2145" fg:w="1"/><text x="37.0235%" y="239.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_sphere (1 samples, 0.02%)</title><rect x="36.7735%" y="213" width="0.0171%" height="15" fill="rgb(239,167,4)" fg:x="2145" fg:w="1"/><text x="37.0235%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="36.7735%" y="197" width="0.0171%" height="15" fill="rgb(209,217,16)" fg:x="2145" fg:w="1"/><text x="37.0235%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.02%)</title><rect x="36.7907%" y="277" width="0.0171%" height="15" fill="rgb(219,88,35)" fg:x="2146" fg:w="1"/><text x="37.0407%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.02%)</title><rect x="36.7907%" y="261" width="0.0171%" height="15" fill="rgb(220,193,23)" fg:x="2146" fg:w="1"/><text x="37.0407%" y="271.50"></text></g><g><title>Unknown (10 samples, 0.17%)</title><rect x="53.1116%" y="197" width="0.1714%" height="15" fill="rgb(230,90,52)" fg:x="3098" fg:w="10"/><text x="53.3616%" y="207.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.02%)</title><rect x="53.2659%" y="181" width="0.0171%" height="15" fill="rgb(252,106,19)" fg:x="3107" fg:w="1"/><text x="53.5159%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.02%)</title><rect x="53.2659%" y="165" width="0.0171%" height="15" fill="rgb(206,74,20)" fg:x="3107" fg:w="1"/><text x="53.5159%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="53.2659%" y="149" width="0.0171%" height="15" fill="rgb(230,138,44)" fg:x="3107" fg:w="1"/><text x="53.5159%" y="159.50"></text></g><g><title>___workq_open (1 samples, 0.02%)</title><rect x="53.2830%" y="197" width="0.0171%" height="15" fill="rgb(235,182,43)" fg:x="3108" fg:w="1"/><text x="53.5330%" y="207.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.02%)</title><rect x="53.3002%" y="197" width="0.0171%" height="15" fill="rgb(242,16,51)" fg:x="3109" fg:w="1"/><text x="53.5502%" y="207.50"></text></g><g><title>_geteuid (1 samples, 0.02%)</title><rect x="53.3173%" y="197" width="0.0171%" height="15" fill="rgb(248,9,4)" fg:x="3110" fg:w="1"/><text x="53.5673%" y="207.50"></text></g><g><title>_host_get_special_port (1 samples, 0.02%)</title><rect x="53.3345%" y="197" width="0.0171%" height="15" fill="rgb(210,31,22)" fg:x="3111" fg:w="1"/><text x="53.5845%" y="207.50"></text></g><g><title>_mach_continuous_time (122 samples, 2.09%)</title><rect x="53.3516%" y="197" width="2.0915%" height="15" fill="rgb(239,54,39)" fg:x="3112" fg:w="122"/><text x="53.6016%" y="207.50">_..</text></g><g><title>__kernelrpc_vm_read (122 samples, 2.09%)</title><rect x="53.3516%" y="181" width="2.0915%" height="15" fill="rgb(230,99,41)" fg:x="3112" fg:w="122"/><text x="53.6016%" y="191.50">_..</text></g><g><title>_proc_clear_dirty (122 samples, 2.09%)</title><rect x="53.3516%" y="165" width="2.0915%" height="15" fill="rgb(253,106,12)" fg:x="3112" fg:w="122"/><text x="53.6016%" y="175.50">_..</text></g><g><title>_mig_strncpy_zerofill (1 samples, 0.02%)</title><rect x="55.4432%" y="197" width="0.0171%" height="15" fill="rgb(213,46,41)" fg:x="3234" fg:w="1"/><text x="55.6932%" y="207.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.02%)</title><rect x="55.4432%" y="181" width="0.0171%" height="15" fill="rgb(215,133,35)" fg:x="3234" fg:w="1"/><text x="55.6932%" y="191.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.02%)</title><rect x="55.4603%" y="197" width="0.0171%" height="15" fill="rgb(213,28,5)" fg:x="3235" fg:w="1"/><text x="55.7103%" y="207.50"></text></g><g><title>_proc_clear_dirty (500 samples, 8.57%)</title><rect x="55.4775%" y="197" width="8.5719%" height="15" fill="rgb(215,77,49)" fg:x="3236" fg:w="500"/><text x="55.7275%" y="207.50">_proc_clear_..</text></g><g><title>_proc_setpcontrol (131 samples, 2.25%)</title><rect x="64.0494%" y="197" width="2.2458%" height="15" fill="rgb(248,100,22)" fg:x="3736" fg:w="131"/><text x="64.2994%" y="207.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (1,721 samples, 29.50%)</title><rect x="36.8078%" y="277" width="29.5045%" height="15" fill="rgb(208,67,9)" fg:x="2147" fg:w="1721"/><text x="37.0578%" y="287.50">core::ptr::drop_in_place&lt;raylib::core::drawing::..</text></g><g><title>Unknown (1,721 samples, 29.50%)</title><rect x="36.8078%" y="261" width="29.5045%" height="15" fill="rgb(219,133,21)" fg:x="2147" fg:w="1721"/><text x="37.0578%" y="271.50">Unknown</text></g><g><title>Unknown (1,721 samples, 29.50%)</title><rect x="36.8078%" y="245" width="29.5045%" height="15" fill="rgb(246,46,29)" fg:x="2147" fg:w="1721"/><text x="37.0578%" y="255.50">Unknown</text></g><g><title>Unknown (1,699 samples, 29.13%)</title><rect x="37.1850%" y="229" width="29.1274%" height="15" fill="rgb(246,185,52)" fg:x="2169" fg:w="1699"/><text x="37.4350%" y="239.50">Unknown</text></g><g><title>Unknown (1,672 samples, 28.66%)</title><rect x="37.6479%" y="213" width="28.6645%" height="15" fill="rgb(252,136,11)" fg:x="2196" fg:w="1672"/><text x="37.8979%" y="223.50">Unknown</text></g><g><title>_setxattr (1 samples, 0.02%)</title><rect x="66.2952%" y="197" width="0.0171%" height="15" fill="rgb(219,138,53)" fg:x="3867" fg:w="1"/><text x="66.5452%" y="207.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (1 samples, 0.02%)</title><rect x="66.3124%" y="277" width="0.0171%" height="15" fill="rgb(211,51,23)" fg:x="3868" fg:w="1"/><text x="66.5624%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="66.3124%" y="261" width="0.0171%" height="15" fill="rgb(247,221,28)" fg:x="3868" fg:w="1"/><text x="66.5624%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="66.3124%" y="245" width="0.0171%" height="15" fill="rgb(251,222,45)" fg:x="3868" fg:w="1"/><text x="66.5624%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::Packet&lt;()&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="66.3295%" y="245" width="0.0171%" height="15" fill="rgb(217,162,53)" fg:x="3869" fg:w="1"/><text x="66.5795%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="66.3295%" y="229" width="0.0171%" height="15" fill="rgb(229,93,14)" fg:x="3869" fg:w="1"/><text x="66.5795%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="66.3295%" y="213" width="0.0171%" height="15" fill="rgb(209,67,49)" fg:x="3869" fg:w="1"/><text x="66.5795%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.02%)</title><rect x="66.3295%" y="197" width="0.0171%" height="15" fill="rgb(213,87,29)" fg:x="3869" fg:w="1"/><text x="66.5795%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="245" width="2.3316%" height="15" fill="rgb(205,151,52)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Inner&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="229" width="2.3316%" height="15" fill="rgb(253,215,39)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt;&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="213" width="2.3316%" height="15" fill="rgb(221,220,41)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="197" width="2.3316%" height="15" fill="rgb(218,133,21)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="207.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 2.33%)</title><rect x="66.3466%" y="181" width="2.3316%" height="15" fill="rgb(221,193,43)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="191.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (136 samples, 2.33%)</title><rect x="66.3466%" y="165" width="2.3316%" height="15" fill="rgb(240,128,52)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="175.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;std::thread::OtherInner&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="149" width="2.3316%" height="15" fill="rgb(253,114,12)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="159.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::sync::thread_parking::darwin::Parker&gt; (136 samples, 2.33%)</title><rect x="66.3466%" y="133" width="2.3316%" height="15" fill="rgb(215,223,47)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="143.50">c..</text></g><g><title>&lt;std::sys::sync::thread_parking::darwin::Parker as core::ops::drop::Drop&gt;::drop (136 samples, 2.33%)</title><rect x="66.3466%" y="117" width="2.3316%" height="15" fill="rgb(248,225,23)" fg:x="3870" fg:w="136"/><text x="66.5966%" y="127.50">&lt;..</text></g><g><title>__os_once_gate_wait (135 samples, 2.31%)</title><rect x="66.3638%" y="101" width="2.3144%" height="15" fill="rgb(250,108,0)" fg:x="3871" fg:w="135"/><text x="66.6138%" y="111.50">_..</text></g><g><title>_sigprocmask (135 samples, 2.31%)</title><rect x="66.3638%" y="85" width="2.3144%" height="15" fill="rgb(228,208,7)" fg:x="3871" fg:w="135"/><text x="66.6138%" y="95.50">_..</text></g><g><title>_proc_clear_dirty (135 samples, 2.31%)</title><rect x="66.3638%" y="69" width="2.3144%" height="15" fill="rgb(244,45,10)" fg:x="3871" fg:w="135"/><text x="66.6138%" y="79.50">_..</text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (296 samples, 5.07%)</title><rect x="66.3295%" y="277" width="5.0746%" height="15" fill="rgb(207,125,25)" fg:x="3869" fg:w="296"/><text x="66.5795%" y="287.50">std::t..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (296 samples, 5.07%)</title><rect x="66.3295%" y="261" width="5.0746%" height="15" fill="rgb(210,195,18)" fg:x="3869" fg:w="296"/><text x="66.5795%" y="271.50">std::t..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (159 samples, 2.73%)</title><rect x="68.6782%" y="245" width="2.7259%" height="15" fill="rgb(249,80,12)" fg:x="4006" fg:w="159"/><text x="68.9282%" y="255.50">st..</text></g><g><title>_pthread_mutex_setprioceiling (159 samples, 2.73%)</title><rect x="68.6782%" y="229" width="2.7259%" height="15" fill="rgb(221,65,9)" fg:x="4006" fg:w="159"/><text x="68.9282%" y="239.50">_p..</text></g><g><title>__pthread_cond_wait (107 samples, 1.83%)</title><rect x="69.5697%" y="213" width="1.8344%" height="15" fill="rgb(235,49,36)" fg:x="4058" fg:w="107"/><text x="69.8197%" y="223.50">_..</text></g><g><title>___workq_open (107 samples, 1.83%)</title><rect x="69.5697%" y="197" width="1.8344%" height="15" fill="rgb(225,32,20)" fg:x="4058" fg:w="107"/><text x="69.8197%" y="207.50">_..</text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (40 samples, 0.69%)</title><rect x="71.4041%" y="197" width="0.6858%" height="15" fill="rgb(215,141,46)" fg:x="4165" fg:w="40"/><text x="71.6541%" y="207.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (10 samples, 0.17%)</title><rect x="72.0898%" y="197" width="0.1714%" height="15" fill="rgb(250,160,47)" fg:x="4205" fg:w="10"/><text x="72.3398%" y="207.50"></text></g><g><title>_kpersona_get (10 samples, 0.17%)</title><rect x="72.0898%" y="181" width="0.1714%" height="15" fill="rgb(216,222,40)" fg:x="4205" fg:w="10"/><text x="72.3398%" y="191.50"></text></g><g><title>std::thread::spawn (79 samples, 1.35%)</title><rect x="71.4041%" y="277" width="1.3544%" height="15" fill="rgb(234,217,39)" fg:x="4165" fg:w="79"/><text x="71.6541%" y="287.50"></text></g><g><title>std::thread::Builder::spawn (79 samples, 1.35%)</title><rect x="71.4041%" y="261" width="1.3544%" height="15" fill="rgb(207,178,40)" fg:x="4165" fg:w="79"/><text x="71.6541%" y="271.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (79 samples, 1.35%)</title><rect x="71.4041%" y="245" width="1.3544%" height="15" fill="rgb(221,136,13)" fg:x="4165" fg:w="79"/><text x="71.6541%" y="255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (79 samples, 1.35%)</title><rect x="71.4041%" y="229" width="1.3544%" height="15" fill="rgb(249,199,10)" fg:x="4165" fg:w="79"/><text x="71.6541%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (79 samples, 1.35%)</title><rect x="71.4041%" y="213" width="1.3544%" height="15" fill="rgb(249,222,13)" fg:x="4165" fg:w="79"/><text x="71.6541%" y="223.50"></text></g><g><title>_pthread_workqueue_addthreads_np (29 samples, 0.50%)</title><rect x="72.2613%" y="197" width="0.4972%" height="15" fill="rgb(244,185,38)" fg:x="4215" fg:w="29"/><text x="72.5113%" y="207.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (29 samples, 0.50%)</title><rect x="72.2613%" y="181" width="0.4972%" height="15" fill="rgb(236,202,9)" fg:x="4215" fg:w="29"/><text x="72.5113%" y="191.50"></text></g><g><title>_pthread_cond_broadcast (168 samples, 2.88%)</title><rect x="73.9242%" y="261" width="2.8802%" height="15" fill="rgb(250,229,37)" fg:x="4312" fg:w="168"/><text x="74.1742%" y="271.50">_p..</text></g><g><title>_pthread_rwlock_init (168 samples, 2.88%)</title><rect x="73.9242%" y="245" width="2.8802%" height="15" fill="rgb(206,174,23)" fg:x="4312" fg:w="168"/><text x="74.1742%" y="255.50">_p..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (220 samples, 3.77%)</title><rect x="76.8044%" y="261" width="3.7716%" height="15" fill="rgb(211,33,43)" fg:x="4480" fg:w="220"/><text x="77.0544%" y="271.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (220 samples, 3.77%)</title><rect x="76.8044%" y="245" width="3.7716%" height="15" fill="rgb(245,58,50)" fg:x="4480" fg:w="220"/><text x="77.0544%" y="255.50">core..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (220 samples, 3.77%)</title><rect x="76.8044%" y="229" width="3.7716%" height="15" fill="rgb(244,68,36)" fg:x="4480" fg:w="220"/><text x="77.0544%" y="239.50">&lt;std..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (220 samples, 3.77%)</title><rect x="76.8044%" y="213" width="3.7716%" height="15" fill="rgb(232,229,15)" fg:x="4480" fg:w="220"/><text x="77.0544%" y="223.50">std:..</text></g><g><title>_pthread_cond_broadcast (175 samples, 3.00%)</title><rect x="77.5759%" y="197" width="3.0002%" height="15" fill="rgb(254,30,23)" fg:x="4525" fg:w="175"/><text x="77.8259%" y="207.50">_pt..</text></g><g><title>_pthread_rwlock_init (175 samples, 3.00%)</title><rect x="77.5759%" y="181" width="3.0002%" height="15" fill="rgb(235,160,14)" fg:x="4525" fg:w="175"/><text x="77.8259%" y="191.50">_pt..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (941 samples, 16.13%)</title><rect x="80.5760%" y="261" width="16.1324%" height="15" fill="rgb(212,155,44)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="271.50">core::ptr::drop_in_place&lt;..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (941 samples, 16.13%)</title><rect x="80.5760%" y="245" width="16.1324%" height="15" fill="rgb(226,2,50)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="255.50">&lt;std::sync::poison::rwloc..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (941 samples, 16.13%)</title><rect x="80.5760%" y="229" width="16.1324%" height="15" fill="rgb(234,177,6)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="239.50">std::sys::sync::rwlock::q..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (941 samples, 16.13%)</title><rect x="80.5760%" y="213" width="16.1324%" height="15" fill="rgb(217,24,9)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="223.50">std::sys::sync::rwlock::q..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (941 samples, 16.13%)</title><rect x="80.5760%" y="197" width="16.1324%" height="15" fill="rgb(220,13,46)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="207.50">std::sys::sync::rwlock::q..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (941 samples, 16.13%)</title><rect x="80.5760%" y="181" width="16.1324%" height="15" fill="rgb(239,221,27)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="191.50">std::sys::sync::rwlock::q..</text></g><g><title>std::thread::Thread::unpark (941 samples, 16.13%)</title><rect x="80.5760%" y="165" width="16.1324%" height="15" fill="rgb(222,198,25)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="175.50">std::thread::Thread::unpa..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (941 samples, 16.13%)</title><rect x="80.5760%" y="149" width="16.1324%" height="15" fill="rgb(211,99,13)" fg:x="4700" fg:w="941"/><text x="80.8260%" y="159.50">std::sys::sync::thread_pa..</text></g><g><title>raylib::core::camera::&lt;impl raylib::core::RaylibHandle&gt;::update_camera (1 samples, 0.02%)</title><rect x="96.7084%" y="261" width="0.0171%" height="15" fill="rgb(232,111,31)" fg:x="5641" fg:w="1"/><text x="96.9584%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="96.7084%" y="245" width="0.0171%" height="15" fill="rgb(245,82,37)" fg:x="5641" fg:w="1"/><text x="96.9584%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="96.7084%" y="229" width="0.0171%" height="15" fill="rgb(227,149,46)" fg:x="5641" fg:w="1"/><text x="96.9584%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.02%)</title><rect x="96.7084%" y="213" width="0.0171%" height="15" fill="rgb(218,36,50)" fg:x="5641" fg:w="1"/><text x="96.9584%" y="223.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_fps (7 samples, 0.12%)</title><rect x="96.7255%" y="261" width="0.1200%" height="15" fill="rgb(226,80,48)" fg:x="5642" fg:w="7"/><text x="96.9755%" y="271.50"></text></g><g><title>Unknown (7 samples, 0.12%)</title><rect x="96.7255%" y="245" width="0.1200%" height="15" fill="rgb(238,224,15)" fg:x="5642" fg:w="7"/><text x="96.9755%" y="255.50"></text></g><g><title>Unknown (7 samples, 0.12%)</title><rect x="96.7255%" y="229" width="0.1200%" height="15" fill="rgb(241,136,10)" fg:x="5642" fg:w="7"/><text x="96.9755%" y="239.50"></text></g><g><title>Unknown (3 samples, 0.05%)</title><rect x="96.7941%" y="213" width="0.0514%" height="15" fill="rgb(208,32,45)" fg:x="5646" fg:w="3"/><text x="97.0441%" y="223.50"></text></g><g><title>Unknown (3 samples, 0.05%)</title><rect x="96.7941%" y="197" width="0.0514%" height="15" fill="rgb(207,135,9)" fg:x="5646" fg:w="3"/><text x="97.0441%" y="207.50"></text></g><g><title>Unknown (2 samples, 0.03%)</title><rect x="96.8112%" y="181" width="0.0343%" height="15" fill="rgb(206,86,44)" fg:x="5647" fg:w="2"/><text x="97.0612%" y="191.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.48%)</title><rect x="96.8455%" y="261" width="0.4800%" height="15" fill="rgb(245,177,15)" fg:x="5649" fg:w="28"/><text x="97.0955%" y="271.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (28 samples, 0.48%)</title><rect x="96.8455%" y="245" width="0.4800%" height="15" fill="rgb(206,64,50)" fg:x="5649" fg:w="28"/><text x="97.0955%" y="255.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (10 samples, 0.17%)</title><rect x="97.1541%" y="229" width="0.1714%" height="15" fill="rgb(234,36,40)" fg:x="5667" fg:w="10"/><text x="97.4041%" y="239.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (7 samples, 0.12%)</title><rect x="97.2056%" y="213" width="0.1200%" height="15" fill="rgb(213,64,8)" fg:x="5670" fg:w="7"/><text x="97.4556%" y="223.50"></text></g><g><title>_pthread_rwlock_init (7 samples, 0.12%)</title><rect x="97.2056%" y="197" width="0.1200%" height="15" fill="rgb(210,75,36)" fg:x="5670" fg:w="7"/><text x="97.4556%" y="207.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (46 samples, 0.79%)</title><rect x="97.3256%" y="261" width="0.7886%" height="15" fill="rgb(229,88,21)" fg:x="5677" fg:w="46"/><text x="97.5756%" y="271.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (46 samples, 0.79%)</title><rect x="97.3256%" y="245" width="0.7886%" height="15" fill="rgb(252,204,47)" fg:x="5677" fg:w="46"/><text x="97.5756%" y="255.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::try_lock (19 samples, 0.33%)</title><rect x="97.7884%" y="229" width="0.3257%" height="15" fill="rgb(208,77,27)" fg:x="5704" fg:w="19"/><text x="98.0384%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_rectangle_rounded (26 samples, 0.45%)</title><rect x="98.1142%" y="245" width="0.4457%" height="15" fill="rgb(221,76,26)" fg:x="5723" fg:w="26"/><text x="98.3642%" y="255.50"></text></g><g><title>Unknown (25 samples, 0.43%)</title><rect x="98.1313%" y="229" width="0.4286%" height="15" fill="rgb(225,139,18)" fg:x="5724" fg:w="25"/><text x="98.3813%" y="239.50"></text></g><g><title>Unknown (23 samples, 0.39%)</title><rect x="98.1656%" y="213" width="0.3943%" height="15" fill="rgb(230,137,11)" fg:x="5726" fg:w="23"/><text x="98.4156%" y="223.50"></text></g><g><title>Unknown (12 samples, 0.21%)</title><rect x="98.3542%" y="197" width="0.2057%" height="15" fill="rgb(212,28,1)" fg:x="5737" fg:w="12"/><text x="98.6042%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (2 samples, 0.03%)</title><rect x="98.5599%" y="229" width="0.0343%" height="15" fill="rgb(248,164,17)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="239.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.03%)</title><rect x="98.5599%" y="213" width="0.0343%" height="15" fill="rgb(222,171,42)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.03%)</title><rect x="98.5599%" y="197" width="0.0343%" height="15" fill="rgb(243,84,45)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="98.5599%" y="181" width="0.0343%" height="15" fill="rgb(252,49,23)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.03%)</title><rect x="98.5599%" y="165" width="0.0343%" height="15" fill="rgb(215,19,7)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="98.5599%" y="149" width="0.0343%" height="15" fill="rgb(238,81,41)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="98.5599%" y="133" width="0.0343%" height="15" fill="rgb(210,199,37)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.03%)</title><rect x="98.5599%" y="117" width="0.0343%" height="15" fill="rgb(244,192,49)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.03%)</title><rect x="98.5599%" y="101" width="0.0343%" height="15" fill="rgb(226,211,11)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="98.5599%" y="85" width="0.0343%" height="15" fill="rgb(236,162,54)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="98.5599%" y="69" width="0.0343%" height="15" fill="rgb(220,229,9)" fg:x="5749" fg:w="2"/><text x="98.8099%" y="79.50"></text></g><g><title>Unknown (28 samples, 0.48%)</title><rect x="98.5942%" y="229" width="0.4800%" height="15" fill="rgb(250,87,22)" fg:x="5751" fg:w="28"/><text x="98.8442%" y="239.50"></text></g><g><title>Unknown (26 samples, 0.45%)</title><rect x="98.6285%" y="213" width="0.4457%" height="15" fill="rgb(239,43,17)" fg:x="5753" fg:w="26"/><text x="98.8785%" y="223.50"></text></g><g><title>Unknown (13 samples, 0.22%)</title><rect x="98.8514%" y="197" width="0.2229%" height="15" fill="rgb(231,177,25)" fg:x="5766" fg:w="13"/><text x="99.1014%" y="207.50"></text></g><g><title>Unknown (3 samples, 0.05%)</title><rect x="99.0228%" y="181" width="0.0514%" height="15" fill="rgb(219,179,1)" fg:x="5776" fg:w="3"/><text x="99.2728%" y="191.50"></text></g><g><title>Unknown (3 samples, 0.05%)</title><rect x="99.0228%" y="165" width="0.0514%" height="15" fill="rgb(238,219,53)" fg:x="5776" fg:w="3"/><text x="99.2728%" y="175.50"></text></g><g><title>torpedo::draw_call::run_draw_calls (58 samples, 0.99%)</title><rect x="98.1142%" y="261" width="0.9943%" height="15" fill="rgb(232,167,36)" fg:x="5723" fg:w="58"/><text x="98.3642%" y="271.50"></text></g><g><title>torpedo::draw_call::render_text_bounded (32 samples, 0.55%)</title><rect x="98.5599%" y="245" width="0.5486%" height="15" fill="rgb(244,19,51)" fg:x="5749" fg:w="32"/><text x="98.8099%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.03%)</title><rect x="99.0742%" y="229" width="0.0343%" height="15" fill="rgb(224,6,22)" fg:x="5779" fg:w="2"/><text x="99.3242%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="99.0742%" y="213" width="0.0343%" height="15" fill="rgb(224,145,5)" fg:x="5779" fg:w="2"/><text x="99.3242%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="99.0742%" y="197" width="0.0343%" height="15" fill="rgb(234,130,49)" fg:x="5779" fg:w="2"/><text x="99.3242%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="99.0742%" y="181" width="0.0343%" height="15" fill="rgb(254,6,2)" fg:x="5779" fg:w="2"/><text x="99.3242%" y="191.50"></text></g><g><title>torpedo::renderer::render (2 samples, 0.03%)</title><rect x="99.1085%" y="261" width="0.0343%" height="15" fill="rgb(208,96,46)" fg:x="5781" fg:w="2"/><text x="99.3585%" y="271.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (47 samples, 0.81%)</title><rect x="99.1428%" y="245" width="0.8058%" height="15" fill="rgb(239,3,39)" fg:x="5783" fg:w="47"/><text x="99.3928%" y="255.50"></text></g><g><title>Unknown (47 samples, 0.81%)</title><rect x="99.1428%" y="229" width="0.8058%" height="15" fill="rgb(233,210,1)" fg:x="5783" fg:w="47"/><text x="99.3928%" y="239.50"></text></g><g><title>Unknown (47 samples, 0.81%)</title><rect x="99.1428%" y="213" width="0.8058%" height="15" fill="rgb(244,137,37)" fg:x="5783" fg:w="47"/><text x="99.3928%" y="223.50"></text></g><g><title>Unknown (47 samples, 0.81%)</title><rect x="99.1428%" y="197" width="0.8058%" height="15" fill="rgb(240,136,2)" fg:x="5783" fg:w="47"/><text x="99.3928%" y="207.50"></text></g><g><title>Unknown (47 samples, 0.81%)</title><rect x="99.1428%" y="181" width="0.8058%" height="15" fill="rgb(239,18,37)" fg:x="5783" fg:w="47"/><text x="99.3928%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="99.9486%" y="197" width="0.0171%" height="15" fill="rgb(218,185,22)" fg:x="5830" fg:w="1"/><text x="100.1986%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.03%)</title><rect x="99.9486%" y="245" width="0.0343%" height="15" fill="rgb(225,218,4)" fg:x="5830" fg:w="2"/><text x="100.1986%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.03%)</title><rect x="99.9486%" y="229" width="0.0343%" height="15" fill="rgb(230,182,32)" fg:x="5830" fg:w="2"/><text x="100.1986%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.03%)</title><rect x="99.9486%" y="213" width="0.0343%" height="15" fill="rgb(242,56,43)" fg:x="5830" fg:w="2"/><text x="100.1986%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.02%)</title><rect x="99.9657%" y="197" width="0.0171%" height="15" fill="rgb(233,99,24)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="99.9657%" y="181" width="0.0171%" height="15" fill="rgb(234,209,42)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.02%)</title><rect x="99.9657%" y="165" width="0.0171%" height="15" fill="rgb(227,7,12)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.02%)</title><rect x="99.9657%" y="149" width="0.0171%" height="15" fill="rgb(245,203,43)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.02%)</title><rect x="99.9657%" y="133" width="0.0171%" height="15" fill="rgb(238,205,33)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="143.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.02%)</title><rect x="99.9657%" y="117" width="0.0171%" height="15" fill="rgb(231,56,7)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="99.9657%" y="101" width="0.0171%" height="15" fill="rgb(244,186,29)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.9657%" y="85" width="0.0171%" height="15" fill="rgb(234,111,31)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="95.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.02%)</title><rect x="99.9657%" y="69" width="0.0171%" height="15" fill="rgb(241,149,10)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="79.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.02%)</title><rect x="99.9657%" y="53" width="0.0171%" height="15" fill="rgb(249,206,44)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="63.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="99.9657%" y="37" width="0.0171%" height="15" fill="rgb(251,153,30)" fg:x="5831" fg:w="1"/><text x="100.2157%" y="47.50"></text></g><g><title>all (5,833 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="5833"/><text x="0.2500%" y="575.50"></text></g><g><title>8707296384 (3,779 samples, 64.79%)</title><rect x="35.2134%" y="549" width="64.7866%" height="15" fill="rgb(249,139,47)" fg:x="2054" fg:w="3779"/><text x="35.4634%" y="559.50">8707296384</text></g><g><title>_main (3,744 samples, 64.19%)</title><rect x="35.8135%" y="533" width="64.1865%" height="15" fill="rgb(244,64,35)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="543.50">_main</text></g><g><title>std::rt::lang_start_internal (3,744 samples, 64.19%)</title><rect x="35.8135%" y="517" width="64.1865%" height="15" fill="rgb(216,46,15)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,744 samples, 64.19%)</title><rect x="35.8135%" y="501" width="64.1865%" height="15" fill="rgb(250,74,19)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,744 samples, 64.19%)</title><rect x="35.8135%" y="485" width="64.1865%" height="15" fill="rgb(249,42,33)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,744 samples, 64.19%)</title><rect x="35.8135%" y="469" width="64.1865%" height="15" fill="rgb(242,149,17)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,744 samples, 64.19%)</title><rect x="35.8135%" y="453" width="64.1865%" height="15" fill="rgb(244,29,21)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,744 samples, 64.19%)</title><rect x="35.8135%" y="437" width="64.1865%" height="15" fill="rgb(220,130,37)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,744 samples, 64.19%)</title><rect x="35.8135%" y="421" width="64.1865%" height="15" fill="rgb(211,67,2)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,744 samples, 64.19%)</title><rect x="35.8135%" y="405" width="64.1865%" height="15" fill="rgb(235,68,52)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,744 samples, 64.19%)</title><rect x="35.8135%" y="389" width="64.1865%" height="15" fill="rgb(246,142,3)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,744 samples, 64.19%)</title><rect x="35.8135%" y="373" width="64.1865%" height="15" fill="rgb(241,25,7)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,744 samples, 64.19%)</title><rect x="35.8135%" y="357" width="64.1865%" height="15" fill="rgb(242,119,39)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,744 samples, 64.19%)</title><rect x="35.8135%" y="341" width="64.1865%" height="15" fill="rgb(241,98,45)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (3,744 samples, 64.19%)</title><rect x="35.8135%" y="325" width="64.1865%" height="15" fill="rgb(254,28,30)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="335.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (3,744 samples, 64.19%)</title><rect x="35.8135%" y="309" width="64.1865%" height="15" fill="rgb(241,142,54)" fg:x="2089" fg:w="3744"/><text x="36.0635%" y="319.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (3,689 samples, 63.24%)</title><rect x="36.7564%" y="293" width="63.2436%" height="15" fill="rgb(222,85,15)" fg:x="2144" fg:w="3689"/><text x="37.0064%" y="303.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (1,589 samples, 27.24%)</title><rect x="72.7584%" y="277" width="27.2416%" height="15" fill="rgb(210,85,47)" fg:x="4244" fg:w="1589"/><text x="73.0084%" y="287.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (50 samples, 0.86%)</title><rect x="99.1428%" y="261" width="0.8572%" height="15" fill="rgb(224,206,25)" fg:x="5783" fg:w="50"/><text x="99.3928%" y="271.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.02%)</title><rect x="99.9829%" y="245" width="0.0171%" height="15" fill="rgb(243,201,19)" fg:x="5832" fg:w="1"/><text x="100.2329%" y="255.50"></text></g></svg></svg>