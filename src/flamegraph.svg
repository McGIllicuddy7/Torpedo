<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1477"><g><title>6089125888 (5 samples, 0.34%)</title><rect x="0.0000%" y="517" width="0.3385%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (3 samples, 0.20%)</title><rect x="0.1354%" y="501" width="0.2031%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.3854%" y="511.50"></text></g><g><title>_mach_continuous_time (3 samples, 0.20%)</title><rect x="0.1354%" y="485" width="0.2031%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="3"/><text x="0.3854%" y="495.50"></text></g><g><title>__kernelrpc_vm_read (3 samples, 0.20%)</title><rect x="0.1354%" y="469" width="0.2031%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="3"/><text x="0.3854%" y="479.50"></text></g><g><title>_proc_clear_dirty (3 samples, 0.20%)</title><rect x="0.1354%" y="453" width="0.2031%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="3"/><text x="0.3854%" y="463.50"></text></g><g><title>6089699328 (2 samples, 0.14%)</title><rect x="0.3385%" y="517" width="0.1354%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="0.5885%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.14%)</title><rect x="0.3385%" y="501" width="0.1354%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.5885%" y="511.50"></text></g><g><title>___workq_open (17 samples, 1.15%)</title><rect x="0.6093%" y="485" width="1.1510%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="17"/><text x="0.8593%" y="495.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.07%)</title><rect x="1.7603%" y="485" width="0.0677%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="1"/><text x="2.0103%" y="495.50"></text></g><g><title>__kernelrpc_thread_policy (9 samples, 0.61%)</title><rect x="1.8280%" y="485" width="0.6093%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="9"/><text x="2.0780%" y="495.50"></text></g><g><title>_proc_clear_dirty (9 samples, 0.61%)</title><rect x="1.8280%" y="469" width="0.6093%" height="15" fill="rgb(250,228,42)" fg:x="27" fg:w="9"/><text x="2.0780%" y="479.50"></text></g><g><title>__pthread_mutex_droplock (3 samples, 0.20%)</title><rect x="2.4374%" y="485" width="0.2031%" height="15" fill="rgb(240,193,28)" fg:x="36" fg:w="3"/><text x="2.6874%" y="495.50"></text></g><g><title>_proc_clear_dirty (24 samples, 1.62%)</title><rect x="2.6405%" y="453" width="1.6249%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="24"/><text x="2.8905%" y="463.50"></text></g><g><title>6090272768 (58 samples, 3.93%)</title><rect x="0.4739%" y="517" width="3.9269%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="58"/><text x="0.7239%" y="527.50">6090..</text></g><g><title>__pthread_cond_wait (58 samples, 3.93%)</title><rect x="0.4739%" y="501" width="3.9269%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="58"/><text x="0.7239%" y="511.50">__pt..</text></g><g><title>_mach_continuous_time (26 samples, 1.76%)</title><rect x="2.6405%" y="485" width="1.7603%" height="15" fill="rgb(231,73,38)" fg:x="39" fg:w="26"/><text x="2.8905%" y="495.50"></text></g><g><title>__kernelrpc_vm_read (26 samples, 1.76%)</title><rect x="2.6405%" y="469" width="1.7603%" height="15" fill="rgb(225,20,46)" fg:x="39" fg:w="26"/><text x="2.8905%" y="479.50"></text></g><g><title>_proc_signal_delegate (2 samples, 0.14%)</title><rect x="4.2654%" y="453" width="0.1354%" height="15" fill="rgb(210,31,41)" fg:x="63" fg:w="2"/><text x="4.5154%" y="463.50"></text></g><g><title>6090846208 (2 samples, 0.14%)</title><rect x="4.4008%" y="517" width="0.1354%" height="15" fill="rgb(221,200,47)" fg:x="65" fg:w="2"/><text x="4.6508%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.14%)</title><rect x="4.4008%" y="501" width="0.1354%" height="15" fill="rgb(226,26,5)" fg:x="65" fg:w="2"/><text x="4.6508%" y="511.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.07%)</title><rect x="4.4685%" y="485" width="0.0677%" height="15" fill="rgb(249,33,26)" fg:x="66" fg:w="1"/><text x="4.7185%" y="495.50"></text></g><g><title>6091419648 (8 samples, 0.54%)</title><rect x="4.5362%" y="517" width="0.5416%" height="15" fill="rgb(235,183,28)" fg:x="67" fg:w="8"/><text x="4.7862%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (8 samples, 0.54%)</title><rect x="4.5362%" y="501" width="0.5416%" height="15" fill="rgb(221,5,38)" fg:x="67" fg:w="8"/><text x="4.7862%" y="511.50"></text></g><g><title>_mach_continuous_time (8 samples, 0.54%)</title><rect x="4.5362%" y="485" width="0.5416%" height="15" fill="rgb(247,18,42)" fg:x="67" fg:w="8"/><text x="4.7862%" y="495.50"></text></g><g><title>__kernelrpc_vm_read (8 samples, 0.54%)</title><rect x="4.5362%" y="469" width="0.5416%" height="15" fill="rgb(241,131,45)" fg:x="67" fg:w="8"/><text x="4.7862%" y="479.50"></text></g><g><title>_proc_clear_dirty (8 samples, 0.54%)</title><rect x="4.5362%" y="453" width="0.5416%" height="15" fill="rgb(249,31,29)" fg:x="67" fg:w="8"/><text x="4.7862%" y="463.50"></text></g><g><title>6091993088 (3 samples, 0.20%)</title><rect x="5.0779%" y="517" width="0.2031%" height="15" fill="rgb(225,111,53)" fg:x="75" fg:w="3"/><text x="5.3279%" y="527.50"></text></g><g><title>__pthread_wqthread_setup (3 samples, 0.20%)</title><rect x="5.0779%" y="501" width="0.2031%" height="15" fill="rgb(238,160,17)" fg:x="75" fg:w="3"/><text x="5.3279%" y="511.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.07%)</title><rect x="5.2133%" y="485" width="0.0677%" height="15" fill="rgb(214,148,48)" fg:x="77" fg:w="1"/><text x="5.4633%" y="495.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.07%)</title><rect x="5.2133%" y="469" width="0.0677%" height="15" fill="rgb(232,36,49)" fg:x="77" fg:w="1"/><text x="5.4633%" y="479.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="5.2133%" y="453" width="0.0677%" height="15" fill="rgb(209,103,24)" fg:x="77" fg:w="1"/><text x="5.4633%" y="463.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="5.3487%" y="277" width="0.3385%" height="15" fill="rgb(229,88,8)" fg:x="79" fg:w="5"/><text x="5.5987%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="5.3487%" y="261" width="0.3385%" height="15" fill="rgb(213,181,19)" fg:x="79" fg:w="5"/><text x="5.5987%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.34%)</title><rect x="5.3487%" y="245" width="0.3385%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="5"/><text x="5.5987%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.34%)</title><rect x="5.3487%" y="229" width="0.3385%" height="15" fill="rgb(241,83,37)" fg:x="79" fg:w="5"/><text x="5.5987%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.34%)</title><rect x="5.3487%" y="213" width="0.3385%" height="15" fill="rgb(233,36,39)" fg:x="79" fg:w="5"/><text x="5.5987%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.34%)</title><rect x="5.3487%" y="197" width="0.3385%" height="15" fill="rgb(226,3,54)" fg:x="79" fg:w="5"/><text x="5.5987%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.34%)</title><rect x="5.3487%" y="181" width="0.3385%" height="15" fill="rgb(245,192,40)" fg:x="79" fg:w="5"/><text x="5.5987%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.14%)</title><rect x="5.7549%" y="213" width="0.1354%" height="15" fill="rgb(238,167,29)" fg:x="85" fg:w="2"/><text x="6.0049%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.14%)</title><rect x="5.7549%" y="197" width="0.1354%" height="15" fill="rgb(232,182,51)" fg:x="85" fg:w="2"/><text x="6.0049%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="181" width="0.1354%" height="15" fill="rgb(231,60,39)" fg:x="85" fg:w="2"/><text x="6.0049%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;,core::slice::iter::Iter&lt;usize&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="165" width="0.1354%" height="15" fill="rgb(208,69,12)" fg:x="85" fg:w="2"/><text x="6.0049%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="149" width="0.1354%" height="15" fill="rgb(235,93,37)" fg:x="85" fg:w="2"/><text x="6.0049%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="133" width="0.1354%" height="15" fill="rgb(213,116,39)" fg:x="85" fg:w="2"/><text x="6.0049%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="117" width="0.1354%" height="15" fill="rgb(222,207,29)" fg:x="85" fg:w="2"/><text x="6.0049%" y="127.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="5.7549%" y="101" width="0.1354%" height="15" fill="rgb(206,96,30)" fg:x="85" fg:w="2"/><text x="6.0049%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="85" width="0.1354%" height="15" fill="rgb(218,138,4)" fg:x="85" fg:w="2"/><text x="6.0049%" y="95.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="5.7549%" y="69" width="0.1354%" height="15" fill="rgb(250,191,14)" fg:x="85" fg:w="2"/><text x="6.0049%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (2 samples, 0.14%)</title><rect x="5.7549%" y="53" width="0.1354%" height="15" fill="rgb(239,60,40)" fg:x="85" fg:w="2"/><text x="6.0049%" y="63.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="5.7549%" y="37" width="0.1354%" height="15" fill="rgb(206,27,48)" fg:x="85" fg:w="2"/><text x="6.0049%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.27%)</title><rect x="5.6872%" y="277" width="0.2708%" height="15" fill="rgb(225,35,8)" fg:x="84" fg:w="4"/><text x="5.9372%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.27%)</title><rect x="5.6872%" y="261" width="0.2708%" height="15" fill="rgb(250,213,24)" fg:x="84" fg:w="4"/><text x="5.9372%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.20%)</title><rect x="5.7549%" y="245" width="0.2031%" height="15" fill="rgb(247,123,22)" fg:x="85" fg:w="3"/><text x="6.0049%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.20%)</title><rect x="5.7549%" y="229" width="0.2031%" height="15" fill="rgb(231,138,38)" fg:x="85" fg:w="3"/><text x="6.0049%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.07%)</title><rect x="5.8903%" y="213" width="0.0677%" height="15" fill="rgb(231,145,46)" fg:x="87" fg:w="1"/><text x="6.1403%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="5.8903%" y="197" width="0.0677%" height="15" fill="rgb(251,118,11)" fg:x="87" fg:w="1"/><text x="6.1403%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="5.8903%" y="181" width="0.0677%" height="15" fill="rgb(217,147,25)" fg:x="87" fg:w="1"/><text x="6.1403%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="5.8903%" y="165" width="0.0677%" height="15" fill="rgb(247,81,37)" fg:x="87" fg:w="1"/><text x="6.1403%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.07%)</title><rect x="5.8903%" y="149" width="0.0677%" height="15" fill="rgb(209,12,38)" fg:x="87" fg:w="1"/><text x="6.1403%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.07%)</title><rect x="5.8903%" y="133" width="0.0677%" height="15" fill="rgb(227,1,9)" fg:x="87" fg:w="1"/><text x="6.1403%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.07%)</title><rect x="5.8903%" y="117" width="0.0677%" height="15" fill="rgb(248,47,43)" fg:x="87" fg:w="1"/><text x="6.1403%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.07%)</title><rect x="5.8903%" y="101" width="0.0677%" height="15" fill="rgb(221,10,30)" fg:x="87" fg:w="1"/><text x="6.1403%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (25 samples, 1.69%)</title><rect x="5.9580%" y="277" width="1.6926%" height="15" fill="rgb(210,229,1)" fg:x="88" fg:w="25"/><text x="6.2080%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (25 samples, 1.69%)</title><rect x="5.9580%" y="261" width="1.6926%" height="15" fill="rgb(222,148,37)" fg:x="88" fg:w="25"/><text x="6.2080%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (25 samples, 1.69%)</title><rect x="5.9580%" y="245" width="1.6926%" height="15" fill="rgb(234,67,33)" fg:x="88" fg:w="25"/><text x="6.2080%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.69%)</title><rect x="5.9580%" y="229" width="1.6926%" height="15" fill="rgb(247,98,35)" fg:x="88" fg:w="25"/><text x="6.2080%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 1.69%)</title><rect x="5.9580%" y="213" width="1.6926%" height="15" fill="rgb(247,138,52)" fg:x="88" fg:w="25"/><text x="6.2080%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 1.69%)</title><rect x="5.9580%" y="197" width="1.6926%" height="15" fill="rgb(213,79,30)" fg:x="88" fg:w="25"/><text x="6.2080%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (30 samples, 2.03%)</title><rect x="7.6506%" y="277" width="2.0311%" height="15" fill="rgb(246,177,23)" fg:x="113" fg:w="30"/><text x="7.9006%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (30 samples, 2.03%)</title><rect x="7.6506%" y="261" width="2.0311%" height="15" fill="rgb(230,62,27)" fg:x="113" fg:w="30"/><text x="7.9006%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (30 samples, 2.03%)</title><rect x="7.6506%" y="245" width="2.0311%" height="15" fill="rgb(216,154,8)" fg:x="113" fg:w="30"/><text x="7.9006%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (30 samples, 2.03%)</title><rect x="7.6506%" y="229" width="2.0311%" height="15" fill="rgb(244,35,45)" fg:x="113" fg:w="30"/><text x="7.9006%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (30 samples, 2.03%)</title><rect x="7.6506%" y="213" width="2.0311%" height="15" fill="rgb(251,115,12)" fg:x="113" fg:w="30"/><text x="7.9006%" y="223.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 2.03%)</title><rect x="7.6506%" y="197" width="2.0311%" height="15" fill="rgb(240,54,50)" fg:x="113" fg:w="30"/><text x="7.9006%" y="207.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (4 samples, 0.27%)</title><rect x="9.6818%" y="277" width="0.2708%" height="15" fill="rgb(233,84,52)" fg:x="143" fg:w="4"/><text x="9.9318%" y="287.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.27%)</title><rect x="9.6818%" y="261" width="0.2708%" height="15" fill="rgb(207,117,47)" fg:x="143" fg:w="4"/><text x="9.9318%" y="271.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (4 samples, 0.27%)</title><rect x="9.6818%" y="245" width="0.2708%" height="15" fill="rgb(249,43,39)" fg:x="143" fg:w="4"/><text x="9.9318%" y="255.50"></text></g><g><title>_pthread_cond_broadcast (4 samples, 0.27%)</title><rect x="9.6818%" y="229" width="0.2708%" height="15" fill="rgb(209,38,44)" fg:x="143" fg:w="4"/><text x="9.9318%" y="239.50"></text></g><g><title>_pthread_rwlock_init (4 samples, 0.27%)</title><rect x="9.6818%" y="213" width="0.2708%" height="15" fill="rgb(236,212,23)" fg:x="143" fg:w="4"/><text x="9.9318%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (18 samples, 1.22%)</title><rect x="9.9526%" y="277" width="1.2187%" height="15" fill="rgb(242,79,21)" fg:x="147" fg:w="18"/><text x="10.2026%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (18 samples, 1.22%)</title><rect x="9.9526%" y="261" width="1.2187%" height="15" fill="rgb(211,96,35)" fg:x="147" fg:w="18"/><text x="10.2026%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 1.22%)</title><rect x="9.9526%" y="245" width="1.2187%" height="15" fill="rgb(253,215,40)" fg:x="147" fg:w="18"/><text x="10.2026%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 1.22%)</title><rect x="9.9526%" y="229" width="1.2187%" height="15" fill="rgb(211,81,21)" fg:x="147" fg:w="18"/><text x="10.2026%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 1.22%)</title><rect x="9.9526%" y="213" width="1.2187%" height="15" fill="rgb(208,190,38)" fg:x="147" fg:w="18"/><text x="10.2026%" y="223.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (24 samples, 1.62%)</title><rect x="11.1713%" y="277" width="1.6249%" height="15" fill="rgb(235,213,38)" fg:x="165" fg:w="24"/><text x="11.4213%" y="287.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (24 samples, 1.62%)</title><rect x="11.1713%" y="261" width="1.6249%" height="15" fill="rgb(237,122,38)" fg:x="165" fg:w="24"/><text x="11.4213%" y="271.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (24 samples, 1.62%)</title><rect x="11.1713%" y="245" width="1.6249%" height="15" fill="rgb(244,218,35)" fg:x="165" fg:w="24"/><text x="11.4213%" y="255.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (24 samples, 1.62%)</title><rect x="11.1713%" y="229" width="1.6249%" height="15" fill="rgb(240,68,47)" fg:x="165" fg:w="24"/><text x="11.4213%" y="239.50"></text></g><g><title>_pthread_rwlock_init (24 samples, 1.62%)</title><rect x="11.1713%" y="213" width="1.6249%" height="15" fill="rgb(210,16,53)" fg:x="165" fg:w="24"/><text x="11.4213%" y="223.50"></text></g><g><title>_mach_continuous_time (83 samples, 5.62%)</title><rect x="12.7962%" y="149" width="5.6195%" height="15" fill="rgb(235,124,12)" fg:x="189" fg:w="83"/><text x="13.0462%" y="159.50">_mach_c..</text></g><g><title>_geteuid (83 samples, 5.62%)</title><rect x="12.7962%" y="133" width="5.6195%" height="15" fill="rgb(224,169,11)" fg:x="189" fg:w="83"/><text x="13.0462%" y="143.50">_geteuid</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (85 samples, 5.75%)</title><rect x="12.7962%" y="277" width="5.7549%" height="15" fill="rgb(250,166,2)" fg:x="189" fg:w="85"/><text x="13.0462%" y="287.50">std::sy..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (85 samples, 5.75%)</title><rect x="12.7962%" y="261" width="5.7549%" height="15" fill="rgb(242,216,29)" fg:x="189" fg:w="85"/><text x="13.0462%" y="271.50">std::sy..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (85 samples, 5.75%)</title><rect x="12.7962%" y="245" width="5.7549%" height="15" fill="rgb(230,116,27)" fg:x="189" fg:w="85"/><text x="13.0462%" y="255.50">std::sy..</text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (85 samples, 5.75%)</title><rect x="12.7962%" y="229" width="5.7549%" height="15" fill="rgb(228,99,48)" fg:x="189" fg:w="85"/><text x="13.0462%" y="239.50">std::sy..</text></g><g><title>std::thread::Thread::park (85 samples, 5.75%)</title><rect x="12.7962%" y="213" width="5.7549%" height="15" fill="rgb(253,11,6)" fg:x="189" fg:w="85"/><text x="13.0462%" y="223.50">std::th..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (85 samples, 5.75%)</title><rect x="12.7962%" y="197" width="5.7549%" height="15" fill="rgb(247,143,39)" fg:x="189" fg:w="85"/><text x="13.0462%" y="207.50">std::sy..</text></g><g><title>___platform_sigaction (85 samples, 5.75%)</title><rect x="12.7962%" y="181" width="5.7549%" height="15" fill="rgb(236,97,10)" fg:x="189" fg:w="85"/><text x="13.0462%" y="191.50">___plat..</text></g><g><title>_semaphore_destroy (85 samples, 5.75%)</title><rect x="12.7962%" y="165" width="5.7549%" height="15" fill="rgb(233,208,19)" fg:x="189" fg:w="85"/><text x="13.0462%" y="175.50">_semaph..</text></g><g><title>_proc_clear_dirty (2 samples, 0.14%)</title><rect x="18.4157%" y="149" width="0.1354%" height="15" fill="rgb(216,164,2)" fg:x="272" fg:w="2"/><text x="18.6657%" y="159.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 1.29%)</title><rect x="18.6865%" y="245" width="1.2864%" height="15" fill="rgb(220,129,5)" fg:x="276" fg:w="19"/><text x="18.9365%" y="255.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (19 samples, 1.29%)</title><rect x="18.6865%" y="229" width="1.2864%" height="15" fill="rgb(242,17,10)" fg:x="276" fg:w="19"/><text x="18.9365%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="19.9052%" y="213" width="0.0677%" height="15" fill="rgb(242,107,0)" fg:x="294" fg:w="1"/><text x="20.1552%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.07%)</title><rect x="19.9052%" y="197" width="0.0677%" height="15" fill="rgb(251,28,31)" fg:x="294" fg:w="1"/><text x="20.1552%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.07%)</title><rect x="19.9052%" y="181" width="0.0677%" height="15" fill="rgb(233,223,10)" fg:x="294" fg:w="1"/><text x="20.1552%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.07%)</title><rect x="19.9052%" y="165" width="0.0677%" height="15" fill="rgb(215,21,27)" fg:x="294" fg:w="1"/><text x="20.1552%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.07%)</title><rect x="19.9052%" y="149" width="0.0677%" height="15" fill="rgb(232,23,21)" fg:x="294" fg:w="1"/><text x="20.1552%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="19.9052%" y="133" width="0.0677%" height="15" fill="rgb(244,5,23)" fg:x="294" fg:w="1"/><text x="20.1552%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (16 samples, 1.08%)</title><rect x="19.9729%" y="213" width="1.0833%" height="15" fill="rgb(226,81,46)" fg:x="295" fg:w="16"/><text x="20.2229%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (16 samples, 1.08%)</title><rect x="19.9729%" y="197" width="1.0833%" height="15" fill="rgb(247,70,30)" fg:x="295" fg:w="16"/><text x="20.2229%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.08%)</title><rect x="19.9729%" y="181" width="1.0833%" height="15" fill="rgb(212,68,19)" fg:x="295" fg:w="16"/><text x="20.2229%" y="191.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (10 samples, 0.68%)</title><rect x="20.3791%" y="165" width="0.6770%" height="15" fill="rgb(240,187,13)" fg:x="301" fg:w="10"/><text x="20.6291%" y="175.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (10 samples, 0.68%)</title><rect x="20.3791%" y="149" width="0.6770%" height="15" fill="rgb(223,113,26)" fg:x="301" fg:w="10"/><text x="20.6291%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (10 samples, 0.68%)</title><rect x="20.3791%" y="133" width="0.6770%" height="15" fill="rgb(206,192,2)" fg:x="301" fg:w="10"/><text x="20.6291%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (10 samples, 0.68%)</title><rect x="20.3791%" y="117" width="0.6770%" height="15" fill="rgb(241,108,4)" fg:x="301" fg:w="10"/><text x="20.6291%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (10 samples, 0.68%)</title><rect x="20.3791%" y="101" width="0.6770%" height="15" fill="rgb(247,173,49)" fg:x="301" fg:w="10"/><text x="20.6291%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (10 samples, 0.68%)</title><rect x="20.3791%" y="85" width="0.6770%" height="15" fill="rgb(224,114,35)" fg:x="301" fg:w="10"/><text x="20.6291%" y="95.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.68%)</title><rect x="20.3791%" y="69" width="0.6770%" height="15" fill="rgb(245,159,27)" fg:x="301" fg:w="10"/><text x="20.6291%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (75 samples, 5.08%)</title><rect x="19.9729%" y="245" width="5.0779%" height="15" fill="rgb(245,172,44)" fg:x="295" fg:w="75"/><text x="20.2229%" y="255.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (75 samples, 5.08%)</title><rect x="19.9729%" y="229" width="5.0779%" height="15" fill="rgb(236,23,11)" fg:x="295" fg:w="75"/><text x="20.2229%" y="239.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (59 samples, 3.99%)</title><rect x="21.0562%" y="213" width="3.9946%" height="15" fill="rgb(205,117,38)" fg:x="311" fg:w="59"/><text x="21.3062%" y="223.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (59 samples, 3.99%)</title><rect x="21.0562%" y="197" width="3.9946%" height="15" fill="rgb(237,72,25)" fg:x="311" fg:w="59"/><text x="21.3062%" y="207.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (59 samples, 3.99%)</title><rect x="21.0562%" y="181" width="3.9946%" height="15" fill="rgb(244,70,9)" fg:x="311" fg:w="59"/><text x="21.3062%" y="191.50">core..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 3.99%)</title><rect x="21.0562%" y="165" width="3.9946%" height="15" fill="rgb(217,125,39)" fg:x="311" fg:w="59"/><text x="21.3062%" y="175.50">&lt;has..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (4 samples, 0.27%)</title><rect x="24.7800%" y="149" width="0.2708%" height="15" fill="rgb(235,36,10)" fg:x="366" fg:w="4"/><text x="25.0300%" y="159.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (4 samples, 0.27%)</title><rect x="24.7800%" y="133" width="0.2708%" height="15" fill="rgb(251,123,47)" fg:x="366" fg:w="4"/><text x="25.0300%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (4 samples, 0.27%)</title><rect x="24.7800%" y="117" width="0.2708%" height="15" fill="rgb(221,13,13)" fg:x="366" fg:w="4"/><text x="25.0300%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (4 samples, 0.27%)</title><rect x="24.7800%" y="101" width="0.2708%" height="15" fill="rgb(238,131,9)" fg:x="366" fg:w="4"/><text x="25.0300%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (4 samples, 0.27%)</title><rect x="24.7800%" y="85" width="0.2708%" height="15" fill="rgb(211,50,8)" fg:x="366" fg:w="4"/><text x="25.0300%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (4 samples, 0.27%)</title><rect x="24.7800%" y="69" width="0.2708%" height="15" fill="rgb(245,182,24)" fg:x="366" fg:w="4"/><text x="25.0300%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (4 samples, 0.27%)</title><rect x="24.7800%" y="53" width="0.2708%" height="15" fill="rgb(242,14,37)" fg:x="366" fg:w="4"/><text x="25.0300%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.27%)</title><rect x="24.7800%" y="37" width="0.2708%" height="15" fill="rgb(246,228,12)" fg:x="366" fg:w="4"/><text x="25.0300%" y="47.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (102 samples, 6.91%)</title><rect x="18.5511%" y="277" width="6.9059%" height="15" fill="rgb(213,55,15)" fg:x="274" fg:w="102"/><text x="18.8011%" y="287.50">torpedo::..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (102 samples, 6.91%)</title><rect x="18.5511%" y="261" width="6.9059%" height="15" fill="rgb(209,9,3)" fg:x="274" fg:w="102"/><text x="18.8011%" y="271.50">torpedo::..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (6 samples, 0.41%)</title><rect x="25.0508%" y="245" width="0.4062%" height="15" fill="rgb(230,59,30)" fg:x="370" fg:w="6"/><text x="25.3008%" y="255.50"></text></g><g><title>torpedo::level::TransformComp::update (1 samples, 0.07%)</title><rect x="25.4570%" y="277" width="0.0677%" height="15" fill="rgb(209,121,21)" fg:x="376" fg:w="1"/><text x="25.7070%" y="287.50"></text></g><g><title>torpedo::physics::PhysicsComp::gamma (1 samples, 0.07%)</title><rect x="25.5247%" y="277" width="0.0677%" height="15" fill="rgb(220,109,13)" fg:x="377" fg:w="1"/><text x="25.7747%" y="287.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (7 samples, 0.47%)</title><rect x="25.6601%" y="261" width="0.4739%" height="15" fill="rgb(232,18,1)" fg:x="379" fg:w="7"/><text x="25.9101%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.47%)</title><rect x="25.6601%" y="245" width="0.4739%" height="15" fill="rgb(215,41,42)" fg:x="379" fg:w="7"/><text x="25.9101%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.47%)</title><rect x="25.6601%" y="229" width="0.4739%" height="15" fill="rgb(224,123,36)" fg:x="379" fg:w="7"/><text x="25.9101%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.47%)</title><rect x="25.6601%" y="213" width="0.4739%" height="15" fill="rgb(240,125,3)" fg:x="379" fg:w="7"/><text x="25.9101%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.47%)</title><rect x="25.6601%" y="197" width="0.4739%" height="15" fill="rgb(205,98,50)" fg:x="379" fg:w="7"/><text x="25.9101%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.47%)</title><rect x="25.6601%" y="181" width="0.4739%" height="15" fill="rgb(205,185,37)" fg:x="379" fg:w="7"/><text x="25.9101%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.47%)</title><rect x="25.6601%" y="165" width="0.4739%" height="15" fill="rgb(238,207,15)" fg:x="379" fg:w="7"/><text x="25.9101%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.07%)</title><rect x="26.1341%" y="245" width="0.0677%" height="15" fill="rgb(213,199,42)" fg:x="386" fg:w="1"/><text x="26.3841%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.07%)</title><rect x="26.1341%" y="229" width="0.0677%" height="15" fill="rgb(235,201,11)" fg:x="386" fg:w="1"/><text x="26.3841%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="26.1341%" y="213" width="0.0677%" height="15" fill="rgb(207,46,11)" fg:x="386" fg:w="1"/><text x="26.3841%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.07%)</title><rect x="26.1341%" y="197" width="0.0677%" height="15" fill="rgb(241,35,35)" fg:x="386" fg:w="1"/><text x="26.3841%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.07%)</title><rect x="26.1341%" y="181" width="0.0677%" height="15" fill="rgb(243,32,47)" fg:x="386" fg:w="1"/><text x="26.3841%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (312 samples, 21.12%)</title><rect x="5.3487%" y="469" width="21.1239%" height="15" fill="rgb(247,202,23)" fg:x="79" fg:w="312"/><text x="5.5987%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (312 samples, 21.12%)</title><rect x="5.3487%" y="453" width="21.1239%" height="15" fill="rgb(219,102,11)" fg:x="79" fg:w="312"/><text x="5.5987%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (312 samples, 21.12%)</title><rect x="5.3487%" y="437" width="21.1239%" height="15" fill="rgb(243,110,44)" fg:x="79" fg:w="312"/><text x="5.5987%" y="447.50">core::ops::function::FnOnce::call..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (312 samples, 21.12%)</title><rect x="5.3487%" y="421" width="21.1239%" height="15" fill="rgb(222,74,54)" fg:x="79" fg:w="312"/><text x="5.5987%" y="431.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::panic::catch_unwind (312 samples, 21.12%)</title><rect x="5.3487%" y="405" width="21.1239%" height="15" fill="rgb(216,99,12)" fg:x="79" fg:w="312"/><text x="5.5987%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (312 samples, 21.12%)</title><rect x="5.3487%" y="389" width="21.1239%" height="15" fill="rgb(226,22,26)" fg:x="79" fg:w="312"/><text x="5.5987%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (312 samples, 21.12%)</title><rect x="5.3487%" y="373" width="21.1239%" height="15" fill="rgb(217,163,10)" fg:x="79" fg:w="312"/><text x="5.5987%" y="383.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (312 samples, 21.12%)</title><rect x="5.3487%" y="357" width="21.1239%" height="15" fill="rgb(213,25,53)" fg:x="79" fg:w="312"/><text x="5.5987%" y="367.50">&lt;core::panic::unwind_safe::Assert..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (312 samples, 21.12%)</title><rect x="5.3487%" y="341" width="21.1239%" height="15" fill="rgb(252,105,26)" fg:x="79" fg:w="312"/><text x="5.5987%" y="351.50">std::thread::Builder::spawn_unche..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (312 samples, 21.12%)</title><rect x="5.3487%" y="325" width="21.1239%" height="15" fill="rgb(220,39,43)" fg:x="79" fg:w="312"/><text x="5.5987%" y="335.50">std::sys::backtrace::__rust_begin..</text></g><g><title>torpedo::level::level_loop::{{closure}} (312 samples, 21.12%)</title><rect x="5.3487%" y="309" width="21.1239%" height="15" fill="rgb(229,68,48)" fg:x="79" fg:w="312"/><text x="5.5987%" y="319.50">torpedo::level::level_loop::{{clo..</text></g><g><title>torpedo::physics::update (312 samples, 21.12%)</title><rect x="5.3487%" y="293" width="21.1239%" height="15" fill="rgb(252,8,32)" fg:x="79" fg:w="312"/><text x="5.5987%" y="303.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (13 samples, 0.88%)</title><rect x="25.5924%" y="277" width="0.8802%" height="15" fill="rgb(223,20,43)" fg:x="378" fg:w="13"/><text x="25.8424%" y="287.50"></text></g><g><title>torpedo::physics::col::check_collision (5 samples, 0.34%)</title><rect x="26.1341%" y="261" width="0.3385%" height="15" fill="rgb(229,81,49)" fg:x="386" fg:w="5"/><text x="26.3841%" y="271.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (4 samples, 0.27%)</title><rect x="26.2018%" y="245" width="0.2708%" height="15" fill="rgb(236,28,36)" fg:x="387" fg:w="4"/><text x="26.4518%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (184 samples, 12.46%)</title><rect x="26.4726%" y="469" width="12.4577%" height="15" fill="rgb(249,185,26)" fg:x="391" fg:w="184"/><text x="26.7226%" y="479.50">core::ptr::drop_in_..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (184 samples, 12.46%)</title><rect x="26.4726%" y="453" width="12.4577%" height="15" fill="rgb(249,174,33)" fg:x="391" fg:w="184"/><text x="26.7226%" y="463.50">&lt;std::sys::pal::uni..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (184 samples, 12.46%)</title><rect x="26.4726%" y="437" width="12.4577%" height="15" fill="rgb(233,201,37)" fg:x="391" fg:w="184"/><text x="26.7226%" y="447.50">std::sys::pal::unix..</text></g><g><title>6094712832 (503 samples, 34.06%)</title><rect x="5.2810%" y="517" width="34.0555%" height="15" fill="rgb(221,78,26)" fg:x="78" fg:w="503"/><text x="5.5310%" y="527.50">6094712832</text></g><g><title>__pthread_cond_wait (503 samples, 34.06%)</title><rect x="5.2810%" y="501" width="34.0555%" height="15" fill="rgb(250,127,30)" fg:x="78" fg:w="503"/><text x="5.5310%" y="511.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (502 samples, 33.99%)</title><rect x="5.3487%" y="485" width="33.9878%" height="15" fill="rgb(230,49,44)" fg:x="79" fg:w="502"/><text x="5.5987%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (6 samples, 0.41%)</title><rect x="38.9303%" y="469" width="0.4062%" height="15" fill="rgb(229,67,23)" fg:x="575" fg:w="6"/><text x="39.1803%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (6 samples, 0.41%)</title><rect x="38.9303%" y="453" width="0.4062%" height="15" fill="rgb(249,83,47)" fg:x="575" fg:w="6"/><text x="39.1803%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (5 samples, 0.34%)</title><rect x="38.9980%" y="437" width="0.3385%" height="15" fill="rgb(215,43,3)" fg:x="576" fg:w="5"/><text x="39.2480%" y="447.50"></text></g><g><title>_host_get_special_port (4 samples, 0.27%)</title><rect x="39.0657%" y="421" width="0.2708%" height="15" fill="rgb(238,154,13)" fg:x="577" fg:w="4"/><text x="39.3157%" y="431.50"></text></g><g><title>__os_alloc (1 samples, 0.07%)</title><rect x="41.8416%" y="501" width="0.0677%" height="15" fill="rgb(219,56,2)" fg:x="618" fg:w="1"/><text x="42.0916%" y="511.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.07%)</title><rect x="41.9093%" y="501" width="0.0677%" height="15" fill="rgb(233,0,4)" fg:x="619" fg:w="1"/><text x="42.1593%" y="511.50"></text></g><g><title>__platform_strnlen (1 samples, 0.07%)</title><rect x="41.9093%" y="485" width="0.0677%" height="15" fill="rgb(235,30,7)" fg:x="619" fg:w="1"/><text x="42.1593%" y="495.50"></text></g><g><title>__platform_strnlen (1 samples, 0.07%)</title><rect x="41.9093%" y="469" width="0.0677%" height="15" fill="rgb(250,79,13)" fg:x="619" fg:w="1"/><text x="42.1593%" y="479.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.07%)</title><rect x="41.9093%" y="453" width="0.0677%" height="15" fill="rgb(211,146,34)" fg:x="619" fg:w="1"/><text x="42.1593%" y="463.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.07%)</title><rect x="42.3155%" y="165" width="0.0677%" height="15" fill="rgb(228,22,38)" fg:x="625" fg:w="1"/><text x="42.5655%" y="175.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.07%)</title><rect x="42.3155%" y="149" width="0.0677%" height="15" fill="rgb(235,168,5)" fg:x="625" fg:w="1"/><text x="42.5655%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="42.3155%" y="133" width="0.0677%" height="15" fill="rgb(221,155,16)" fg:x="625" fg:w="1"/><text x="42.5655%" y="143.50"></text></g><g><title>Unknown (7 samples, 0.47%)</title><rect x="42.0447%" y="181" width="0.4739%" height="15" fill="rgb(215,215,53)" fg:x="621" fg:w="7"/><text x="42.2947%" y="191.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.14%)</title><rect x="42.3832%" y="165" width="0.1354%" height="15" fill="rgb(223,4,10)" fg:x="626" fg:w="2"/><text x="42.6332%" y="175.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.07%)</title><rect x="42.5186%" y="181" width="0.0677%" height="15" fill="rgb(234,103,6)" fg:x="628" fg:w="1"/><text x="42.7686%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.07%)</title><rect x="42.5186%" y="165" width="0.0677%" height="15" fill="rgb(227,97,0)" fg:x="628" fg:w="1"/><text x="42.7686%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="42.5186%" y="149" width="0.0677%" height="15" fill="rgb(234,150,53)" fg:x="628" fg:w="1"/><text x="42.7686%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 0.68%)</title><rect x="41.9770%" y="261" width="0.6770%" height="15" fill="rgb(228,201,54)" fg:x="620" fg:w="10"/><text x="42.2270%" y="271.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="41.9770%" y="245" width="0.6770%" height="15" fill="rgb(222,22,37)" fg:x="620" fg:w="10"/><text x="42.2270%" y="255.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="41.9770%" y="229" width="0.6770%" height="15" fill="rgb(237,53,32)" fg:x="620" fg:w="10"/><text x="42.2270%" y="239.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="41.9770%" y="213" width="0.6770%" height="15" fill="rgb(233,25,53)" fg:x="620" fg:w="10"/><text x="42.2270%" y="223.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="41.9770%" y="197" width="0.6770%" height="15" fill="rgb(210,40,34)" fg:x="620" fg:w="10"/><text x="42.2270%" y="207.50"></text></g><g><title>_semaphore_create (1 samples, 0.07%)</title><rect x="42.5863%" y="181" width="0.0677%" height="15" fill="rgb(241,220,44)" fg:x="629" fg:w="1"/><text x="42.8363%" y="191.50"></text></g><g><title>_flock (1 samples, 0.07%)</title><rect x="44.6175%" y="133" width="0.0677%" height="15" fill="rgb(235,28,35)" fg:x="659" fg:w="1"/><text x="44.8675%" y="143.50"></text></g><g><title>_geteuid (1 samples, 0.07%)</title><rect x="44.6852%" y="133" width="0.0677%" height="15" fill="rgb(210,56,17)" fg:x="660" fg:w="1"/><text x="44.9352%" y="143.50"></text></g><g><title>Unknown (12 samples, 0.81%)</title><rect x="44.0081%" y="149" width="0.8125%" height="15" fill="rgb(224,130,29)" fg:x="650" fg:w="12"/><text x="44.2581%" y="159.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.07%)</title><rect x="44.7529%" y="133" width="0.0677%" height="15" fill="rgb(235,212,8)" fg:x="661" fg:w="1"/><text x="45.0029%" y="143.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.07%)</title><rect x="44.8206%" y="149" width="0.0677%" height="15" fill="rgb(223,33,50)" fg:x="662" fg:w="1"/><text x="45.0706%" y="159.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.07%)</title><rect x="44.8206%" y="133" width="0.0677%" height="15" fill="rgb(219,149,13)" fg:x="662" fg:w="1"/><text x="45.0706%" y="143.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="44.8206%" y="117" width="0.0677%" height="15" fill="rgb(250,156,29)" fg:x="662" fg:w="1"/><text x="45.0706%" y="127.50"></text></g><g><title>_proc_clear_dirty (4 samples, 0.27%)</title><rect x="44.8883%" y="149" width="0.2708%" height="15" fill="rgb(216,193,19)" fg:x="663" fg:w="4"/><text x="45.1383%" y="159.50"></text></g><g><title>Unknown (28 samples, 1.90%)</title><rect x="43.3311%" y="165" width="1.8957%" height="15" fill="rgb(216,135,14)" fg:x="640" fg:w="28"/><text x="43.5811%" y="175.50">U..</text></g><g><title>_vm_copy (1 samples, 0.07%)</title><rect x="45.1591%" y="149" width="0.0677%" height="15" fill="rgb(241,47,5)" fg:x="667" fg:w="1"/><text x="45.4091%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="45.1591%" y="133" width="0.0677%" height="15" fill="rgb(233,42,35)" fg:x="667" fg:w="1"/><text x="45.4091%" y="143.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.14%)</title><rect x="45.2268%" y="165" width="0.1354%" height="15" fill="rgb(231,13,6)" fg:x="668" fg:w="2"/><text x="45.4768%" y="175.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.14%)</title><rect x="45.2268%" y="149" width="0.1354%" height="15" fill="rgb(207,181,40)" fg:x="668" fg:w="2"/><text x="45.4768%" y="159.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.14%)</title><rect x="45.2268%" y="133" width="0.1354%" height="15" fill="rgb(254,173,49)" fg:x="668" fg:w="2"/><text x="45.4768%" y="143.50"></text></g><g><title>raylib::core::RaylibBuilder::build (42 samples, 2.84%)</title><rect x="42.6540%" y="261" width="2.8436%" height="15" fill="rgb(221,1,38)" fg:x="630" fg:w="42"/><text x="42.9040%" y="271.50">ra..</text></g><g><title>raylib::core::init_window (42 samples, 2.84%)</title><rect x="42.6540%" y="245" width="2.8436%" height="15" fill="rgb(206,124,46)" fg:x="630" fg:w="42"/><text x="42.9040%" y="255.50">ra..</text></g><g><title>Unknown (42 samples, 2.84%)</title><rect x="42.6540%" y="229" width="2.8436%" height="15" fill="rgb(249,21,11)" fg:x="630" fg:w="42"/><text x="42.9040%" y="239.50">Un..</text></g><g><title>Unknown (42 samples, 2.84%)</title><rect x="42.6540%" y="213" width="2.8436%" height="15" fill="rgb(222,201,40)" fg:x="630" fg:w="42"/><text x="42.9040%" y="223.50">Un..</text></g><g><title>Unknown (42 samples, 2.84%)</title><rect x="42.6540%" y="197" width="2.8436%" height="15" fill="rgb(235,61,29)" fg:x="630" fg:w="42"/><text x="42.9040%" y="207.50">Un..</text></g><g><title>Unknown (41 samples, 2.78%)</title><rect x="42.7217%" y="181" width="2.7759%" height="15" fill="rgb(219,207,3)" fg:x="631" fg:w="41"/><text x="42.9717%" y="191.50">Un..</text></g><g><title>_proc_clear_dirty (2 samples, 0.14%)</title><rect x="45.3622%" y="165" width="0.1354%" height="15" fill="rgb(222,56,46)" fg:x="670" fg:w="2"/><text x="45.6122%" y="175.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_sphere (1 samples, 0.07%)</title><rect x="45.4976%" y="181" width="0.0677%" height="15" fill="rgb(239,76,54)" fg:x="672" fg:w="1"/><text x="45.7476%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="45.4976%" y="165" width="0.0677%" height="15" fill="rgb(231,124,27)" fg:x="672" fg:w="1"/><text x="45.7476%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 0.14%)</title><rect x="45.4976%" y="245" width="0.1354%" height="15" fill="rgb(249,195,6)" fg:x="672" fg:w="2"/><text x="45.7476%" y="255.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.14%)</title><rect x="45.4976%" y="229" width="0.1354%" height="15" fill="rgb(237,174,47)" fg:x="672" fg:w="2"/><text x="45.7476%" y="239.50"></text></g><g><title>torpedo::game::game_create_level (2 samples, 0.14%)</title><rect x="45.4976%" y="213" width="0.1354%" height="15" fill="rgb(206,201,31)" fg:x="672" fg:w="2"/><text x="45.7476%" y="223.50"></text></g><g><title>torpedo::level::default_setup (2 samples, 0.14%)</title><rect x="45.4976%" y="197" width="0.1354%" height="15" fill="rgb(231,57,52)" fg:x="672" fg:w="2"/><text x="45.7476%" y="207.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_torus (1 samples, 0.07%)</title><rect x="45.5653%" y="181" width="0.0677%" height="15" fill="rgb(248,177,22)" fg:x="673" fg:w="1"/><text x="45.8153%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="45.5653%" y="165" width="0.0677%" height="15" fill="rgb(215,211,37)" fg:x="673" fg:w="1"/><text x="45.8153%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="45.5653%" y="149" width="0.0677%" height="15" fill="rgb(241,128,51)" fg:x="673" fg:w="1"/><text x="45.8153%" y="159.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="45.5653%" y="133" width="0.0677%" height="15" fill="rgb(227,165,31)" fg:x="673" fg:w="1"/><text x="45.8153%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="245" width="0.0677%" height="15" fill="rgb(228,167,24)" fg:x="674" fg:w="1"/><text x="45.8830%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::ComponentList&lt;torpedo::level::TagComp&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="229" width="0.0677%" height="15" fill="rgb(228,143,12)" fg:x="674" fg:w="1"/><text x="45.8830%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="213" width="0.0677%" height="15" fill="rgb(249,149,8)" fg:x="674" fg:w="1"/><text x="45.8830%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="197" width="0.0677%" height="15" fill="rgb(243,35,44)" fg:x="674" fg:w="1"/><text x="45.8830%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="181" width="0.0677%" height="15" fill="rgb(246,89,9)" fg:x="674" fg:w="1"/><text x="45.8830%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;torpedo::level::TagComp&gt;]&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="165" width="0.0677%" height="15" fill="rgb(233,213,13)" fg:x="674" fg:w="1"/><text x="45.8830%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TagComp&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="149" width="0.0677%" height="15" fill="rgb(233,141,41)" fg:x="674" fg:w="1"/><text x="45.8830%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TagComp&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="133" width="0.0677%" height="15" fill="rgb(239,167,4)" fg:x="674" fg:w="1"/><text x="45.8830%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="117" width="0.0677%" height="15" fill="rgb(209,217,16)" fg:x="674" fg:w="1"/><text x="45.8830%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (1 samples, 0.07%)</title><rect x="45.6330%" y="101" width="0.0677%" height="15" fill="rgb(219,88,35)" fg:x="674" fg:w="1"/><text x="45.8830%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="45.6330%" y="85" width="0.0677%" height="15" fill="rgb(220,193,23)" fg:x="674" fg:w="1"/><text x="45.8830%" y="95.50"></text></g><g><title>Unknown (3 samples, 0.20%)</title><rect x="61.7468%" y="165" width="0.2031%" height="15" fill="rgb(230,90,52)" fg:x="912" fg:w="3"/><text x="61.9968%" y="175.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.07%)</title><rect x="61.9499%" y="165" width="0.0677%" height="15" fill="rgb(252,106,19)" fg:x="915" fg:w="1"/><text x="62.1999%" y="175.50"></text></g><g><title>__kernelrpc_thread_policy (2 samples, 0.14%)</title><rect x="62.0176%" y="165" width="0.1354%" height="15" fill="rgb(206,74,20)" fg:x="916" fg:w="2"/><text x="62.2676%" y="175.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.14%)</title><rect x="62.0176%" y="149" width="0.1354%" height="15" fill="rgb(230,138,44)" fg:x="916" fg:w="2"/><text x="62.2676%" y="159.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.07%)</title><rect x="62.1530%" y="165" width="0.0677%" height="15" fill="rgb(235,182,43)" fg:x="918" fg:w="1"/><text x="62.4030%" y="175.50"></text></g><g><title>__pthread_mutex_droplock (2 samples, 0.14%)</title><rect x="62.2207%" y="165" width="0.1354%" height="15" fill="rgb(242,16,51)" fg:x="919" fg:w="2"/><text x="62.4707%" y="175.50"></text></g><g><title>_mach_continuous_time (56 samples, 3.79%)</title><rect x="62.3561%" y="165" width="3.7915%" height="15" fill="rgb(248,9,4)" fg:x="921" fg:w="56"/><text x="62.6061%" y="175.50">_mac..</text></g><g><title>__kernelrpc_vm_read (56 samples, 3.79%)</title><rect x="62.3561%" y="149" width="3.7915%" height="15" fill="rgb(210,31,22)" fg:x="921" fg:w="56"/><text x="62.6061%" y="159.50">__ke..</text></g><g><title>_proc_clear_dirty (56 samples, 3.79%)</title><rect x="62.3561%" y="133" width="3.7915%" height="15" fill="rgb(239,54,39)" fg:x="921" fg:w="56"/><text x="62.6061%" y="143.50">_pro..</text></g><g><title>_proc_clear_dirty (120 samples, 8.12%)</title><rect x="66.1476%" y="165" width="8.1246%" height="15" fill="rgb(230,99,41)" fg:x="977" fg:w="120"/><text x="66.3976%" y="175.50">_proc_clear..</text></g><g><title>_proc_setpcontrol (71 samples, 4.81%)</title><rect x="74.2722%" y="165" width="4.8070%" height="15" fill="rgb(253,106,12)" fg:x="1097" fg:w="71"/><text x="74.5222%" y="175.50">_proc_..</text></g><g><title>_setxattr (1 samples, 0.07%)</title><rect x="79.0792%" y="165" width="0.0677%" height="15" fill="rgb(213,46,41)" fg:x="1168" fg:w="1"/><text x="79.3292%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (497 samples, 33.65%)</title><rect x="45.7007%" y="245" width="33.6493%" height="15" fill="rgb(215,133,35)" fg:x="675" fg:w="497"/><text x="45.9507%" y="255.50">core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibD..</text></g><g><title>Unknown (497 samples, 33.65%)</title><rect x="45.7007%" y="229" width="33.6493%" height="15" fill="rgb(213,28,5)" fg:x="675" fg:w="497"/><text x="45.9507%" y="239.50">Unknown</text></g><g><title>Unknown (497 samples, 33.65%)</title><rect x="45.7007%" y="213" width="33.6493%" height="15" fill="rgb(215,77,49)" fg:x="675" fg:w="497"/><text x="45.9507%" y="223.50">Unknown</text></g><g><title>Unknown (490 samples, 33.18%)</title><rect x="46.1747%" y="197" width="33.1754%" height="15" fill="rgb(248,100,22)" fg:x="682" fg:w="490"/><text x="46.4247%" y="207.50">Unknown</text></g><g><title>Unknown (489 samples, 33.11%)</title><rect x="46.2424%" y="181" width="33.1077%" height="15" fill="rgb(208,67,9)" fg:x="683" fg:w="489"/><text x="46.4924%" y="191.50">Unknown</text></g><g><title>_vm_remap (3 samples, 0.20%)</title><rect x="79.1469%" y="165" width="0.2031%" height="15" fill="rgb(219,133,21)" fg:x="1169" fg:w="3"/><text x="79.3969%" y="175.50"></text></g><g><title>_vm_remap (3 samples, 0.20%)</title><rect x="79.1469%" y="149" width="0.2031%" height="15" fill="rgb(246,46,29)" fg:x="1169" fg:w="3"/><text x="79.3969%" y="159.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (1 samples, 0.07%)</title><rect x="79.3500%" y="245" width="0.0677%" height="15" fill="rgb(246,185,52)" fg:x="1172" fg:w="1"/><text x="79.6000%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="79.3500%" y="229" width="0.0677%" height="15" fill="rgb(252,136,11)" fg:x="1172" fg:w="1"/><text x="79.6000%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="79.3500%" y="213" width="0.0677%" height="15" fill="rgb(219,138,53)" fg:x="1172" fg:w="1"/><text x="79.6000%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="213" width="0.3385%" height="15" fill="rgb(211,51,23)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Inner&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="197" width="0.3385%" height="15" fill="rgb(247,221,28)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt;&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="181" width="0.3385%" height="15" fill="rgb(251,222,45)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="165" width="0.3385%" height="15" fill="rgb(217,162,53)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.34%)</title><rect x="79.4177%" y="149" width="0.3385%" height="15" fill="rgb(229,93,14)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.34%)</title><rect x="79.4177%" y="133" width="0.3385%" height="15" fill="rgb(209,67,49)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::OtherInner&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="117" width="0.3385%" height="15" fill="rgb(213,87,29)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::sync::thread_parking::darwin::Parker&gt; (5 samples, 0.34%)</title><rect x="79.4177%" y="101" width="0.3385%" height="15" fill="rgb(205,151,52)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="111.50"></text></g><g><title>&lt;std::sys::sync::thread_parking::darwin::Parker as core::ops::drop::Drop&gt;::drop (5 samples, 0.34%)</title><rect x="79.4177%" y="85" width="0.3385%" height="15" fill="rgb(253,215,39)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="95.50"></text></g><g><title>__os_once_gate_wait (5 samples, 0.34%)</title><rect x="79.4177%" y="69" width="0.3385%" height="15" fill="rgb(221,220,41)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="79.50"></text></g><g><title>_sigprocmask (5 samples, 0.34%)</title><rect x="79.4177%" y="53" width="0.3385%" height="15" fill="rgb(218,133,21)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="63.50"></text></g><g><title>_proc_clear_dirty (5 samples, 0.34%)</title><rect x="79.4177%" y="37" width="0.3385%" height="15" fill="rgb(221,193,43)" fg:x="1173" fg:w="5"/><text x="79.6677%" y="47.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (36 samples, 2.44%)</title><rect x="79.4177%" y="245" width="2.4374%" height="15" fill="rgb(240,128,52)" fg:x="1173" fg:w="36"/><text x="79.6677%" y="255.50">st..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (36 samples, 2.44%)</title><rect x="79.4177%" y="229" width="2.4374%" height="15" fill="rgb(253,114,12)" fg:x="1173" fg:w="36"/><text x="79.6677%" y="239.50">st..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (31 samples, 2.10%)</title><rect x="79.7563%" y="213" width="2.0988%" height="15" fill="rgb(215,223,47)" fg:x="1178" fg:w="31"/><text x="80.0063%" y="223.50">s..</text></g><g><title>_pthread_mutex_setprioceiling (31 samples, 2.10%)</title><rect x="79.7563%" y="197" width="2.0988%" height="15" fill="rgb(248,225,23)" fg:x="1178" fg:w="31"/><text x="80.0063%" y="207.50">_..</text></g><g><title>__pthread_cond_wait (9 samples, 0.61%)</title><rect x="81.2458%" y="181" width="0.6093%" height="15" fill="rgb(250,108,0)" fg:x="1200" fg:w="9"/><text x="81.4958%" y="191.50"></text></g><g><title>___workq_open (9 samples, 0.61%)</title><rect x="81.2458%" y="165" width="0.6093%" height="15" fill="rgb(228,208,7)" fg:x="1200" fg:w="9"/><text x="81.4958%" y="175.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (9 samples, 0.61%)</title><rect x="81.8551%" y="165" width="0.6093%" height="15" fill="rgb(244,45,10)" fg:x="1209" fg:w="9"/><text x="82.1051%" y="175.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (1 samples, 0.07%)</title><rect x="82.4645%" y="165" width="0.0677%" height="15" fill="rgb(207,125,25)" fg:x="1218" fg:w="1"/><text x="82.7145%" y="175.50"></text></g><g><title>_kpersona_get (1 samples, 0.07%)</title><rect x="82.4645%" y="149" width="0.0677%" height="15" fill="rgb(210,195,18)" fg:x="1218" fg:w="1"/><text x="82.7145%" y="159.50"></text></g><g><title>std::thread::spawn (17 samples, 1.15%)</title><rect x="81.8551%" y="245" width="1.1510%" height="15" fill="rgb(249,80,12)" fg:x="1209" fg:w="17"/><text x="82.1051%" y="255.50"></text></g><g><title>std::thread::Builder::spawn (17 samples, 1.15%)</title><rect x="81.8551%" y="229" width="1.1510%" height="15" fill="rgb(221,65,9)" fg:x="1209" fg:w="17"/><text x="82.1051%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (17 samples, 1.15%)</title><rect x="81.8551%" y="213" width="1.1510%" height="15" fill="rgb(235,49,36)" fg:x="1209" fg:w="17"/><text x="82.1051%" y="223.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (17 samples, 1.15%)</title><rect x="81.8551%" y="197" width="1.1510%" height="15" fill="rgb(225,32,20)" fg:x="1209" fg:w="17"/><text x="82.1051%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (17 samples, 1.15%)</title><rect x="81.8551%" y="181" width="1.1510%" height="15" fill="rgb(215,141,46)" fg:x="1209" fg:w="17"/><text x="82.1051%" y="191.50"></text></g><g><title>_pthread_workqueue_addthreads_np (7 samples, 0.47%)</title><rect x="82.5322%" y="165" width="0.4739%" height="15" fill="rgb(250,160,47)" fg:x="1219" fg:w="7"/><text x="82.7822%" y="175.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (7 samples, 0.47%)</title><rect x="82.5322%" y="149" width="0.4739%" height="15" fill="rgb(216,222,40)" fg:x="1219" fg:w="7"/><text x="82.7822%" y="159.50"></text></g><g><title>_pthread_cond_broadcast (76 samples, 5.15%)</title><rect x="84.2248%" y="229" width="5.1456%" height="15" fill="rgb(234,217,39)" fg:x="1244" fg:w="76"/><text x="84.4748%" y="239.50">_pthre..</text></g><g><title>_pthread_rwlock_init (76 samples, 5.15%)</title><rect x="84.2248%" y="213" width="5.1456%" height="15" fill="rgb(207,178,40)" fg:x="1244" fg:w="76"/><text x="84.4748%" y="223.50">_pthre..</text></g><g><title>core::mem::drop (1 samples, 0.07%)</title><rect x="89.3703%" y="229" width="0.0677%" height="15" fill="rgb(221,136,13)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibMode3D&lt;raylib::core::drawing::RaylibDrawHandle&gt;&gt; (1 samples, 0.07%)</title><rect x="89.3703%" y="213" width="0.0677%" height="15" fill="rgb(249,199,10)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="223.50"></text></g><g><title>&lt;raylib::core::drawing::RaylibMode3D&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="89.3703%" y="197" width="0.0677%" height="15" fill="rgb(249,222,13)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="89.3703%" y="181" width="0.0677%" height="15" fill="rgb(244,185,38)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="89.3703%" y="165" width="0.0677%" height="15" fill="rgb(236,202,9)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="89.3703%" y="149" width="0.0677%" height="15" fill="rgb(250,229,37)" fg:x="1320" fg:w="1"/><text x="89.6203%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (84 samples, 5.69%)</title><rect x="89.4381%" y="229" width="5.6872%" height="15" fill="rgb(206,174,23)" fg:x="1321" fg:w="84"/><text x="89.6881%" y="239.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (84 samples, 5.69%)</title><rect x="89.4381%" y="213" width="5.6872%" height="15" fill="rgb(211,33,43)" fg:x="1321" fg:w="84"/><text x="89.6881%" y="223.50">core::p..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 5.69%)</title><rect x="89.4381%" y="197" width="5.6872%" height="15" fill="rgb(245,58,50)" fg:x="1321" fg:w="84"/><text x="89.6881%" y="207.50">&lt;std::s..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (84 samples, 5.69%)</title><rect x="89.4381%" y="181" width="5.6872%" height="15" fill="rgb(244,68,36)" fg:x="1321" fg:w="84"/><text x="89.6881%" y="191.50">std::sy..</text></g><g><title>_pthread_cond_broadcast (73 samples, 4.94%)</title><rect x="90.1828%" y="165" width="4.9425%" height="15" fill="rgb(232,229,15)" fg:x="1332" fg:w="73"/><text x="90.4328%" y="175.50">_pthre..</text></g><g><title>_pthread_rwlock_init (73 samples, 4.94%)</title><rect x="90.1828%" y="149" width="4.9425%" height="15" fill="rgb(254,30,23)" fg:x="1332" fg:w="73"/><text x="90.4328%" y="159.50">_pthre..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (39 samples, 2.64%)</title><rect x="95.1253%" y="229" width="2.6405%" height="15" fill="rgb(235,160,14)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="239.50">co..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 2.64%)</title><rect x="95.1253%" y="213" width="2.6405%" height="15" fill="rgb(212,155,44)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="223.50">&lt;s..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (39 samples, 2.64%)</title><rect x="95.1253%" y="197" width="2.6405%" height="15" fill="rgb(226,2,50)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="207.50">st..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (39 samples, 2.64%)</title><rect x="95.1253%" y="181" width="2.6405%" height="15" fill="rgb(234,177,6)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="191.50">st..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (39 samples, 2.64%)</title><rect x="95.1253%" y="165" width="2.6405%" height="15" fill="rgb(217,24,9)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="175.50">st..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (39 samples, 2.64%)</title><rect x="95.1253%" y="149" width="2.6405%" height="15" fill="rgb(220,13,46)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="159.50">st..</text></g><g><title>std::thread::Thread::unpark (39 samples, 2.64%)</title><rect x="95.1253%" y="133" width="2.6405%" height="15" fill="rgb(239,221,27)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="143.50">st..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (39 samples, 2.64%)</title><rect x="95.1253%" y="117" width="2.6405%" height="15" fill="rgb(222,198,25)" fg:x="1405" fg:w="39"/><text x="95.3753%" y="127.50">st..</text></g><g><title>raylib::core::drawing::RaylibMode3DExt::begin_mode3D (4 samples, 0.27%)</title><rect x="97.7657%" y="229" width="0.2708%" height="15" fill="rgb(211,99,13)" fg:x="1444" fg:w="4"/><text x="98.0157%" y="239.50"></text></g><g><title>Unknown (3 samples, 0.20%)</title><rect x="97.8334%" y="213" width="0.2031%" height="15" fill="rgb(232,111,31)" fg:x="1445" fg:w="3"/><text x="98.0834%" y="223.50"></text></g><g><title>Unknown (3 samples, 0.20%)</title><rect x="97.8334%" y="197" width="0.2031%" height="15" fill="rgb(245,82,37)" fg:x="1445" fg:w="3"/><text x="98.0834%" y="207.50"></text></g><g><title>Unknown (2 samples, 0.14%)</title><rect x="97.9012%" y="181" width="0.1354%" height="15" fill="rgb(227,149,46)" fg:x="1446" fg:w="2"/><text x="98.1512%" y="191.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (8 samples, 0.54%)</title><rect x="98.0366%" y="229" width="0.5416%" height="15" fill="rgb(218,36,50)" fg:x="1448" fg:w="8"/><text x="98.2866%" y="239.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (8 samples, 0.54%)</title><rect x="98.0366%" y="213" width="0.5416%" height="15" fill="rgb(226,80,48)" fg:x="1448" fg:w="8"/><text x="98.2866%" y="223.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (5 samples, 0.34%)</title><rect x="98.2397%" y="197" width="0.3385%" height="15" fill="rgb(238,224,15)" fg:x="1451" fg:w="5"/><text x="98.4897%" y="207.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (3 samples, 0.20%)</title><rect x="98.3751%" y="181" width="0.2031%" height="15" fill="rgb(241,136,10)" fg:x="1453" fg:w="3"/><text x="98.6251%" y="191.50"></text></g><g><title>_pthread_rwlock_init (3 samples, 0.20%)</title><rect x="98.3751%" y="165" width="0.2031%" height="15" fill="rgb(208,32,45)" fg:x="1453" fg:w="3"/><text x="98.6251%" y="175.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (7 samples, 0.47%)</title><rect x="98.5782%" y="229" width="0.4739%" height="15" fill="rgb(207,135,9)" fg:x="1456" fg:w="7"/><text x="98.8282%" y="239.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (7 samples, 0.47%)</title><rect x="98.5782%" y="213" width="0.4739%" height="15" fill="rgb(206,86,44)" fg:x="1456" fg:w="7"/><text x="98.8282%" y="223.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::try_lock (1 samples, 0.07%)</title><rect x="98.9844%" y="197" width="0.0677%" height="15" fill="rgb(245,177,15)" fg:x="1462" fg:w="1"/><text x="99.2344%" y="207.50"></text></g><g><title>torpedo::draw_call::run_draw_calls (1 samples, 0.07%)</title><rect x="99.0521%" y="229" width="0.0677%" height="15" fill="rgb(206,64,50)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_rectangle (1 samples, 0.07%)</title><rect x="99.0521%" y="213" width="0.0677%" height="15" fill="rgb(234,36,40)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="99.0521%" y="197" width="0.0677%" height="15" fill="rgb(213,64,8)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="99.0521%" y="181" width="0.0677%" height="15" fill="rgb(210,75,36)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="99.0521%" y="165" width="0.0677%" height="15" fill="rgb(229,88,21)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="99.0521%" y="149" width="0.0677%" height="15" fill="rgb(252,204,47)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="159.50"></text></g><g><title>Unknown (1 samples, 0.07%)</title><rect x="99.0521%" y="133" width="0.0677%" height="15" fill="rgb(208,77,27)" fg:x="1463" fg:w="1"/><text x="99.3021%" y="143.50"></text></g><g><title>_main (855 samples, 57.89%)</title><rect x="41.9770%" y="501" width="57.8876%" height="15" fill="rgb(221,76,26)" fg:x="620" fg:w="855"/><text x="42.2270%" y="511.50">_main</text></g><g><title>std::rt::lang_start_internal (855 samples, 57.89%)</title><rect x="41.9770%" y="485" width="57.8876%" height="15" fill="rgb(225,139,18)" fg:x="620" fg:w="855"/><text x="42.2270%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (855 samples, 57.89%)</title><rect x="41.9770%" y="469" width="57.8876%" height="15" fill="rgb(230,137,11)" fg:x="620" fg:w="855"/><text x="42.2270%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (855 samples, 57.89%)</title><rect x="41.9770%" y="453" width="57.8876%" height="15" fill="rgb(212,28,1)" fg:x="620" fg:w="855"/><text x="42.2270%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (855 samples, 57.89%)</title><rect x="41.9770%" y="437" width="57.8876%" height="15" fill="rgb(248,164,17)" fg:x="620" fg:w="855"/><text x="42.2270%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (855 samples, 57.89%)</title><rect x="41.9770%" y="421" width="57.8876%" height="15" fill="rgb(222,171,42)" fg:x="620" fg:w="855"/><text x="42.2270%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (855 samples, 57.89%)</title><rect x="41.9770%" y="405" width="57.8876%" height="15" fill="rgb(243,84,45)" fg:x="620" fg:w="855"/><text x="42.2270%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (855 samples, 57.89%)</title><rect x="41.9770%" y="389" width="57.8876%" height="15" fill="rgb(252,49,23)" fg:x="620" fg:w="855"/><text x="42.2270%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (855 samples, 57.89%)</title><rect x="41.9770%" y="373" width="57.8876%" height="15" fill="rgb(215,19,7)" fg:x="620" fg:w="855"/><text x="42.2270%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (855 samples, 57.89%)</title><rect x="41.9770%" y="357" width="57.8876%" height="15" fill="rgb(238,81,41)" fg:x="620" fg:w="855"/><text x="42.2270%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (855 samples, 57.89%)</title><rect x="41.9770%" y="341" width="57.8876%" height="15" fill="rgb(210,199,37)" fg:x="620" fg:w="855"/><text x="42.2270%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (855 samples, 57.89%)</title><rect x="41.9770%" y="325" width="57.8876%" height="15" fill="rgb(244,192,49)" fg:x="620" fg:w="855"/><text x="42.2270%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (855 samples, 57.89%)</title><rect x="41.9770%" y="309" width="57.8876%" height="15" fill="rgb(226,211,11)" fg:x="620" fg:w="855"/><text x="42.2270%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (855 samples, 57.89%)</title><rect x="41.9770%" y="293" width="57.8876%" height="15" fill="rgb(236,162,54)" fg:x="620" fg:w="855"/><text x="42.2270%" y="303.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (855 samples, 57.89%)</title><rect x="41.9770%" y="277" width="57.8876%" height="15" fill="rgb(220,229,9)" fg:x="620" fg:w="855"/><text x="42.2270%" y="287.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (803 samples, 54.37%)</title><rect x="45.4976%" y="261" width="54.3670%" height="15" fill="rgb(250,87,22)" fg:x="672" fg:w="803"/><text x="45.7476%" y="271.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (249 samples, 16.86%)</title><rect x="83.0061%" y="245" width="16.8585%" height="15" fill="rgb(239,43,17)" fg:x="1226" fg:w="249"/><text x="83.2561%" y="255.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (11 samples, 0.74%)</title><rect x="99.1198%" y="229" width="0.7448%" height="15" fill="rgb(231,177,25)" fg:x="1464" fg:w="11"/><text x="99.3698%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (10 samples, 0.68%)</title><rect x="99.1875%" y="213" width="0.6770%" height="15" fill="rgb(219,179,1)" fg:x="1465" fg:w="10"/><text x="99.4375%" y="223.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="99.1875%" y="197" width="0.6770%" height="15" fill="rgb(238,219,53)" fg:x="1465" fg:w="10"/><text x="99.4375%" y="207.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="99.1875%" y="181" width="0.6770%" height="15" fill="rgb(232,167,36)" fg:x="1465" fg:w="10"/><text x="99.4375%" y="191.50"></text></g><g><title>Unknown (10 samples, 0.68%)</title><rect x="99.1875%" y="165" width="0.6770%" height="15" fill="rgb(244,19,51)" fg:x="1465" fg:w="10"/><text x="99.4375%" y="175.50"></text></g><g><title>Unknown (9 samples, 0.61%)</title><rect x="99.2552%" y="149" width="0.6093%" height="15" fill="rgb(224,6,22)" fg:x="1466" fg:w="9"/><text x="99.5052%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="99.7969%" y="133" width="0.0677%" height="15" fill="rgb(224,145,5)" fg:x="1474" fg:w="1"/><text x="100.0469%" y="143.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.07%)</title><rect x="99.8646%" y="501" width="0.0677%" height="15" fill="rgb(234,130,49)" fg:x="1475" fg:w="1"/><text x="100.1146%" y="511.50"></text></g><g><title>all (1,477 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="1477"/><text x="0.2500%" y="543.50"></text></g><g><title>8707296384 (896 samples, 60.66%)</title><rect x="39.3365%" y="517" width="60.6635%" height="15" fill="rgb(208,96,46)" fg:x="581" fg:w="896"/><text x="39.5865%" y="527.50">8707296384</text></g><g><title>_proc_clear_dirty (1 samples, 0.07%)</title><rect x="99.9323%" y="501" width="0.0677%" height="15" fill="rgb(239,3,39)" fg:x="1476" fg:w="1"/><text x="100.1823%" y="511.50"></text></g></svg></svg>