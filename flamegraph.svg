<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="520"><g><title>6167162880 (2 samples, 0.38%)</title><rect x="0.0000%" y="485" width="0.3846%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="495.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.19%)</title><rect x="0.1923%" y="469" width="0.1923%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4423%" y="479.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.19%)</title><rect x="0.1923%" y="453" width="0.1923%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4423%" y="463.50"></text></g><g><title>6167736320 (1 samples, 0.19%)</title><rect x="0.3846%" y="485" width="0.1923%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.6346%" y="495.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.19%)</title><rect x="0.3846%" y="469" width="0.1923%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.6346%" y="479.50"></text></g><g><title>___workq_open (2 samples, 0.38%)</title><rect x="0.7692%" y="453" width="0.3846%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="1.0192%" y="463.50"></text></g><g><title>_proc_clear_dirty (5 samples, 0.96%)</title><rect x="1.1538%" y="421" width="0.9615%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="5"/><text x="1.4038%" y="431.50"></text></g><g><title>6168309760 (10 samples, 1.92%)</title><rect x="0.5769%" y="485" width="1.9231%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="10"/><text x="0.8269%" y="495.50">6..</text></g><g><title>__pthread_cond_wait (10 samples, 1.92%)</title><rect x="0.5769%" y="469" width="1.9231%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="10"/><text x="0.8269%" y="479.50">_..</text></g><g><title>_mach_continuous_time (7 samples, 1.35%)</title><rect x="1.1538%" y="453" width="1.3462%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="7"/><text x="1.4038%" y="463.50"></text></g><g><title>__kernelrpc_vm_read (7 samples, 1.35%)</title><rect x="1.1538%" y="437" width="1.3462%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="7"/><text x="1.4038%" y="447.50"></text></g><g><title>_proc_signal_delegate (2 samples, 0.38%)</title><rect x="2.1154%" y="421" width="0.3846%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="2.3654%" y="431.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.19%)</title><rect x="2.6923%" y="453" width="0.1923%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="1"/><text x="2.9423%" y="463.50"></text></g><g><title>6169456640 (4 samples, 0.77%)</title><rect x="2.5000%" y="485" width="0.7692%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="4"/><text x="2.7500%" y="495.50"></text></g><g><title>__pthread_wqthread_setup (3 samples, 0.58%)</title><rect x="2.6923%" y="469" width="0.5769%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="3"/><text x="2.9423%" y="479.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.38%)</title><rect x="2.8846%" y="453" width="0.3846%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="2"/><text x="3.1346%" y="463.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.38%)</title><rect x="2.8846%" y="437" width="0.3846%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="2"/><text x="3.1346%" y="447.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.38%)</title><rect x="2.8846%" y="421" width="0.3846%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="2"/><text x="3.1346%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2692%" y="149" width="0.1923%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="1"/><text x="3.5192%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2692%" y="133" width="0.1923%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="3.5192%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2692%" y="117" width="0.1923%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="3.5192%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.19%)</title><rect x="3.2692%" y="101" width="0.1923%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="1"/><text x="3.5192%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="3.2692%" y="85" width="0.1923%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="1"/><text x="3.5192%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="3.2692%" y="69" width="0.1923%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="1"/><text x="3.5192%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="3.2692%" y="53" width="0.1923%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="1"/><text x="3.5192%" y="63.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="3.2692%" y="245" width="0.5769%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="3"/><text x="3.5192%" y="255.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="3.2692%" y="229" width="0.5769%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="3"/><text x="3.5192%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="3.2692%" y="213" width="0.5769%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="3"/><text x="3.5192%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.58%)</title><rect x="3.2692%" y="197" width="0.5769%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="3"/><text x="3.5192%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.58%)</title><rect x="3.2692%" y="181" width="0.5769%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="3"/><text x="3.5192%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.58%)</title><rect x="3.2692%" y="165" width="0.5769%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="3"/><text x="3.5192%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.38%)</title><rect x="3.4615%" y="149" width="0.3846%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="2"/><text x="3.7115%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.38%)</title><rect x="3.4615%" y="133" width="0.3846%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="2"/><text x="3.7115%" y="143.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="3.8462%" y="245" width="0.1923%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="1"/><text x="4.0962%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="3.8462%" y="229" width="0.1923%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="1"/><text x="4.0962%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="3.8462%" y="213" width="0.1923%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="4.0962%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="3.8462%" y="197" width="0.1923%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="4.0962%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="3.8462%" y="181" width="0.1923%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="4.0962%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.8462%" y="165" width="0.1923%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="4.0962%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.8462%" y="149" width="0.1923%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="4.0962%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.8462%" y="133" width="0.1923%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="4.0962%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.19%)</title><rect x="3.8462%" y="117" width="0.1923%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="4.0962%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="3.8462%" y="101" width="0.1923%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="4.0962%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="3.8462%" y="85" width="0.1923%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="4.0962%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="3.8462%" y="69" width="0.1923%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="1"/><text x="4.0962%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (16 samples, 3.08%)</title><rect x="4.0385%" y="245" width="3.0769%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="16"/><text x="4.2885%" y="255.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (16 samples, 3.08%)</title><rect x="4.0385%" y="229" width="3.0769%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="16"/><text x="4.2885%" y="239.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (16 samples, 3.08%)</title><rect x="4.0385%" y="213" width="3.0769%" height="15" fill="rgb(250,191,14)" fg:x="21" fg:w="16"/><text x="4.2885%" y="223.50">cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 3.08%)</title><rect x="4.0385%" y="197" width="3.0769%" height="15" fill="rgb(239,60,40)" fg:x="21" fg:w="16"/><text x="4.2885%" y="207.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 3.08%)</title><rect x="4.0385%" y="181" width="3.0769%" height="15" fill="rgb(206,27,48)" fg:x="21" fg:w="16"/><text x="4.2885%" y="191.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (16 samples, 3.08%)</title><rect x="4.0385%" y="165" width="3.0769%" height="15" fill="rgb(225,35,8)" fg:x="21" fg:w="16"/><text x="4.2885%" y="175.50">all..</text></g><g><title>torpedo::physics::update (1 samples, 0.19%)</title><rect x="6.9231%" y="149" width="0.1923%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="1"/><text x="7.1731%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (1 samples, 0.19%)</title><rect x="6.9231%" y="133" width="0.1923%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="1"/><text x="7.1731%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.19%)</title><rect x="6.9231%" y="117" width="0.1923%" height="15" fill="rgb(231,138,38)" fg:x="36" fg:w="1"/><text x="7.1731%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.19%)</title><rect x="6.9231%" y="101" width="0.1923%" height="15" fill="rgb(231,145,46)" fg:x="36" fg:w="1"/><text x="7.1731%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="6.9231%" y="85" width="0.1923%" height="15" fill="rgb(251,118,11)" fg:x="36" fg:w="1"/><text x="7.1731%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.19%)</title><rect x="6.9231%" y="69" width="0.1923%" height="15" fill="rgb(217,147,25)" fg:x="36" fg:w="1"/><text x="7.1731%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.19%)</title><rect x="6.9231%" y="53" width="0.1923%" height="15" fill="rgb(247,81,37)" fg:x="36" fg:w="1"/><text x="7.1731%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (15 samples, 2.88%)</title><rect x="7.1154%" y="245" width="2.8846%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="15"/><text x="7.3654%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (15 samples, 2.88%)</title><rect x="7.1154%" y="229" width="2.8846%" height="15" fill="rgb(227,1,9)" fg:x="37" fg:w="15"/><text x="7.3654%" y="239.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (15 samples, 2.88%)</title><rect x="7.1154%" y="213" width="2.8846%" height="15" fill="rgb(248,47,43)" fg:x="37" fg:w="15"/><text x="7.3654%" y="223.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (15 samples, 2.88%)</title><rect x="7.1154%" y="197" width="2.8846%" height="15" fill="rgb(221,10,30)" fg:x="37" fg:w="15"/><text x="7.3654%" y="207.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (15 samples, 2.88%)</title><rect x="7.1154%" y="181" width="2.8846%" height="15" fill="rgb(210,229,1)" fg:x="37" fg:w="15"/><text x="7.3654%" y="191.50">co..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 2.88%)</title><rect x="7.1154%" y="165" width="2.8846%" height="15" fill="rgb(222,148,37)" fg:x="37" fg:w="15"/><text x="7.3654%" y="175.50">&lt;h..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (15 samples, 2.88%)</title><rect x="10.0000%" y="245" width="2.8846%" height="15" fill="rgb(234,67,33)" fg:x="52" fg:w="15"/><text x="10.2500%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (15 samples, 2.88%)</title><rect x="10.0000%" y="229" width="2.8846%" height="15" fill="rgb(247,98,35)" fg:x="52" fg:w="15"/><text x="10.2500%" y="239.50">co..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 2.88%)</title><rect x="10.0000%" y="213" width="2.8846%" height="15" fill="rgb(247,138,52)" fg:x="52" fg:w="15"/><text x="10.2500%" y="223.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 2.88%)</title><rect x="10.0000%" y="197" width="2.8846%" height="15" fill="rgb(213,79,30)" fg:x="52" fg:w="15"/><text x="10.2500%" y="207.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (15 samples, 2.88%)</title><rect x="10.0000%" y="181" width="2.8846%" height="15" fill="rgb(246,177,23)" fg:x="52" fg:w="15"/><text x="10.2500%" y="191.50">al..</text></g><g><title>torpedo::physics::update (1 samples, 0.19%)</title><rect x="12.6923%" y="165" width="0.1923%" height="15" fill="rgb(230,62,27)" fg:x="66" fg:w="1"/><text x="12.9423%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.19%)</title><rect x="12.6923%" y="149" width="0.1923%" height="15" fill="rgb(216,154,8)" fg:x="66" fg:w="1"/><text x="12.9423%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.19%)</title><rect x="12.6923%" y="133" width="0.1923%" height="15" fill="rgb(244,35,45)" fg:x="66" fg:w="1"/><text x="12.9423%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="12.6923%" y="117" width="0.1923%" height="15" fill="rgb(251,115,12)" fg:x="66" fg:w="1"/><text x="12.9423%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.19%)</title><rect x="12.6923%" y="101" width="0.1923%" height="15" fill="rgb(240,54,50)" fg:x="66" fg:w="1"/><text x="12.9423%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.19%)</title><rect x="12.6923%" y="85" width="0.1923%" height="15" fill="rgb(233,84,52)" fg:x="66" fg:w="1"/><text x="12.9423%" y="95.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 1.54%)</title><rect x="12.8846%" y="165" width="1.5385%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="8"/><text x="13.1346%" y="175.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (8 samples, 1.54%)</title><rect x="12.8846%" y="149" width="1.5385%" height="15" fill="rgb(249,43,39)" fg:x="67" fg:w="8"/><text x="13.1346%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="14.2308%" y="133" width="0.1923%" height="15" fill="rgb(209,38,44)" fg:x="74" fg:w="1"/><text x="14.4808%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="14.2308%" y="117" width="0.1923%" height="15" fill="rgb(236,212,23)" fg:x="74" fg:w="1"/><text x="14.4808%" y="127.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="14.2308%" y="101" width="0.1923%" height="15" fill="rgb(242,79,21)" fg:x="74" fg:w="1"/><text x="14.4808%" y="111.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="14.2308%" y="85" width="0.1923%" height="15" fill="rgb(211,96,35)" fg:x="74" fg:w="1"/><text x="14.4808%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.19%)</title><rect x="14.2308%" y="69" width="0.1923%" height="15" fill="rgb(253,215,40)" fg:x="74" fg:w="1"/><text x="14.4808%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="14.2308%" y="53" width="0.1923%" height="15" fill="rgb(211,81,21)" fg:x="74" fg:w="1"/><text x="14.4808%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.38%)</title><rect x="14.4231%" y="133" width="0.3846%" height="15" fill="rgb(208,190,38)" fg:x="75" fg:w="2"/><text x="14.6731%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.38%)</title><rect x="14.4231%" y="117" width="0.3846%" height="15" fill="rgb(235,213,38)" fg:x="75" fg:w="2"/><text x="14.6731%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.38%)</title><rect x="14.4231%" y="101" width="0.3846%" height="15" fill="rgb(237,122,38)" fg:x="75" fg:w="2"/><text x="14.6731%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (40 samples, 7.69%)</title><rect x="12.8846%" y="213" width="7.6923%" height="15" fill="rgb(244,218,35)" fg:x="67" fg:w="40"/><text x="13.1346%" y="223.50">core::slice..</text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (40 samples, 7.69%)</title><rect x="12.8846%" y="197" width="7.6923%" height="15" fill="rgb(240,68,47)" fg:x="67" fg:w="40"/><text x="13.1346%" y="207.50">&lt;[T] as cor..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (40 samples, 7.69%)</title><rect x="12.8846%" y="181" width="7.6923%" height="15" fill="rgb(210,16,53)" fg:x="67" fg:w="40"/><text x="13.1346%" y="191.50">&lt;core::opti..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (32 samples, 6.15%)</title><rect x="14.4231%" y="165" width="6.1538%" height="15" fill="rgb(235,124,12)" fg:x="75" fg:w="32"/><text x="14.6731%" y="175.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (32 samples, 6.15%)</title><rect x="14.4231%" y="149" width="6.1538%" height="15" fill="rgb(224,169,11)" fg:x="75" fg:w="32"/><text x="14.6731%" y="159.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (30 samples, 5.77%)</title><rect x="14.8077%" y="133" width="5.7692%" height="15" fill="rgb(250,166,2)" fg:x="77" fg:w="30"/><text x="15.0577%" y="143.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (30 samples, 5.77%)</title><rect x="14.8077%" y="117" width="5.7692%" height="15" fill="rgb(242,216,29)" fg:x="77" fg:w="30"/><text x="15.0577%" y="127.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (30 samples, 5.77%)</title><rect x="14.8077%" y="101" width="5.7692%" height="15" fill="rgb(230,116,27)" fg:x="77" fg:w="30"/><text x="15.0577%" y="111.50">core::p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 5.77%)</title><rect x="14.8077%" y="85" width="5.7692%" height="15" fill="rgb(228,99,48)" fg:x="77" fg:w="30"/><text x="15.0577%" y="95.50">&lt;hashbr..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (46 samples, 8.85%)</title><rect x="12.8846%" y="245" width="8.8462%" height="15" fill="rgb(253,11,6)" fg:x="67" fg:w="46"/><text x="13.1346%" y="255.50">torpedo::are..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (46 samples, 8.85%)</title><rect x="12.8846%" y="229" width="8.8462%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="46"/><text x="13.1346%" y="239.50">torpedo::are..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (6 samples, 1.15%)</title><rect x="20.5769%" y="213" width="1.1538%" height="15" fill="rgb(236,97,10)" fg:x="107" fg:w="6"/><text x="20.8269%" y="223.50"></text></g><g><title>torpedo::physics::Octree::query_box (1 samples, 0.19%)</title><rect x="21.7308%" y="245" width="0.1923%" height="15" fill="rgb(233,208,19)" fg:x="113" fg:w="1"/><text x="21.9808%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.19%)</title><rect x="21.7308%" y="229" width="0.1923%" height="15" fill="rgb(216,164,2)" fg:x="113" fg:w="1"/><text x="21.9808%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="21.7308%" y="213" width="0.1923%" height="15" fill="rgb(220,129,5)" fg:x="113" fg:w="1"/><text x="21.9808%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="21.7308%" y="197" width="0.1923%" height="15" fill="rgb(242,17,10)" fg:x="113" fg:w="1"/><text x="21.9808%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="21.7308%" y="181" width="0.1923%" height="15" fill="rgb(242,107,0)" fg:x="113" fg:w="1"/><text x="21.9808%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 19.04%)</title><rect x="3.2692%" y="437" width="19.0385%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="99"/><text x="3.5192%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 19.04%)</title><rect x="3.2692%" y="421" width="19.0385%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="99"/><text x="3.5192%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (99 samples, 19.04%)</title><rect x="3.2692%" y="405" width="19.0385%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="99"/><text x="3.5192%" y="415.50">core::ops::function::FnOnce::c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (99 samples, 19.04%)</title><rect x="3.2692%" y="389" width="19.0385%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="99"/><text x="3.5192%" y="399.50">std::thread::Builder::spawn_un..</text></g><g><title>std::panic::catch_unwind (99 samples, 19.04%)</title><rect x="3.2692%" y="373" width="19.0385%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="99"/><text x="3.5192%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (99 samples, 19.04%)</title><rect x="3.2692%" y="357" width="19.0385%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="99"/><text x="3.5192%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (99 samples, 19.04%)</title><rect x="3.2692%" y="341" width="19.0385%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="99"/><text x="3.5192%" y="351.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (99 samples, 19.04%)</title><rect x="3.2692%" y="325" width="19.0385%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="99"/><text x="3.5192%" y="335.50">&lt;core::panic::unwind_safe::Ass..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (99 samples, 19.04%)</title><rect x="3.2692%" y="309" width="19.0385%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="99"/><text x="3.5192%" y="319.50">std::thread::Builder::spawn_un..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (99 samples, 19.04%)</title><rect x="3.2692%" y="293" width="19.0385%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="99"/><text x="3.5192%" y="303.50">std::sys::backtrace::__rust_be..</text></g><g><title>torpedo::level::level_loop::{{closure}} (99 samples, 19.04%)</title><rect x="3.2692%" y="277" width="19.0385%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="99"/><text x="3.5192%" y="287.50">torpedo::level::level_loop::{{..</text></g><g><title>torpedo::physics::update (99 samples, 19.04%)</title><rect x="3.2692%" y="261" width="19.0385%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="99"/><text x="3.5192%" y="271.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (2 samples, 0.38%)</title><rect x="21.9231%" y="245" width="0.3846%" height="15" fill="rgb(247,173,49)" fg:x="114" fg:w="2"/><text x="22.1731%" y="255.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.38%)</title><rect x="21.9231%" y="229" width="0.3846%" height="15" fill="rgb(224,114,35)" fg:x="114" fg:w="2"/><text x="22.1731%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.38%)</title><rect x="21.9231%" y="213" width="0.3846%" height="15" fill="rgb(245,159,27)" fg:x="114" fg:w="2"/><text x="22.1731%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.38%)</title><rect x="21.9231%" y="197" width="0.3846%" height="15" fill="rgb(245,172,44)" fg:x="114" fg:w="2"/><text x="22.1731%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.38%)</title><rect x="21.9231%" y="181" width="0.3846%" height="15" fill="rgb(236,23,11)" fg:x="114" fg:w="2"/><text x="22.1731%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.38%)</title><rect x="21.9231%" y="165" width="0.3846%" height="15" fill="rgb(205,117,38)" fg:x="114" fg:w="2"/><text x="22.1731%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.38%)</title><rect x="21.9231%" y="149" width="0.3846%" height="15" fill="rgb(237,72,25)" fg:x="114" fg:w="2"/><text x="22.1731%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.38%)</title><rect x="21.9231%" y="133" width="0.3846%" height="15" fill="rgb(244,70,9)" fg:x="114" fg:w="2"/><text x="22.1731%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (49 samples, 9.42%)</title><rect x="22.3077%" y="437" width="9.4231%" height="15" fill="rgb(217,125,39)" fg:x="116" fg:w="49"/><text x="22.5577%" y="447.50">core::ptr::dr..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (49 samples, 9.42%)</title><rect x="22.3077%" y="421" width="9.4231%" height="15" fill="rgb(235,36,10)" fg:x="116" fg:w="49"/><text x="22.5577%" y="431.50">&lt;std::sys::pa..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (49 samples, 9.42%)</title><rect x="22.3077%" y="405" width="9.4231%" height="15" fill="rgb(251,123,47)" fg:x="116" fg:w="49"/><text x="22.5577%" y="415.50">std::sys::pal..</text></g><g><title>6172176384 (150 samples, 28.85%)</title><rect x="3.2692%" y="485" width="28.8462%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="150"/><text x="3.5192%" y="495.50">6172176384</text></g><g><title>__pthread_cond_wait (150 samples, 28.85%)</title><rect x="3.2692%" y="469" width="28.8462%" height="15" fill="rgb(238,131,9)" fg:x="17" fg:w="150"/><text x="3.5192%" y="479.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (150 samples, 28.85%)</title><rect x="3.2692%" y="453" width="28.8462%" height="15" fill="rgb(211,50,8)" fg:x="17" fg:w="150"/><text x="3.5192%" y="463.50">std::sys::pal::unix::thread::Thread::new::thre..</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (2 samples, 0.38%)</title><rect x="31.7308%" y="437" width="0.3846%" height="15" fill="rgb(245,182,24)" fg:x="165" fg:w="2"/><text x="31.9808%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.38%)</title><rect x="31.7308%" y="421" width="0.3846%" height="15" fill="rgb(242,14,37)" fg:x="165" fg:w="2"/><text x="31.9808%" y="431.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.19%)</title><rect x="31.9231%" y="405" width="0.1923%" height="15" fill="rgb(246,228,12)" fg:x="166" fg:w="1"/><text x="32.1731%" y="415.50"></text></g><g><title>_host_get_special_port (1 samples, 0.19%)</title><rect x="31.9231%" y="389" width="0.1923%" height="15" fill="rgb(213,55,15)" fg:x="166" fg:w="1"/><text x="32.1731%" y="399.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.19%)</title><rect x="49.6154%" y="469" width="0.1923%" height="15" fill="rgb(209,9,3)" fg:x="258" fg:w="1"/><text x="49.8654%" y="479.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="51.7308%" y="133" width="0.1923%" height="15" fill="rgb(230,59,30)" fg:x="269" fg:w="1"/><text x="51.9808%" y="143.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="51.7308%" y="117" width="0.1923%" height="15" fill="rgb(209,121,21)" fg:x="269" fg:w="1"/><text x="51.9808%" y="127.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.38%)</title><rect x="51.9231%" y="133" width="0.3846%" height="15" fill="rgb(220,109,13)" fg:x="270" fg:w="2"/><text x="52.1731%" y="143.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.38%)</title><rect x="51.9231%" y="117" width="0.3846%" height="15" fill="rgb(232,18,1)" fg:x="270" fg:w="2"/><text x="52.1731%" y="127.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.38%)</title><rect x="51.9231%" y="101" width="0.3846%" height="15" fill="rgb(215,41,42)" fg:x="270" fg:w="2"/><text x="52.1731%" y="111.50"></text></g><g><title>_mach_vm_protect (1 samples, 0.19%)</title><rect x="52.3077%" y="133" width="0.1923%" height="15" fill="rgb(224,123,36)" fg:x="272" fg:w="1"/><text x="52.5577%" y="143.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.19%)</title><rect x="52.5000%" y="133" width="0.1923%" height="15" fill="rgb(240,125,3)" fg:x="273" fg:w="1"/><text x="52.7500%" y="143.50"></text></g><g><title>_semaphore_create (1 samples, 0.19%)</title><rect x="52.6923%" y="133" width="0.1923%" height="15" fill="rgb(205,98,50)" fg:x="274" fg:w="1"/><text x="52.9423%" y="143.50"></text></g><g><title>Unknown (12 samples, 2.31%)</title><rect x="50.7692%" y="149" width="2.3077%" height="15" fill="rgb(205,185,37)" fg:x="264" fg:w="12"/><text x="51.0192%" y="159.50">U..</text></g><g><title>_task_info (1 samples, 0.19%)</title><rect x="52.8846%" y="133" width="0.1923%" height="15" fill="rgb(238,207,15)" fg:x="275" fg:w="1"/><text x="53.1346%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (18 samples, 3.46%)</title><rect x="49.8077%" y="229" width="3.4615%" height="15" fill="rgb(213,199,42)" fg:x="259" fg:w="18"/><text x="50.0577%" y="239.50">cor..</text></g><g><title>Unknown (18 samples, 3.46%)</title><rect x="49.8077%" y="213" width="3.4615%" height="15" fill="rgb(235,201,11)" fg:x="259" fg:w="18"/><text x="50.0577%" y="223.50">Unk..</text></g><g><title>Unknown (18 samples, 3.46%)</title><rect x="49.8077%" y="197" width="3.4615%" height="15" fill="rgb(207,46,11)" fg:x="259" fg:w="18"/><text x="50.0577%" y="207.50">Unk..</text></g><g><title>Unknown (18 samples, 3.46%)</title><rect x="49.8077%" y="181" width="3.4615%" height="15" fill="rgb(241,35,35)" fg:x="259" fg:w="18"/><text x="50.0577%" y="191.50">Unk..</text></g><g><title>Unknown (18 samples, 3.46%)</title><rect x="49.8077%" y="165" width="3.4615%" height="15" fill="rgb(243,32,47)" fg:x="259" fg:w="18"/><text x="50.0577%" y="175.50">Unk..</text></g><g><title>_proc_clear_dirty (1 samples, 0.19%)</title><rect x="53.0769%" y="149" width="0.1923%" height="15" fill="rgb(247,202,23)" fg:x="276" fg:w="1"/><text x="53.3269%" y="159.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="61.3462%" y="101" width="0.1923%" height="15" fill="rgb(219,102,11)" fg:x="319" fg:w="1"/><text x="61.5962%" y="111.50"></text></g><g><title>Unknown (17 samples, 3.27%)</title><rect x="58.4615%" y="117" width="3.2692%" height="15" fill="rgb(243,110,44)" fg:x="304" fg:w="17"/><text x="58.7115%" y="127.50">Unk..</text></g><g><title>_task_info (1 samples, 0.19%)</title><rect x="61.5385%" y="101" width="0.1923%" height="15" fill="rgb(222,74,54)" fg:x="320" fg:w="1"/><text x="61.7885%" y="111.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.38%)</title><rect x="61.7308%" y="117" width="0.3846%" height="15" fill="rgb(216,99,12)" fg:x="321" fg:w="2"/><text x="61.9808%" y="127.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.38%)</title><rect x="61.7308%" y="101" width="0.3846%" height="15" fill="rgb(226,22,26)" fg:x="321" fg:w="2"/><text x="61.9808%" y="111.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.38%)</title><rect x="61.7308%" y="85" width="0.3846%" height="15" fill="rgb(217,163,10)" fg:x="321" fg:w="2"/><text x="61.9808%" y="95.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.38%)</title><rect x="62.1154%" y="117" width="0.3846%" height="15" fill="rgb(213,25,53)" fg:x="323" fg:w="2"/><text x="62.3654%" y="127.50"></text></g><g><title>Unknown (36 samples, 6.92%)</title><rect x="55.7692%" y="133" width="6.9231%" height="15" fill="rgb(252,105,26)" fg:x="290" fg:w="36"/><text x="56.0192%" y="143.50">Unknown</text></g><g><title>_vm_remap (1 samples, 0.19%)</title><rect x="62.5000%" y="117" width="0.1923%" height="15" fill="rgb(220,39,43)" fg:x="325" fg:w="1"/><text x="62.7500%" y="127.50"></text></g><g><title>_vm_remap (1 samples, 0.19%)</title><rect x="62.5000%" y="101" width="0.1923%" height="15" fill="rgb(229,68,48)" fg:x="325" fg:w="1"/><text x="62.7500%" y="111.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (1 samples, 0.19%)</title><rect x="62.6923%" y="133" width="0.1923%" height="15" fill="rgb(252,8,32)" fg:x="326" fg:w="1"/><text x="62.9423%" y="143.50"></text></g><g><title>_geteuid (1 samples, 0.19%)</title><rect x="62.8846%" y="133" width="0.1923%" height="15" fill="rgb(223,20,43)" fg:x="327" fg:w="1"/><text x="63.1346%" y="143.50"></text></g><g><title>_host_get_special_port (1 samples, 0.19%)</title><rect x="63.0769%" y="133" width="0.1923%" height="15" fill="rgb(229,81,49)" fg:x="328" fg:w="1"/><text x="63.3269%" y="143.50"></text></g><g><title>raylib::core::RaylibBuilder::build (53 samples, 10.19%)</title><rect x="53.2692%" y="229" width="10.1923%" height="15" fill="rgb(236,28,36)" fg:x="277" fg:w="53"/><text x="53.5192%" y="239.50">raylib::core::R..</text></g><g><title>raylib::core::init_window (53 samples, 10.19%)</title><rect x="53.2692%" y="213" width="10.1923%" height="15" fill="rgb(249,185,26)" fg:x="277" fg:w="53"/><text x="53.5192%" y="223.50">raylib::core::i..</text></g><g><title>Unknown (53 samples, 10.19%)</title><rect x="53.2692%" y="197" width="10.1923%" height="15" fill="rgb(249,174,33)" fg:x="277" fg:w="53"/><text x="53.5192%" y="207.50">Unknown</text></g><g><title>Unknown (53 samples, 10.19%)</title><rect x="53.2692%" y="181" width="10.1923%" height="15" fill="rgb(233,201,37)" fg:x="277" fg:w="53"/><text x="53.5192%" y="191.50">Unknown</text></g><g><title>Unknown (53 samples, 10.19%)</title><rect x="53.2692%" y="165" width="10.1923%" height="15" fill="rgb(221,78,26)" fg:x="277" fg:w="53"/><text x="53.5192%" y="175.50">Unknown</text></g><g><title>Unknown (52 samples, 10.00%)</title><rect x="53.4615%" y="149" width="10.0000%" height="15" fill="rgb(250,127,30)" fg:x="278" fg:w="52"/><text x="53.7115%" y="159.50">Unknown</text></g><g><title>_mach_continuous_time (1 samples, 0.19%)</title><rect x="63.2692%" y="133" width="0.1923%" height="15" fill="rgb(230,49,44)" fg:x="329" fg:w="1"/><text x="63.5192%" y="143.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.19%)</title><rect x="63.2692%" y="117" width="0.1923%" height="15" fill="rgb(229,67,23)" fg:x="329" fg:w="1"/><text x="63.5192%" y="127.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.19%)</title><rect x="63.2692%" y="101" width="0.1923%" height="15" fill="rgb(249,83,47)" fg:x="329" fg:w="1"/><text x="63.5192%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.19%)</title><rect x="63.4615%" y="213" width="0.1923%" height="15" fill="rgb(215,43,3)" fg:x="330" fg:w="1"/><text x="63.7115%" y="223.50"></text></g><g><title>torpedo::game::game_create_level (1 samples, 0.19%)</title><rect x="63.4615%" y="197" width="0.1923%" height="15" fill="rgb(238,154,13)" fg:x="330" fg:w="1"/><text x="63.7115%" y="207.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.19%)</title><rect x="63.4615%" y="181" width="0.1923%" height="15" fill="rgb(219,56,2)" fg:x="330" fg:w="1"/><text x="63.7115%" y="191.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.19%)</title><rect x="63.4615%" y="165" width="0.1923%" height="15" fill="rgb(233,0,4)" fg:x="330" fg:w="1"/><text x="63.7115%" y="175.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.19%)</title><rect x="63.4615%" y="149" width="0.1923%" height="15" fill="rgb(235,30,7)" fg:x="330" fg:w="1"/><text x="63.7115%" y="159.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.19%)</title><rect x="63.4615%" y="133" width="0.1923%" height="15" fill="rgb(250,79,13)" fg:x="330" fg:w="1"/><text x="63.7115%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="63.4615%" y="117" width="0.1923%" height="15" fill="rgb(211,146,34)" fg:x="330" fg:w="1"/><text x="63.7115%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="63.4615%" y="101" width="0.1923%" height="15" fill="rgb(228,22,38)" fg:x="330" fg:w="1"/><text x="63.7115%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (2 samples, 0.38%)</title><rect x="63.6538%" y="213" width="0.3846%" height="15" fill="rgb(235,168,5)" fg:x="331" fg:w="2"/><text x="63.9038%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (2 samples, 0.38%)</title><rect x="63.6538%" y="197" width="0.3846%" height="15" fill="rgb(221,155,16)" fg:x="331" fg:w="2"/><text x="63.9038%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::ComponentList&lt;torpedo::game::ship::ShipComp&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="181" width="0.1923%" height="15" fill="rgb(215,215,53)" fg:x="332" fg:w="1"/><text x="64.0962%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="165" width="0.1923%" height="15" fill="rgb(223,4,10)" fg:x="332" fg:w="1"/><text x="64.0962%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="149" width="0.1923%" height="15" fill="rgb(234,103,6)" fg:x="332" fg:w="1"/><text x="64.0962%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="133" width="0.1923%" height="15" fill="rgb(227,97,0)" fg:x="332" fg:w="1"/><text x="64.0962%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="117" width="0.1923%" height="15" fill="rgb(234,150,53)" fg:x="332" fg:w="1"/><text x="64.0962%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::game::ship::ShipComp&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="101" width="0.1923%" height="15" fill="rgb(228,201,54)" fg:x="332" fg:w="1"/><text x="64.0962%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::game::ship::ShipComp&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="85" width="0.1923%" height="15" fill="rgb(222,22,37)" fg:x="332" fg:w="1"/><text x="64.0962%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::level::Entity&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="69" width="0.1923%" height="15" fill="rgb(237,53,32)" fg:x="332" fg:w="1"/><text x="64.0962%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::level::Entity&gt;&gt; (1 samples, 0.19%)</title><rect x="63.8462%" y="53" width="0.1923%" height="15" fill="rgb(233,25,53)" fg:x="332" fg:w="1"/><text x="64.0962%" y="63.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="63.8462%" y="37" width="0.1923%" height="15" fill="rgb(210,40,34)" fg:x="332" fg:w="1"/><text x="64.0962%" y="47.50"></text></g><g><title>Unknown (3 samples, 0.58%)</title><rect x="80.0000%" y="133" width="0.5769%" height="15" fill="rgb(241,220,44)" fg:x="416" fg:w="3"/><text x="80.2500%" y="143.50"></text></g><g><title>___workq_open (2 samples, 0.38%)</title><rect x="80.5769%" y="133" width="0.3846%" height="15" fill="rgb(235,28,35)" fg:x="419" fg:w="2"/><text x="80.8269%" y="143.50"></text></g><g><title>__kernelrpc_thread_policy (1 samples, 0.19%)</title><rect x="80.9615%" y="133" width="0.1923%" height="15" fill="rgb(210,56,17)" fg:x="421" fg:w="1"/><text x="81.2115%" y="143.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.19%)</title><rect x="80.9615%" y="117" width="0.1923%" height="15" fill="rgb(224,130,29)" fg:x="421" fg:w="1"/><text x="81.2115%" y="127.50"></text></g><g><title>_host_get_special_port (2 samples, 0.38%)</title><rect x="81.1538%" y="133" width="0.3846%" height="15" fill="rgb(235,212,8)" fg:x="422" fg:w="2"/><text x="81.4038%" y="143.50"></text></g><g><title>_mach_continuous_time (11 samples, 2.12%)</title><rect x="81.5385%" y="133" width="2.1154%" height="15" fill="rgb(223,33,50)" fg:x="424" fg:w="11"/><text x="81.7885%" y="143.50">_..</text></g><g><title>__kernelrpc_vm_read (11 samples, 2.12%)</title><rect x="81.5385%" y="117" width="2.1154%" height="15" fill="rgb(219,149,13)" fg:x="424" fg:w="11"/><text x="81.7885%" y="127.50">_..</text></g><g><title>_proc_clear_dirty (11 samples, 2.12%)</title><rect x="81.5385%" y="101" width="2.1154%" height="15" fill="rgb(250,156,29)" fg:x="424" fg:w="11"/><text x="81.7885%" y="111.50">_..</text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.19%)</title><rect x="83.6538%" y="133" width="0.1923%" height="15" fill="rgb(216,193,19)" fg:x="435" fg:w="1"/><text x="83.9038%" y="143.50"></text></g><g><title>_proc_clear_dirty (47 samples, 9.04%)</title><rect x="83.8462%" y="133" width="9.0385%" height="15" fill="rgb(216,135,14)" fg:x="436" fg:w="47"/><text x="84.0962%" y="143.50">_proc_clear_d..</text></g><g><title>_proc_setpcontrol (9 samples, 1.73%)</title><rect x="92.8846%" y="133" width="1.7308%" height="15" fill="rgb(241,47,5)" fg:x="483" fg:w="9"/><text x="93.1346%" y="143.50"></text></g><g><title>_pthread_cond_broadcast (1 samples, 0.19%)</title><rect x="94.6154%" y="133" width="0.1923%" height="15" fill="rgb(233,42,35)" fg:x="492" fg:w="1"/><text x="94.8654%" y="143.50"></text></g><g><title>_pthread_rwlock_init (1 samples, 0.19%)</title><rect x="94.6154%" y="117" width="0.1923%" height="15" fill="rgb(231,13,6)" fg:x="492" fg:w="1"/><text x="94.8654%" y="127.50"></text></g><g><title>_pthread_get_qos_class_np (1 samples, 0.19%)</title><rect x="94.8077%" y="133" width="0.1923%" height="15" fill="rgb(207,181,40)" fg:x="493" fg:w="1"/><text x="95.0577%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (162 samples, 31.15%)</title><rect x="64.0385%" y="213" width="31.1538%" height="15" fill="rgb(254,173,49)" fg:x="333" fg:w="162"/><text x="64.2885%" y="223.50">core::ptr::drop_in_place&lt;raylib::core::drawing::Ra..</text></g><g><title>Unknown (162 samples, 31.15%)</title><rect x="64.0385%" y="197" width="31.1538%" height="15" fill="rgb(221,1,38)" fg:x="333" fg:w="162"/><text x="64.2885%" y="207.50">Unknown</text></g><g><title>Unknown (162 samples, 31.15%)</title><rect x="64.0385%" y="181" width="31.1538%" height="15" fill="rgb(206,124,46)" fg:x="333" fg:w="162"/><text x="64.2885%" y="191.50">Unknown</text></g><g><title>Unknown (161 samples, 30.96%)</title><rect x="64.2308%" y="165" width="30.9615%" height="15" fill="rgb(249,21,11)" fg:x="334" fg:w="161"/><text x="64.4808%" y="175.50">Unknown</text></g><g><title>Unknown (157 samples, 30.19%)</title><rect x="65.0000%" y="149" width="30.1923%" height="15" fill="rgb(222,201,40)" fg:x="338" fg:w="157"/><text x="65.2500%" y="159.50">Unknown</text></g><g><title>_semaphore_create (1 samples, 0.19%)</title><rect x="95.0000%" y="133" width="0.1923%" height="15" fill="rgb(235,61,29)" fg:x="494" fg:w="1"/><text x="95.2500%" y="143.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (3 samples, 0.58%)</title><rect x="95.1923%" y="213" width="0.5769%" height="15" fill="rgb(219,207,3)" fg:x="495" fg:w="3"/><text x="95.4423%" y="223.50"></text></g><g><title>Unknown (3 samples, 0.58%)</title><rect x="95.1923%" y="197" width="0.5769%" height="15" fill="rgb(222,56,46)" fg:x="495" fg:w="3"/><text x="95.4423%" y="207.50"></text></g><g><title>Unknown (3 samples, 0.58%)</title><rect x="95.1923%" y="181" width="0.5769%" height="15" fill="rgb(239,76,54)" fg:x="495" fg:w="3"/><text x="95.4423%" y="191.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (4 samples, 0.77%)</title><rect x="95.7692%" y="213" width="0.7692%" height="15" fill="rgb(231,124,27)" fg:x="498" fg:w="4"/><text x="96.0192%" y="223.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (4 samples, 0.77%)</title><rect x="95.7692%" y="197" width="0.7692%" height="15" fill="rgb(249,195,6)" fg:x="498" fg:w="4"/><text x="96.0192%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (4 samples, 0.77%)</title><rect x="95.7692%" y="181" width="0.7692%" height="15" fill="rgb(237,174,47)" fg:x="498" fg:w="4"/><text x="96.0192%" y="191.50"></text></g><g><title>_pthread_mutex_setprioceiling (4 samples, 0.77%)</title><rect x="95.7692%" y="165" width="0.7692%" height="15" fill="rgb(206,201,31)" fg:x="498" fg:w="4"/><text x="96.0192%" y="175.50"></text></g><g><title>__pthread_cond_wait (3 samples, 0.58%)</title><rect x="95.9615%" y="149" width="0.5769%" height="15" fill="rgb(231,57,52)" fg:x="499" fg:w="3"/><text x="96.2115%" y="159.50"></text></g><g><title>___workq_open (3 samples, 0.58%)</title><rect x="95.9615%" y="133" width="0.5769%" height="15" fill="rgb(248,177,22)" fg:x="499" fg:w="3"/><text x="96.2115%" y="143.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (1 samples, 0.19%)</title><rect x="96.5385%" y="133" width="0.1923%" height="15" fill="rgb(215,211,37)" fg:x="502" fg:w="1"/><text x="96.7885%" y="143.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (1 samples, 0.19%)</title><rect x="96.7308%" y="133" width="0.1923%" height="15" fill="rgb(241,128,51)" fg:x="503" fg:w="1"/><text x="96.9808%" y="143.50"></text></g><g><title>_kpersona_get (1 samples, 0.19%)</title><rect x="96.7308%" y="117" width="0.1923%" height="15" fill="rgb(227,165,31)" fg:x="503" fg:w="1"/><text x="96.9808%" y="127.50"></text></g><g><title>std::thread::spawn (5 samples, 0.96%)</title><rect x="96.5385%" y="213" width="0.9615%" height="15" fill="rgb(228,167,24)" fg:x="502" fg:w="5"/><text x="96.7885%" y="223.50"></text></g><g><title>std::thread::Builder::spawn (5 samples, 0.96%)</title><rect x="96.5385%" y="197" width="0.9615%" height="15" fill="rgb(228,143,12)" fg:x="502" fg:w="5"/><text x="96.7885%" y="207.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (5 samples, 0.96%)</title><rect x="96.5385%" y="181" width="0.9615%" height="15" fill="rgb(249,149,8)" fg:x="502" fg:w="5"/><text x="96.7885%" y="191.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (5 samples, 0.96%)</title><rect x="96.5385%" y="165" width="0.9615%" height="15" fill="rgb(243,35,44)" fg:x="502" fg:w="5"/><text x="96.7885%" y="175.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (5 samples, 0.96%)</title><rect x="96.5385%" y="149" width="0.9615%" height="15" fill="rgb(246,89,9)" fg:x="502" fg:w="5"/><text x="96.7885%" y="159.50"></text></g><g><title>_pthread_workqueue_addthreads_np (3 samples, 0.58%)</title><rect x="96.9231%" y="133" width="0.5769%" height="15" fill="rgb(233,213,13)" fg:x="504" fg:w="3"/><text x="97.1731%" y="143.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (3 samples, 0.58%)</title><rect x="96.9231%" y="117" width="0.5769%" height="15" fill="rgb(233,141,41)" fg:x="504" fg:w="3"/><text x="97.1731%" y="127.50"></text></g><g><title>raylib::core::drawing::RaylibMode3DExt::begin_mode3D (2 samples, 0.38%)</title><rect x="97.5000%" y="197" width="0.3846%" height="15" fill="rgb(239,167,4)" fg:x="507" fg:w="2"/><text x="97.7500%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="97.6923%" y="181" width="0.1923%" height="15" fill="rgb(209,217,16)" fg:x="508" fg:w="1"/><text x="97.9423%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="97.6923%" y="165" width="0.1923%" height="15" fill="rgb(219,88,35)" fg:x="508" fg:w="1"/><text x="97.9423%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="97.6923%" y="149" width="0.1923%" height="15" fill="rgb(220,193,23)" fg:x="508" fg:w="1"/><text x="97.9423%" y="159.50"></text></g><g><title>_main (260 samples, 50.00%)</title><rect x="49.8077%" y="469" width="50.0000%" height="15" fill="rgb(230,90,52)" fg:x="259" fg:w="260"/><text x="50.0577%" y="479.50">_main</text></g><g><title>std::rt::lang_start_internal (260 samples, 50.00%)</title><rect x="49.8077%" y="453" width="50.0000%" height="15" fill="rgb(252,106,19)" fg:x="259" fg:w="260"/><text x="50.0577%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (260 samples, 50.00%)</title><rect x="49.8077%" y="437" width="50.0000%" height="15" fill="rgb(206,74,20)" fg:x="259" fg:w="260"/><text x="50.0577%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (260 samples, 50.00%)</title><rect x="49.8077%" y="421" width="50.0000%" height="15" fill="rgb(230,138,44)" fg:x="259" fg:w="260"/><text x="50.0577%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (260 samples, 50.00%)</title><rect x="49.8077%" y="405" width="50.0000%" height="15" fill="rgb(235,182,43)" fg:x="259" fg:w="260"/><text x="50.0577%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (260 samples, 50.00%)</title><rect x="49.8077%" y="389" width="50.0000%" height="15" fill="rgb(242,16,51)" fg:x="259" fg:w="260"/><text x="50.0577%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (260 samples, 50.00%)</title><rect x="49.8077%" y="373" width="50.0000%" height="15" fill="rgb(248,9,4)" fg:x="259" fg:w="260"/><text x="50.0577%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (260 samples, 50.00%)</title><rect x="49.8077%" y="357" width="50.0000%" height="15" fill="rgb(210,31,22)" fg:x="259" fg:w="260"/><text x="50.0577%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (260 samples, 50.00%)</title><rect x="49.8077%" y="341" width="50.0000%" height="15" fill="rgb(239,54,39)" fg:x="259" fg:w="260"/><text x="50.0577%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (260 samples, 50.00%)</title><rect x="49.8077%" y="325" width="50.0000%" height="15" fill="rgb(230,99,41)" fg:x="259" fg:w="260"/><text x="50.0577%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (260 samples, 50.00%)</title><rect x="49.8077%" y="309" width="50.0000%" height="15" fill="rgb(253,106,12)" fg:x="259" fg:w="260"/><text x="50.0577%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (260 samples, 50.00%)</title><rect x="49.8077%" y="293" width="50.0000%" height="15" fill="rgb(213,46,41)" fg:x="259" fg:w="260"/><text x="50.0577%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (260 samples, 50.00%)</title><rect x="49.8077%" y="277" width="50.0000%" height="15" fill="rgb(215,133,35)" fg:x="259" fg:w="260"/><text x="50.0577%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (260 samples, 50.00%)</title><rect x="49.8077%" y="261" width="50.0000%" height="15" fill="rgb(213,28,5)" fg:x="259" fg:w="260"/><text x="50.0577%" y="271.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (260 samples, 50.00%)</title><rect x="49.8077%" y="245" width="50.0000%" height="15" fill="rgb(215,77,49)" fg:x="259" fg:w="260"/><text x="50.0577%" y="255.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (189 samples, 36.35%)</title><rect x="63.4615%" y="229" width="36.3462%" height="15" fill="rgb(248,100,22)" fg:x="330" fg:w="189"/><text x="63.7115%" y="239.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (12 samples, 2.31%)</title><rect x="97.5000%" y="213" width="2.3077%" height="15" fill="rgb(208,67,9)" fg:x="507" fg:w="12"/><text x="97.7500%" y="223.50">t..</text></g><g><title>torpedo::renderer::render_object (10 samples, 1.92%)</title><rect x="97.8846%" y="197" width="1.9231%" height="15" fill="rgb(219,133,21)" fg:x="509" fg:w="10"/><text x="98.1346%" y="207.50">t..</text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (10 samples, 1.92%)</title><rect x="97.8846%" y="181" width="1.9231%" height="15" fill="rgb(246,46,29)" fg:x="509" fg:w="10"/><text x="98.1346%" y="191.50">r..</text></g><g><title>Unknown (10 samples, 1.92%)</title><rect x="97.8846%" y="165" width="1.9231%" height="15" fill="rgb(246,185,52)" fg:x="509" fg:w="10"/><text x="98.1346%" y="175.50">U..</text></g><g><title>Unknown (10 samples, 1.92%)</title><rect x="97.8846%" y="149" width="1.9231%" height="15" fill="rgb(252,136,11)" fg:x="509" fg:w="10"/><text x="98.1346%" y="159.50">U..</text></g><g><title>Unknown (10 samples, 1.92%)</title><rect x="97.8846%" y="133" width="1.9231%" height="15" fill="rgb(219,138,53)" fg:x="509" fg:w="10"/><text x="98.1346%" y="143.50">U..</text></g><g><title>Unknown (10 samples, 1.92%)</title><rect x="97.8846%" y="117" width="1.9231%" height="15" fill="rgb(211,51,23)" fg:x="509" fg:w="10"/><text x="98.1346%" y="127.50">U..</text></g><g><title>all (520 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="520"/><text x="0.2500%" y="511.50"></text></g><g><title>8707296384 (353 samples, 67.88%)</title><rect x="32.1154%" y="485" width="67.8846%" height="15" fill="rgb(251,222,45)" fg:x="167" fg:w="353"/><text x="32.3654%" y="495.50">8707296384</text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.19%)</title><rect x="99.8077%" y="469" width="0.1923%" height="15" fill="rgb(217,162,53)" fg:x="519" fg:w="1"/><text x="100.0577%" y="479.50"></text></g></svg></svg>