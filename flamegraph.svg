<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="677"><g><title>glfwDestroyWindow (1 samples, 0.15%)</title><rect x="0.4431%" y="245" width="0.1477%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.6931%" y="255.50"></text></g><g><title>_glfwDestroyWindowX11 (1 samples, 0.15%)</title><rect x="0.4431%" y="229" width="0.1477%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.6931%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (2 samples, 0.30%)</title><rect x="0.4431%" y="293" width="0.2954%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.6931%" y="303.50"></text></g><g><title>CloseWindow (2 samples, 0.30%)</title><rect x="0.4431%" y="277" width="0.2954%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="2"/><text x="0.6931%" y="287.50"></text></g><g><title>ClosePlatform (2 samples, 0.30%)</title><rect x="0.4431%" y="261" width="0.2954%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="0.6931%" y="271.50"></text></g><g><title>glfwTerminate (1 samples, 0.15%)</title><rect x="0.5908%" y="245" width="0.1477%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.8408%" y="255.50"></text></g><g><title>terminate (1 samples, 0.15%)</title><rect x="0.5908%" y="229" width="0.1477%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.8408%" y="239.50"></text></g><g><title>_glfwTerminateX11 (1 samples, 0.15%)</title><rect x="0.5908%" y="213" width="0.1477%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.8408%" y="223.50"></text></g><g><title>_glfwTerminateGLX (1 samples, 0.15%)</title><rect x="0.5908%" y="197" width="0.1477%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.8408%" y="207.50"></text></g><g><title>_glfwPlatformFreeModule (1 samples, 0.15%)</title><rect x="0.5908%" y="181" width="0.1477%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.8408%" y="191.50"></text></g><g><title>dlclose (1 samples, 0.15%)</title><rect x="0.5908%" y="165" width="0.1477%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.8408%" y="175.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="0.5908%" y="149" width="0.1477%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.8408%" y="159.50"></text></g><g><title>_glfwCreateContextGLX (1 samples, 0.15%)</title><rect x="0.7386%" y="197" width="0.1477%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="0.9886%" y="207.50"></text></g><g><title>chooseGLXFBConfig (1 samples, 0.15%)</title><rect x="0.7386%" y="181" width="0.1477%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="1"/><text x="0.9886%" y="191.50"></text></g><g><title>getGLXFBConfigAttrib (1 samples, 0.15%)</title><rect x="0.7386%" y="165" width="0.1477%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.9886%" y="175.50"></text></g><g><title>_glfwInitGLX (7 samples, 1.03%)</title><rect x="0.8863%" y="197" width="1.0340%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="7"/><text x="1.1363%" y="207.50"></text></g><g><title>extensionSupportedGLX (7 samples, 1.03%)</title><rect x="0.8863%" y="181" width="1.0340%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="7"/><text x="1.1363%" y="191.50"></text></g><g><title>dlopen (3 samples, 0.44%)</title><rect x="1.4771%" y="165" width="0.4431%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="3"/><text x="1.7271%" y="175.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.44%)</title><rect x="1.4771%" y="149" width="0.4431%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="3"/><text x="1.7271%" y="159.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.44%)</title><rect x="1.4771%" y="133" width="0.4431%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="3"/><text x="1.7271%" y="143.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.44%)</title><rect x="1.4771%" y="117" width="0.4431%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="3"/><text x="1.7271%" y="127.50"></text></g><g><title>glfwCreateWindow (9 samples, 1.33%)</title><rect x="0.7386%" y="229" width="1.3294%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="9"/><text x="0.9886%" y="239.50"></text></g><g><title>_glfwCreateWindowX11 (9 samples, 1.33%)</title><rect x="0.7386%" y="213" width="1.3294%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="9"/><text x="0.9886%" y="223.50"></text></g><g><title>_glfwRefreshContextAttribs (1 samples, 0.15%)</title><rect x="1.9202%" y="197" width="0.1477%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="1"/><text x="2.1702%" y="207.50"></text></g><g><title>glfwMakeContextCurrent (1 samples, 0.15%)</title><rect x="1.9202%" y="181" width="0.1477%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="2.1702%" y="191.50"></text></g><g><title>makeContextCurrentGLX (1 samples, 0.15%)</title><rect x="1.9202%" y="165" width="0.1477%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="2.1702%" y="175.50"></text></g><g><title>createHiddenCursor (1 samples, 0.15%)</title><rect x="2.8065%" y="197" width="0.1477%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="1"/><text x="3.0565%" y="207.50"></text></g><g><title>_glfwCreateNativeCursorX11 (1 samples, 0.15%)</title><rect x="2.8065%" y="181" width="0.1477%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="1"/><text x="3.0565%" y="191.50"></text></g><g><title>InitPlatform (20 samples, 2.95%)</title><rect x="0.7386%" y="245" width="2.9542%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="20"/><text x="0.9886%" y="255.50">Ini..</text></g><g><title>glfwInit (11 samples, 1.62%)</title><rect x="2.0679%" y="229" width="1.6248%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="11"/><text x="2.3179%" y="239.50"></text></g><g><title>_glfwInitX11 (11 samples, 1.62%)</title><rect x="2.0679%" y="213" width="1.6248%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="11"/><text x="2.3179%" y="223.50"></text></g><g><title>inputMethodInstantiateCallback (5 samples, 0.74%)</title><rect x="2.9542%" y="197" width="0.7386%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="5"/><text x="3.2042%" y="207.50"></text></g><g><title>raylib::core::RaylibBuilder::build (22 samples, 3.25%)</title><rect x="0.7386%" y="293" width="3.2496%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="22"/><text x="0.9886%" y="303.50">ray..</text></g><g><title>raylib::core::init_window (22 samples, 3.25%)</title><rect x="0.7386%" y="277" width="3.2496%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="22"/><text x="0.9886%" y="287.50">ray..</text></g><g><title>InitWindow (22 samples, 3.25%)</title><rect x="0.7386%" y="261" width="3.2496%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="22"/><text x="0.9886%" y="271.50">Ini..</text></g><g><title>rlglInit (2 samples, 0.30%)</title><rect x="3.6928%" y="245" width="0.2954%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="2"/><text x="3.9428%" y="255.50"></text></g><g><title>rlLoadRenderBatch (2 samples, 0.30%)</title><rect x="3.6928%" y="229" width="0.2954%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="2"/><text x="3.9428%" y="239.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_sphere (1 samples, 0.15%)</title><rect x="3.9882%" y="213" width="0.1477%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="1"/><text x="4.2382%" y="223.50"></text></g><g><title>GenMeshSphere (1 samples, 0.15%)</title><rect x="3.9882%" y="197" width="0.1477%" height="15" fill="rgb(238,167,29)" fg:x="27" fg:w="1"/><text x="4.2382%" y="207.50"></text></g><g><title>par_shapes_create_parametric_sphere (1 samples, 0.15%)</title><rect x="3.9882%" y="181" width="0.1477%" height="15" fill="rgb(232,182,51)" fg:x="27" fg:w="1"/><text x="4.2382%" y="191.50"></text></g><g><title>par_shapes_create_parametric (1 samples, 0.15%)</title><rect x="3.9882%" y="165" width="0.1477%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="4.2382%" y="175.50"></text></g><g><title>par_shapes__compute_welded_normals (1 samples, 0.15%)</title><rect x="3.9882%" y="149" width="0.1477%" height="15" fill="rgb(208,69,12)" fg:x="27" fg:w="1"/><text x="4.2382%" y="159.50"></text></g><g><title>par_shapes_compute_normals (1 samples, 0.15%)</title><rect x="3.9882%" y="133" width="0.1477%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="1"/><text x="4.2382%" y="143.50"></text></g><g><title>par_shapes__copy3 (1 samples, 0.15%)</title><rect x="3.9882%" y="117" width="0.1477%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="1"/><text x="4.2382%" y="127.50"></text></g><g><title>torpedo::level::default_setup (4 samples, 0.59%)</title><rect x="3.9882%" y="229" width="0.5908%" height="15" fill="rgb(222,207,29)" fg:x="27" fg:w="4"/><text x="4.2382%" y="239.50"></text></g><g><title>torpedo::level::init_level (3 samples, 0.44%)</title><rect x="4.1359%" y="213" width="0.4431%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="3"/><text x="4.3859%" y="223.50"></text></g><g><title>torpedo::level::Level::new (3 samples, 0.44%)</title><rect x="4.1359%" y="197" width="0.4431%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="3"/><text x="4.3859%" y="207.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (3 samples, 0.44%)</title><rect x="4.1359%" y="181" width="0.4431%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="3"/><text x="4.3859%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.44%)</title><rect x="4.1359%" y="165" width="0.4431%" height="15" fill="rgb(239,60,40)" fg:x="28" fg:w="3"/><text x="4.3859%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.44%)</title><rect x="4.1359%" y="149" width="0.4431%" height="15" fill="rgb(206,27,48)" fg:x="28" fg:w="3"/><text x="4.3859%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.44%)</title><rect x="4.1359%" y="133" width="0.4431%" height="15" fill="rgb(225,35,8)" fg:x="28" fg:w="3"/><text x="4.3859%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3 samples, 0.44%)</title><rect x="4.1359%" y="117" width="0.4431%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="3"/><text x="4.3859%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3 samples, 0.44%)</title><rect x="4.1359%" y="101" width="0.4431%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="3"/><text x="4.3859%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (5 samples, 0.74%)</title><rect x="3.9882%" y="277" width="0.7386%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="5"/><text x="4.2382%" y="287.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.74%)</title><rect x="3.9882%" y="261" width="0.7386%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="5"/><text x="4.2382%" y="271.50"></text></g><g><title>torpedo::make_test_level (5 samples, 0.74%)</title><rect x="3.9882%" y="245" width="0.7386%" height="15" fill="rgb(251,118,11)" fg:x="27" fg:w="5"/><text x="4.2382%" y="255.50"></text></g><g><title>torpedo::physics::create_box (1 samples, 0.15%)</title><rect x="4.5790%" y="229" width="0.1477%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="4.8290%" y="239.50"></text></g><g><title>torpedo::level::TransformComp::new (1 samples, 0.15%)</title><rect x="4.5790%" y="213" width="0.1477%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="4.8290%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="4.5790%" y="197" width="0.1477%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="1"/><text x="4.8290%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.15%)</title><rect x="4.5790%" y="181" width="0.1477%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="1"/><text x="4.8290%" y="191.50"></text></g><g><title>SwapScreenBuffer (14 samples, 2.07%)</title><rect x="4.7267%" y="245" width="2.0679%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="14"/><text x="4.9767%" y="255.50">S..</text></g><g><title>glfwSwapBuffers (14 samples, 2.07%)</title><rect x="4.7267%" y="229" width="2.0679%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="14"/><text x="4.9767%" y="239.50">g..</text></g><g><title>swapBuffersGLX (14 samples, 2.07%)</title><rect x="4.7267%" y="213" width="2.0679%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="14"/><text x="4.9767%" y="223.50">s..</text></g><g><title>glfwGetGamepadState (2 samples, 0.30%)</title><rect x="10.4874%" y="213" width="0.2954%" height="15" fill="rgb(222,148,37)" fg:x="71" fg:w="2"/><text x="10.7374%" y="223.50"></text></g><g><title>_glfwPlatformGetTimerFrequency (2 samples, 0.30%)</title><rect x="18.0207%" y="197" width="0.2954%" height="15" fill="rgb(234,67,33)" fg:x="122" fg:w="2"/><text x="18.2707%" y="207.50"></text></g><g><title>WaitTime (86 samples, 12.70%)</title><rect x="6.7947%" y="245" width="12.7031%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="86"/><text x="7.0447%" y="255.50">WaitTime</text></g><g><title>GetTime (69 samples, 10.19%)</title><rect x="9.3058%" y="229" width="10.1920%" height="15" fill="rgb(247,138,52)" fg:x="63" fg:w="69"/><text x="9.5558%" y="239.50">GetTime</text></g><g><title>glfwGetTime (59 samples, 8.71%)</title><rect x="10.7829%" y="213" width="8.7149%" height="15" fill="rgb(213,79,30)" fg:x="73" fg:w="59"/><text x="11.0329%" y="223.50">glfwGetTime</text></g><g><title>_glfwPlatformGetTimerValue (8 samples, 1.18%)</title><rect x="18.3161%" y="197" width="1.1817%" height="15" fill="rgb(246,177,23)" fg:x="124" fg:w="8"/><text x="18.5661%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (101 samples, 14.92%)</title><rect x="4.7267%" y="277" width="14.9188%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="101"/><text x="4.9767%" y="287.50">core::ptr::drop_in_plac..</text></g><g><title>EndDrawing (101 samples, 14.92%)</title><rect x="4.7267%" y="261" width="14.9188%" height="15" fill="rgb(216,154,8)" fg:x="32" fg:w="101"/><text x="4.9767%" y="271.50">EndDrawing</text></g><g><title>rlDrawRenderBatchActive (1 samples, 0.15%)</title><rect x="19.4978%" y="245" width="0.1477%" height="15" fill="rgb(244,35,45)" fg:x="132" fg:w="1"/><text x="19.7478%" y="255.50"></text></g><g><title>rlDrawRenderBatch (1 samples, 0.15%)</title><rect x="19.4978%" y="229" width="0.1477%" height="15" fill="rgb(251,115,12)" fg:x="132" fg:w="1"/><text x="19.7478%" y="239.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (174 samples, 25.70%)</title><rect x="19.6455%" y="261" width="25.7016%" height="15" fill="rgb(240,54,50)" fg:x="133" fg:w="174"/><text x="19.8955%" y="271.50">std::sync::poison::mutex::Mutex&lt;T&gt;::lock</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (174 samples, 25.70%)</title><rect x="19.6455%" y="245" width="25.7016%" height="15" fill="rgb(233,84,52)" fg:x="133" fg:w="174"/><text x="19.8955%" y="255.50">std::sys::sync::mutex::futex::Mutex::lock</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (174 samples, 25.70%)</title><rect x="19.6455%" y="229" width="25.7016%" height="15" fill="rgb(207,117,47)" fg:x="133" fg:w="174"/><text x="19.8955%" y="239.50">core::sync::atomic::AtomicU32::compare_ex..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (174 samples, 25.70%)</title><rect x="19.6455%" y="213" width="25.7016%" height="15" fill="rgb(249,43,39)" fg:x="133" fg:w="174"/><text x="19.8955%" y="223.50">core::sync::atomic::atomic_compare_exchan..</text></g><g><title>&lt;raylib::core::math::Matrix as core::ops::arith::MulAssign&gt;::mul_assign (2 samples, 0.30%)</title><rect x="45.4948%" y="245" width="0.2954%" height="15" fill="rgb(209,38,44)" fg:x="308" fg:w="2"/><text x="45.7448%" y="255.50"></text></g><g><title>rlDisableShader (8 samples, 1.18%)</title><rect x="46.6765%" y="181" width="1.1817%" height="15" fill="rgb(236,212,23)" fg:x="316" fg:w="8"/><text x="46.9265%" y="191.50"></text></g><g><title>rlDisableTexture (1 samples, 0.15%)</title><rect x="47.8582%" y="181" width="0.1477%" height="15" fill="rgb(242,79,21)" fg:x="324" fg:w="1"/><text x="48.1082%" y="191.50"></text></g><g><title>rlDisableVertexArray (1 samples, 0.15%)</title><rect x="48.0059%" y="181" width="0.1477%" height="15" fill="rgb(211,96,35)" fg:x="325" fg:w="1"/><text x="48.2559%" y="191.50"></text></g><g><title>rlDisableVertexBuffer (2 samples, 0.30%)</title><rect x="48.1536%" y="181" width="0.2954%" height="15" fill="rgb(253,215,40)" fg:x="326" fg:w="2"/><text x="48.4036%" y="191.50"></text></g><g><title>rlDisableVertexBufferElement (1 samples, 0.15%)</title><rect x="48.4490%" y="181" width="0.1477%" height="15" fill="rgb(211,81,21)" fg:x="328" fg:w="1"/><text x="48.6990%" y="191.50"></text></g><g><title>rlDrawVertexArrayElements (21 samples, 3.10%)</title><rect x="48.5968%" y="181" width="3.1019%" height="15" fill="rgb(208,190,38)" fg:x="329" fg:w="21"/><text x="48.8468%" y="191.50">rlD..</text></g><g><title>rlEnableShader (2 samples, 0.30%)</title><rect x="51.6987%" y="181" width="0.2954%" height="15" fill="rgb(235,213,38)" fg:x="350" fg:w="2"/><text x="51.9487%" y="191.50"></text></g><g><title>rlEnableTexture (1 samples, 0.15%)</title><rect x="51.9941%" y="181" width="0.1477%" height="15" fill="rgb(237,122,38)" fg:x="352" fg:w="1"/><text x="52.2441%" y="191.50"></text></g><g><title>rlSetMatrixModelview (1 samples, 0.15%)</title><rect x="52.1418%" y="181" width="0.1477%" height="15" fill="rgb(244,218,35)" fg:x="353" fg:w="1"/><text x="52.3918%" y="191.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (46 samples, 6.79%)</title><rect x="45.7903%" y="245" width="6.7947%" height="15" fill="rgb(240,68,47)" fg:x="310" fg:w="46"/><text x="46.0403%" y="255.50">raylib::c..</text></g><g><title>DrawModel (46 samples, 6.79%)</title><rect x="45.7903%" y="229" width="6.7947%" height="15" fill="rgb(210,16,53)" fg:x="310" fg:w="46"/><text x="46.0403%" y="239.50">DrawModel</text></g><g><title>DrawModelEx (46 samples, 6.79%)</title><rect x="45.7903%" y="213" width="6.7947%" height="15" fill="rgb(235,124,12)" fg:x="310" fg:w="46"/><text x="46.0403%" y="223.50">DrawModel..</text></g><g><title>DrawMesh (44 samples, 6.50%)</title><rect x="46.0857%" y="197" width="6.4993%" height="15" fill="rgb(224,169,11)" fg:x="312" fg:w="44"/><text x="46.3357%" y="207.50">DrawMesh</text></g><g><title>rlSetUniform (2 samples, 0.30%)</title><rect x="52.2895%" y="181" width="0.2954%" height="15" fill="rgb(250,166,2)" fg:x="354" fg:w="2"/><text x="52.5395%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.15%)</title><rect x="52.5849%" y="133" width="0.1477%" height="15" fill="rgb(242,216,29)" fg:x="356" fg:w="1"/><text x="52.8349%" y="143.50"></text></g><g><title>alloc::string::String::as_str (1 samples, 0.15%)</title><rect x="52.5849%" y="117" width="0.1477%" height="15" fill="rgb(230,116,27)" fg:x="356" fg:w="1"/><text x="52.8349%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.15%)</title><rect x="52.5849%" y="101" width="0.1477%" height="15" fill="rgb(228,99,48)" fg:x="356" fg:w="1"/><text x="52.8349%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.59%)</title><rect x="52.5849%" y="245" width="0.5908%" height="15" fill="rgb(253,11,6)" fg:x="356" fg:w="4"/><text x="52.8349%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.59%)</title><rect x="52.5849%" y="229" width="0.5908%" height="15" fill="rgb(247,143,39)" fg:x="356" fg:w="4"/><text x="52.8349%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.59%)</title><rect x="52.5849%" y="213" width="0.5908%" height="15" fill="rgb(236,97,10)" fg:x="356" fg:w="4"/><text x="52.8349%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.59%)</title><rect x="52.5849%" y="197" width="0.5908%" height="15" fill="rgb(233,208,19)" fg:x="356" fg:w="4"/><text x="52.8349%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.59%)</title><rect x="52.5849%" y="181" width="0.5908%" height="15" fill="rgb(216,164,2)" fg:x="356" fg:w="4"/><text x="52.8349%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.59%)</title><rect x="52.5849%" y="165" width="0.5908%" height="15" fill="rgb(220,129,5)" fg:x="356" fg:w="4"/><text x="52.8349%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 0.59%)</title><rect x="52.5849%" y="149" width="0.5908%" height="15" fill="rgb(242,17,10)" fg:x="356" fg:w="4"/><text x="52.8349%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.44%)</title><rect x="52.7326%" y="133" width="0.4431%" height="15" fill="rgb(242,107,0)" fg:x="357" fg:w="3"/><text x="52.9826%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.44%)</title><rect x="52.7326%" y="117" width="0.4431%" height="15" fill="rgb(251,28,31)" fg:x="357" fg:w="3"/><text x="52.9826%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.44%)</title><rect x="52.7326%" y="101" width="0.4431%" height="15" fill="rgb(233,223,10)" fg:x="357" fg:w="3"/><text x="52.9826%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.44%)</title><rect x="52.7326%" y="85" width="0.4431%" height="15" fill="rgb(215,21,27)" fg:x="357" fg:w="3"/><text x="52.9826%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.44%)</title><rect x="52.7326%" y="69" width="0.4431%" height="15" fill="rgb(232,23,21)" fg:x="357" fg:w="3"/><text x="52.9826%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.44%)</title><rect x="52.7326%" y="53" width="0.4431%" height="15" fill="rgb(244,5,23)" fg:x="357" fg:w="3"/><text x="52.9826%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.44%)</title><rect x="52.7326%" y="37" width="0.4431%" height="15" fill="rgb(226,81,46)" fg:x="357" fg:w="3"/><text x="52.9826%" y="47.50"></text></g><g><title>_start (359 samples, 53.03%)</title><rect x="0.4431%" y="565" width="53.0281%" height="15" fill="rgb(247,70,30)" fg:x="3" fg:w="359"/><text x="0.6931%" y="575.50">_start</text></g><g><title>__libc_start_main (359 samples, 53.03%)</title><rect x="0.4431%" y="549" width="53.0281%" height="15" fill="rgb(212,68,19)" fg:x="3" fg:w="359"/><text x="0.6931%" y="559.50">__libc_start_main</text></g><g><title>main (359 samples, 53.03%)</title><rect x="0.4431%" y="533" width="53.0281%" height="15" fill="rgb(240,187,13)" fg:x="3" fg:w="359"/><text x="0.6931%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (359 samples, 53.03%)</title><rect x="0.4431%" y="517" width="53.0281%" height="15" fill="rgb(223,113,26)" fg:x="3" fg:w="359"/><text x="0.6931%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (359 samples, 53.03%)</title><rect x="0.4431%" y="501" width="53.0281%" height="15" fill="rgb(206,192,2)" fg:x="3" fg:w="359"/><text x="0.6931%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (359 samples, 53.03%)</title><rect x="0.4431%" y="485" width="53.0281%" height="15" fill="rgb(241,108,4)" fg:x="3" fg:w="359"/><text x="0.6931%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (359 samples, 53.03%)</title><rect x="0.4431%" y="469" width="53.0281%" height="15" fill="rgb(247,173,49)" fg:x="3" fg:w="359"/><text x="0.6931%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (359 samples, 53.03%)</title><rect x="0.4431%" y="453" width="53.0281%" height="15" fill="rgb(224,114,35)" fg:x="3" fg:w="359"/><text x="0.6931%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (359 samples, 53.03%)</title><rect x="0.4431%" y="437" width="53.0281%" height="15" fill="rgb(245,159,27)" fg:x="3" fg:w="359"/><text x="0.6931%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (359 samples, 53.03%)</title><rect x="0.4431%" y="421" width="53.0281%" height="15" fill="rgb(245,172,44)" fg:x="3" fg:w="359"/><text x="0.6931%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (359 samples, 53.03%)</title><rect x="0.4431%" y="405" width="53.0281%" height="15" fill="rgb(236,23,11)" fg:x="3" fg:w="359"/><text x="0.6931%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (359 samples, 53.03%)</title><rect x="0.4431%" y="389" width="53.0281%" height="15" fill="rgb(205,117,38)" fg:x="3" fg:w="359"/><text x="0.6931%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (359 samples, 53.03%)</title><rect x="0.4431%" y="373" width="53.0281%" height="15" fill="rgb(237,72,25)" fg:x="3" fg:w="359"/><text x="0.6931%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (359 samples, 53.03%)</title><rect x="0.4431%" y="357" width="53.0281%" height="15" fill="rgb(244,70,9)" fg:x="3" fg:w="359"/><text x="0.6931%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (359 samples, 53.03%)</title><rect x="0.4431%" y="341" width="53.0281%" height="15" fill="rgb(217,125,39)" fg:x="3" fg:w="359"/><text x="0.6931%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (359 samples, 53.03%)</title><rect x="0.4431%" y="325" width="53.0281%" height="15" fill="rgb(235,36,10)" fg:x="3" fg:w="359"/><text x="0.6931%" y="335.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (359 samples, 53.03%)</title><rect x="0.4431%" y="309" width="53.0281%" height="15" fill="rgb(251,123,47)" fg:x="3" fg:w="359"/><text x="0.6931%" y="319.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (335 samples, 49.48%)</title><rect x="3.9882%" y="293" width="49.4830%" height="15" fill="rgb(221,13,13)" fg:x="27" fg:w="335"/><text x="4.2382%" y="303.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (229 samples, 33.83%)</title><rect x="19.6455%" y="277" width="33.8257%" height="15" fill="rgb(238,131,9)" fg:x="133" fg:w="229"/><text x="19.8955%" y="287.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (55 samples, 8.12%)</title><rect x="45.3471%" y="261" width="8.1241%" height="15" fill="rgb(211,50,8)" fg:x="307" fg:w="55"/><text x="45.5971%" y="271.50">torpedo::re..</text></g><g><title>torpedo::level::get_transform_comp (2 samples, 0.30%)</title><rect x="53.1758%" y="245" width="0.2954%" height="15" fill="rgb(245,182,24)" fg:x="360" fg:w="2"/><text x="53.4258%" y="255.50"></text></g><g><title>torpedo::level::level_check_entity (2 samples, 0.30%)</title><rect x="53.1758%" y="229" width="0.2954%" height="15" fill="rgb(242,14,37)" fg:x="360" fg:w="2"/><text x="53.4258%" y="239.50"></text></g><g><title>torpedo::level::Level::check_entity_ref (2 samples, 0.30%)</title><rect x="53.1758%" y="213" width="0.2954%" height="15" fill="rgb(246,228,12)" fg:x="360" fg:w="2"/><text x="53.4258%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[u32]&gt;&gt;&gt; (2 samples, 0.30%)</title><rect x="53.1758%" y="197" width="0.2954%" height="15" fill="rgb(213,55,15)" fg:x="360" fg:w="2"/><text x="53.4258%" y="207.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="53.1758%" y="181" width="0.2954%" height="15" fill="rgb(209,9,3)" fg:x="360" fg:w="2"/><text x="53.4258%" y="191.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read_unlock (2 samples, 0.30%)</title><rect x="53.1758%" y="165" width="0.2954%" height="15" fill="rgb(230,59,30)" fg:x="360" fg:w="2"/><text x="53.4258%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2 samples, 0.30%)</title><rect x="53.1758%" y="149" width="0.2954%" height="15" fill="rgb(209,121,21)" fg:x="360" fg:w="2"/><text x="53.4258%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.30%)</title><rect x="53.1758%" y="133" width="0.2954%" height="15" fill="rgb(220,109,13)" fg:x="360" fg:w="2"/><text x="53.4258%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.89%)</title><rect x="70.0148%" y="341" width="0.8863%" height="15" fill="rgb(232,18,1)" fg:x="474" fg:w="6"/><text x="70.2648%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.89%)</title><rect x="70.0148%" y="325" width="0.8863%" height="15" fill="rgb(215,41,42)" fg:x="474" fg:w="6"/><text x="70.2648%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.89%)</title><rect x="70.0148%" y="309" width="0.8863%" height="15" fill="rgb(224,123,36)" fg:x="474" fg:w="6"/><text x="70.2648%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.89%)</title><rect x="70.0148%" y="293" width="0.8863%" height="15" fill="rgb(240,125,3)" fg:x="474" fg:w="6"/><text x="70.2648%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.89%)</title><rect x="70.0148%" y="277" width="0.8863%" height="15" fill="rgb(205,98,50)" fg:x="474" fg:w="6"/><text x="70.2648%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.89%)</title><rect x="70.0148%" y="261" width="0.8863%" height="15" fill="rgb(205,185,37)" fg:x="474" fg:w="6"/><text x="70.2648%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6 samples, 0.89%)</title><rect x="70.0148%" y="245" width="0.8863%" height="15" fill="rgb(238,207,15)" fg:x="474" fg:w="6"/><text x="70.2648%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6 samples, 0.89%)</title><rect x="70.0148%" y="229" width="0.8863%" height="15" fill="rgb(213,199,42)" fg:x="474" fg:w="6"/><text x="70.2648%" y="239.50"></text></g><g><title>alloc::raw_vec::layout_array (6 samples, 0.89%)</title><rect x="70.0148%" y="213" width="0.8863%" height="15" fill="rgb(235,201,11)" fg:x="474" fg:w="6"/><text x="70.2648%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6 samples, 0.89%)</title><rect x="70.0148%" y="197" width="0.8863%" height="15" fill="rgb(207,46,11)" fg:x="474" fg:w="6"/><text x="70.2648%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (6 samples, 0.89%)</title><rect x="70.0148%" y="181" width="0.8863%" height="15" fill="rgb(241,35,35)" fg:x="474" fg:w="6"/><text x="70.2648%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (6 samples, 0.89%)</title><rect x="70.0148%" y="165" width="0.8863%" height="15" fill="rgb(243,32,47)" fg:x="474" fg:w="6"/><text x="70.2648%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (6 samples, 0.89%)</title><rect x="70.0148%" y="149" width="0.8863%" height="15" fill="rgb(247,202,23)" fg:x="474" fg:w="6"/><text x="70.2648%" y="159.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (8 samples, 1.18%)</title><rect x="70.0148%" y="357" width="1.1817%" height="15" fill="rgb(219,102,11)" fg:x="474" fg:w="8"/><text x="70.2648%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.30%)</title><rect x="70.9010%" y="341" width="0.2954%" height="15" fill="rgb(243,110,44)" fg:x="480" fg:w="2"/><text x="71.1510%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.30%)</title><rect x="70.9010%" y="325" width="0.2954%" height="15" fill="rgb(222,74,54)" fg:x="480" fg:w="2"/><text x="71.1510%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.30%)</title><rect x="70.9010%" y="309" width="0.2954%" height="15" fill="rgb(216,99,12)" fg:x="480" fg:w="2"/><text x="71.1510%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.59%)</title><rect x="71.1965%" y="261" width="0.5908%" height="15" fill="rgb(226,22,26)" fg:x="482" fg:w="4"/><text x="71.4465%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.59%)</title><rect x="71.1965%" y="245" width="0.5908%" height="15" fill="rgb(217,163,10)" fg:x="482" fg:w="4"/><text x="71.4465%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.59%)</title><rect x="71.1965%" y="229" width="0.5908%" height="15" fill="rgb(213,25,53)" fg:x="482" fg:w="4"/><text x="71.4465%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (4 samples, 0.59%)</title><rect x="71.1965%" y="213" width="0.5908%" height="15" fill="rgb(252,105,26)" fg:x="482" fg:w="4"/><text x="71.4465%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.59%)</title><rect x="71.1965%" y="197" width="0.5908%" height="15" fill="rgb(220,39,43)" fg:x="482" fg:w="4"/><text x="71.4465%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.59%)</title><rect x="71.1965%" y="181" width="0.5908%" height="15" fill="rgb(229,68,48)" fg:x="482" fg:w="4"/><text x="71.4465%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.74%)</title><rect x="71.1965%" y="357" width="0.7386%" height="15" fill="rgb(252,8,32)" fg:x="482" fg:w="5"/><text x="71.4465%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.74%)</title><rect x="71.1965%" y="341" width="0.7386%" height="15" fill="rgb(223,20,43)" fg:x="482" fg:w="5"/><text x="71.4465%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.74%)</title><rect x="71.1965%" y="325" width="0.7386%" height="15" fill="rgb(229,81,49)" fg:x="482" fg:w="5"/><text x="71.4465%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.74%)</title><rect x="71.1965%" y="309" width="0.7386%" height="15" fill="rgb(236,28,36)" fg:x="482" fg:w="5"/><text x="71.4465%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.74%)</title><rect x="71.1965%" y="293" width="0.7386%" height="15" fill="rgb(249,185,26)" fg:x="482" fg:w="5"/><text x="71.4465%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5 samples, 0.74%)</title><rect x="71.1965%" y="277" width="0.7386%" height="15" fill="rgb(249,174,33)" fg:x="482" fg:w="5"/><text x="71.4465%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="71.7873%" y="261" width="0.1477%" height="15" fill="rgb(233,201,37)" fg:x="486" fg:w="1"/><text x="72.0373%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="71.7873%" y="245" width="0.1477%" height="15" fill="rgb(221,78,26)" fg:x="486" fg:w="1"/><text x="72.0373%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.15%)</title><rect x="71.7873%" y="229" width="0.1477%" height="15" fill="rgb(250,127,30)" fg:x="486" fg:w="1"/><text x="72.0373%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="71.7873%" y="213" width="0.1477%" height="15" fill="rgb(230,49,44)" fg:x="486" fg:w="1"/><text x="72.0373%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="71.7873%" y="197" width="0.1477%" height="15" fill="rgb(229,67,23)" fg:x="486" fg:w="1"/><text x="72.0373%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="71.7873%" y="181" width="0.1477%" height="15" fill="rgb(249,83,47)" fg:x="486" fg:w="1"/><text x="72.0373%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="71.7873%" y="165" width="0.1477%" height="15" fill="rgb(215,43,3)" fg:x="486" fg:w="1"/><text x="72.0373%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="71.7873%" y="149" width="0.1477%" height="15" fill="rgb(238,154,13)" fg:x="486" fg:w="1"/><text x="72.0373%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="71.7873%" y="133" width="0.1477%" height="15" fill="rgb(219,56,2)" fg:x="486" fg:w="1"/><text x="72.0373%" y="143.50"></text></g><g><title>__rdl_realloc (1 samples, 0.15%)</title><rect x="71.7873%" y="117" width="0.1477%" height="15" fill="rgb(233,0,4)" fg:x="486" fg:w="1"/><text x="72.0373%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.15%)</title><rect x="71.7873%" y="101" width="0.1477%" height="15" fill="rgb(235,30,7)" fg:x="486" fg:w="1"/><text x="72.0373%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.44%)</title><rect x="71.9350%" y="341" width="0.4431%" height="15" fill="rgb(250,79,13)" fg:x="487" fg:w="3"/><text x="72.1850%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.44%)</title><rect x="71.9350%" y="325" width="0.4431%" height="15" fill="rgb(211,146,34)" fg:x="487" fg:w="3"/><text x="72.1850%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.44%)</title><rect x="71.9350%" y="309" width="0.4431%" height="15" fill="rgb(228,22,38)" fg:x="487" fg:w="3"/><text x="72.1850%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.15%)</title><rect x="72.2304%" y="293" width="0.1477%" height="15" fill="rgb(235,168,5)" fg:x="489" fg:w="1"/><text x="72.4804%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (4 samples, 0.59%)</title><rect x="71.9350%" y="357" width="0.5908%" height="15" fill="rgb(221,155,16)" fg:x="487" fg:w="4"/><text x="72.1850%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.15%)</title><rect x="72.3781%" y="341" width="0.1477%" height="15" fill="rgb(215,215,53)" fg:x="490" fg:w="1"/><text x="72.6281%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.15%)</title><rect x="72.3781%" y="325" width="0.1477%" height="15" fill="rgb(223,4,10)" fg:x="490" fg:w="1"/><text x="72.6281%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.15%)</title><rect x="72.3781%" y="309" width="0.1477%" height="15" fill="rgb(234,103,6)" fg:x="490" fg:w="1"/><text x="72.6281%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="72.3781%" y="293" width="0.1477%" height="15" fill="rgb(227,97,0)" fg:x="490" fg:w="1"/><text x="72.6281%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.15%)</title><rect x="72.3781%" y="277" width="0.1477%" height="15" fill="rgb(234,150,53)" fg:x="490" fg:w="1"/><text x="72.6281%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 4.14%)</title><rect x="72.5258%" y="325" width="4.1359%" height="15" fill="rgb(228,201,54)" fg:x="491" fg:w="28"/><text x="72.7758%" y="335.50">&lt;core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.59%)</title><rect x="76.6617%" y="293" width="0.5908%" height="15" fill="rgb(222,22,37)" fg:x="519" fg:w="4"/><text x="76.9117%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.59%)</title><rect x="76.6617%" y="277" width="0.5908%" height="15" fill="rgb(237,53,32)" fg:x="519" fg:w="4"/><text x="76.9117%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.59%)</title><rect x="76.6617%" y="261" width="0.5908%" height="15" fill="rgb(233,25,53)" fg:x="519" fg:w="4"/><text x="76.9117%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.59%)</title><rect x="76.6617%" y="245" width="0.5908%" height="15" fill="rgb(210,40,34)" fg:x="519" fg:w="4"/><text x="76.9117%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (35 samples, 5.17%)</title><rect x="72.5258%" y="357" width="5.1699%" height="15" fill="rgb(241,220,44)" fg:x="491" fg:w="35"/><text x="72.7758%" y="367.50">torped..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (35 samples, 5.17%)</title><rect x="72.5258%" y="341" width="5.1699%" height="15" fill="rgb(235,28,35)" fg:x="491" fg:w="35"/><text x="72.7758%" y="351.50">torped..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (7 samples, 1.03%)</title><rect x="76.6617%" y="325" width="1.0340%" height="15" fill="rgb(210,56,17)" fg:x="519" fg:w="7"/><text x="76.9117%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (7 samples, 1.03%)</title><rect x="76.6617%" y="309" width="1.0340%" height="15" fill="rgb(224,130,29)" fg:x="519" fg:w="7"/><text x="76.9117%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (3 samples, 0.44%)</title><rect x="77.2526%" y="293" width="0.4431%" height="15" fill="rgb(235,212,8)" fg:x="523" fg:w="3"/><text x="77.5026%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (3 samples, 0.44%)</title><rect x="77.2526%" y="277" width="0.4431%" height="15" fill="rgb(223,33,50)" fg:x="523" fg:w="3"/><text x="77.5026%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (3 samples, 0.44%)</title><rect x="77.2526%" y="261" width="0.4431%" height="15" fill="rgb(219,149,13)" fg:x="523" fg:w="3"/><text x="77.5026%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.44%)</title><rect x="77.2526%" y="245" width="0.4431%" height="15" fill="rgb(250,156,29)" fg:x="523" fg:w="3"/><text x="77.5026%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.44%)</title><rect x="77.2526%" y="229" width="0.4431%" height="15" fill="rgb(216,193,19)" fg:x="523" fg:w="3"/><text x="77.5026%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (3 samples, 0.44%)</title><rect x="77.2526%" y="213" width="0.4431%" height="15" fill="rgb(216,135,14)" fg:x="523" fg:w="3"/><text x="77.5026%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.44%)</title><rect x="77.6957%" y="341" width="0.4431%" height="15" fill="rgb(241,47,5)" fg:x="526" fg:w="3"/><text x="77.9457%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (3 samples, 0.44%)</title><rect x="77.6957%" y="325" width="0.4431%" height="15" fill="rgb(233,42,35)" fg:x="526" fg:w="3"/><text x="77.9457%" y="335.50"></text></g><g><title>core::ptr::read (3 samples, 0.44%)</title><rect x="77.6957%" y="309" width="0.4431%" height="15" fill="rgb(231,13,6)" fg:x="526" fg:w="3"/><text x="77.9457%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="78.1388%" y="341" width="0.1477%" height="15" fill="rgb(207,181,40)" fg:x="529" fg:w="1"/><text x="78.3888%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="78.1388%" y="325" width="0.1477%" height="15" fill="rgb(254,173,49)" fg:x="529" fg:w="1"/><text x="78.3888%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.15%)</title><rect x="78.1388%" y="309" width="0.1477%" height="15" fill="rgb(221,1,38)" fg:x="529" fg:w="1"/><text x="78.3888%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="78.1388%" y="293" width="0.1477%" height="15" fill="rgb(206,124,46)" fg:x="529" fg:w="1"/><text x="78.3888%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="78.1388%" y="277" width="0.1477%" height="15" fill="rgb(249,21,11)" fg:x="529" fg:w="1"/><text x="78.3888%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.15%)</title><rect x="78.1388%" y="261" width="0.1477%" height="15" fill="rgb(222,201,40)" fg:x="529" fg:w="1"/><text x="78.3888%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.18%)</title><rect x="78.2866%" y="325" width="1.1817%" height="15" fill="rgb(235,61,29)" fg:x="530" fg:w="8"/><text x="78.5366%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 1.18%)</title><rect x="78.2866%" y="309" width="1.1817%" height="15" fill="rgb(219,207,3)" fg:x="530" fg:w="8"/><text x="78.5366%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="79.4682%" y="325" width="0.1477%" height="15" fill="rgb(222,56,46)" fg:x="538" fg:w="1"/><text x="79.7182%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="79.4682%" y="309" width="0.1477%" height="15" fill="rgb(239,76,54)" fg:x="538" fg:w="1"/><text x="79.7182%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.15%)</title><rect x="79.4682%" y="293" width="0.1477%" height="15" fill="rgb(231,124,27)" fg:x="538" fg:w="1"/><text x="79.7182%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="79.4682%" y="277" width="0.1477%" height="15" fill="rgb(249,195,6)" fg:x="538" fg:w="1"/><text x="79.7182%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="79.4682%" y="261" width="0.1477%" height="15" fill="rgb(237,174,47)" fg:x="538" fg:w="1"/><text x="79.7182%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="79.4682%" y="245" width="0.1477%" height="15" fill="rgb(206,201,31)" fg:x="538" fg:w="1"/><text x="79.7182%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (2 samples, 0.30%)</title><rect x="79.6160%" y="325" width="0.2954%" height="15" fill="rgb(231,57,52)" fg:x="539" fg:w="2"/><text x="79.8660%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="79.6160%" y="309" width="0.2954%" height="15" fill="rgb(248,177,22)" fg:x="539" fg:w="2"/><text x="79.8660%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (2 samples, 0.30%)</title><rect x="79.6160%" y="293" width="0.2954%" height="15" fill="rgb(215,211,37)" fg:x="539" fg:w="2"/><text x="79.8660%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="79.6160%" y="277" width="0.2954%" height="15" fill="rgb(241,128,51)" fg:x="539" fg:w="2"/><text x="79.8660%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (2 samples, 0.30%)</title><rect x="79.6160%" y="261" width="0.2954%" height="15" fill="rgb(227,165,31)" fg:x="539" fg:w="2"/><text x="79.8660%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="79.6160%" y="245" width="0.2954%" height="15" fill="rgb(228,167,24)" fg:x="539" fg:w="2"/><text x="79.8660%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.30%)</title><rect x="79.6160%" y="229" width="0.2954%" height="15" fill="rgb(228,143,12)" fg:x="539" fg:w="2"/><text x="79.8660%" y="239.50"></text></g><g><title>CheckCollisionBoxes (2 samples, 0.30%)</title><rect x="79.9114%" y="293" width="0.2954%" height="15" fill="rgb(249,149,8)" fg:x="541" fg:w="2"/><text x="80.1614%" y="303.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (3 samples, 0.44%)</title><rect x="79.9114%" y="325" width="0.4431%" height="15" fill="rgb(243,35,44)" fg:x="541" fg:w="3"/><text x="80.1614%" y="335.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (3 samples, 0.44%)</title><rect x="79.9114%" y="309" width="0.4431%" height="15" fill="rgb(246,89,9)" fg:x="541" fg:w="3"/><text x="80.1614%" y="319.50"></text></g><g><title>DrawModelEx (1 samples, 0.15%)</title><rect x="80.2068%" y="293" width="0.1477%" height="15" fill="rgb(233,213,13)" fg:x="543" fg:w="1"/><text x="80.4568%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.44%)</title><rect x="80.3545%" y="309" width="0.4431%" height="15" fill="rgb(233,141,41)" fg:x="544" fg:w="3"/><text x="80.6045%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.44%)</title><rect x="80.3545%" y="293" width="0.4431%" height="15" fill="rgb(239,167,4)" fg:x="544" fg:w="3"/><text x="80.6045%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3 samples, 0.44%)</title><rect x="80.3545%" y="277" width="0.4431%" height="15" fill="rgb(209,217,16)" fg:x="544" fg:w="3"/><text x="80.6045%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.44%)</title><rect x="80.3545%" y="261" width="0.4431%" height="15" fill="rgb(219,88,35)" fg:x="544" fg:w="3"/><text x="80.6045%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.44%)</title><rect x="80.3545%" y="245" width="0.4431%" height="15" fill="rgb(220,193,23)" fg:x="544" fg:w="3"/><text x="80.6045%" y="255.50"></text></g><g><title>alloc::raw_vec::layout_array (3 samples, 0.44%)</title><rect x="80.3545%" y="229" width="0.4431%" height="15" fill="rgb(230,90,52)" fg:x="544" fg:w="3"/><text x="80.6045%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3 samples, 0.44%)</title><rect x="80.3545%" y="213" width="0.4431%" height="15" fill="rgb(252,106,19)" fg:x="544" fg:w="3"/><text x="80.6045%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (3 samples, 0.44%)</title><rect x="80.3545%" y="197" width="0.4431%" height="15" fill="rgb(206,74,20)" fg:x="544" fg:w="3"/><text x="80.6045%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (3 samples, 0.44%)</title><rect x="80.3545%" y="181" width="0.4431%" height="15" fill="rgb(230,138,44)" fg:x="544" fg:w="3"/><text x="80.6045%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (4 samples, 0.59%)</title><rect x="80.7976%" y="309" width="0.5908%" height="15" fill="rgb(235,182,43)" fg:x="547" fg:w="4"/><text x="81.0476%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.59%)</title><rect x="80.7976%" y="293" width="0.5908%" height="15" fill="rgb(242,16,51)" fg:x="547" fg:w="4"/><text x="81.0476%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (4 samples, 0.59%)</title><rect x="80.7976%" y="277" width="0.5908%" height="15" fill="rgb(248,9,4)" fg:x="547" fg:w="4"/><text x="81.0476%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.59%)</title><rect x="80.7976%" y="261" width="0.5908%" height="15" fill="rgb(210,31,22)" fg:x="547" fg:w="4"/><text x="81.0476%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (4 samples, 0.59%)</title><rect x="80.7976%" y="245" width="0.5908%" height="15" fill="rgb(239,54,39)" fg:x="547" fg:w="4"/><text x="81.0476%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.59%)</title><rect x="80.7976%" y="229" width="0.5908%" height="15" fill="rgb(230,99,41)" fg:x="547" fg:w="4"/><text x="81.0476%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.59%)</title><rect x="80.7976%" y="213" width="0.5908%" height="15" fill="rgb(253,106,12)" fg:x="547" fg:w="4"/><text x="81.0476%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4 samples, 0.59%)</title><rect x="80.7976%" y="197" width="0.5908%" height="15" fill="rgb(213,46,41)" fg:x="547" fg:w="4"/><text x="81.0476%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (4 samples, 0.59%)</title><rect x="80.7976%" y="181" width="0.5908%" height="15" fill="rgb(215,133,35)" fg:x="547" fg:w="4"/><text x="81.0476%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul::precondition_check (4 samples, 0.59%)</title><rect x="80.7976%" y="165" width="0.5908%" height="15" fill="rgb(213,28,5)" fg:x="547" fg:w="4"/><text x="81.0476%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4 samples, 0.59%)</title><rect x="80.7976%" y="149" width="0.5908%" height="15" fill="rgb(215,77,49)" fg:x="547" fg:w="4"/><text x="81.0476%" y="159.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (12 samples, 1.77%)</title><rect x="81.3885%" y="309" width="1.7725%" height="15" fill="rgb(248,100,22)" fg:x="551" fg:w="12"/><text x="81.6385%" y="319.50">t..</text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (12 samples, 1.77%)</title><rect x="81.3885%" y="293" width="1.7725%" height="15" fill="rgb(208,67,9)" fg:x="551" fg:w="12"/><text x="81.6385%" y="303.50">r..</text></g><g><title>CheckCollisionBoxes (3 samples, 0.44%)</title><rect x="82.7179%" y="277" width="0.4431%" height="15" fill="rgb(219,133,21)" fg:x="560" fg:w="3"/><text x="82.9679%" y="287.50"></text></g><g><title>torpedo::physics::Octree::query_box (41 samples, 6.06%)</title><rect x="77.6957%" y="357" width="6.0561%" height="15" fill="rgb(246,46,29)" fg:x="526" fg:w="41"/><text x="77.9457%" y="367.50">torpedo:..</text></g><g><title>torpedo::physics::Octree::query_box (37 samples, 5.47%)</title><rect x="78.2866%" y="341" width="5.4653%" height="15" fill="rgb(246,185,52)" fg:x="530" fg:w="37"/><text x="78.5366%" y="351.50">torpedo..</text></g><g><title>torpedo::physics::Octree::query_box (23 samples, 3.40%)</title><rect x="80.3545%" y="325" width="3.3973%" height="15" fill="rgb(252,136,11)" fg:x="544" fg:w="23"/><text x="80.6045%" y="335.50">tor..</text></g><g><title>torpedo::physics::Octree::query_box (4 samples, 0.59%)</title><rect x="83.1610%" y="309" width="0.5908%" height="15" fill="rgb(219,138,53)" fg:x="563" fg:w="4"/><text x="83.4110%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.59%)</title><rect x="83.1610%" y="293" width="0.5908%" height="15" fill="rgb(211,51,23)" fg:x="563" fg:w="4"/><text x="83.4110%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.59%)</title><rect x="83.1610%" y="277" width="0.5908%" height="15" fill="rgb(247,221,28)" fg:x="563" fg:w="4"/><text x="83.4110%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.59%)</title><rect x="83.1610%" y="261" width="0.5908%" height="15" fill="rgb(251,222,45)" fg:x="563" fg:w="4"/><text x="83.4110%" y="271.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.59%)</title><rect x="83.1610%" y="245" width="0.5908%" height="15" fill="rgb(217,162,53)" fg:x="563" fg:w="4"/><text x="83.4110%" y="255.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 0.59%)</title><rect x="83.1610%" y="229" width="0.5908%" height="15" fill="rgb(229,93,14)" fg:x="563" fg:w="4"/><text x="83.4110%" y="239.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (1 samples, 0.15%)</title><rect x="83.7518%" y="341" width="0.1477%" height="15" fill="rgb(209,67,49)" fg:x="567" fg:w="1"/><text x="84.0018%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.15%)</title><rect x="83.7518%" y="325" width="0.1477%" height="15" fill="rgb(213,87,29)" fg:x="567" fg:w="1"/><text x="84.0018%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="83.7518%" y="309" width="0.1477%" height="15" fill="rgb(205,151,52)" fg:x="567" fg:w="1"/><text x="84.0018%" y="319.50"></text></g><g><title>torpedo::physics::PhysicsComp::bb (5 samples, 0.74%)</title><rect x="83.7518%" y="357" width="0.7386%" height="15" fill="rgb(253,215,39)" fg:x="567" fg:w="5"/><text x="84.0018%" y="367.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (4 samples, 0.59%)</title><rect x="83.8996%" y="341" width="0.5908%" height="15" fill="rgb(221,220,41)" fg:x="568" fg:w="4"/><text x="84.1496%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (4 samples, 0.59%)</title><rect x="83.8996%" y="325" width="0.5908%" height="15" fill="rgb(218,133,21)" fg:x="568" fg:w="4"/><text x="84.1496%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (4 samples, 0.59%)</title><rect x="83.8996%" y="309" width="0.5908%" height="15" fill="rgb(221,193,43)" fg:x="568" fg:w="4"/><text x="84.1496%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (4 samples, 0.59%)</title><rect x="83.8996%" y="293" width="0.5908%" height="15" fill="rgb(240,128,52)" fg:x="568" fg:w="4"/><text x="84.1496%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.30%)</title><rect x="84.4904%" y="197" width="0.2954%" height="15" fill="rgb(253,114,12)" fg:x="572" fg:w="2"/><text x="84.7404%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.30%)</title><rect x="84.4904%" y="181" width="0.2954%" height="15" fill="rgb(215,223,47)" fg:x="572" fg:w="2"/><text x="84.7404%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.30%)</title><rect x="84.4904%" y="165" width="0.2954%" height="15" fill="rgb(248,225,23)" fg:x="572" fg:w="2"/><text x="84.7404%" y="175.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (12 samples, 1.77%)</title><rect x="84.4904%" y="341" width="1.7725%" height="15" fill="rgb(250,108,0)" fg:x="572" fg:w="12"/><text x="84.7404%" y="351.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (12 samples, 1.77%)</title><rect x="84.4904%" y="325" width="1.7725%" height="15" fill="rgb(228,208,7)" fg:x="572" fg:w="12"/><text x="84.7404%" y="335.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 1.77%)</title><rect x="84.4904%" y="309" width="1.7725%" height="15" fill="rgb(244,45,10)" fg:x="572" fg:w="12"/><text x="84.7404%" y="319.50">a..</text></g><g><title>alloc::slice::hack::to_vec (12 samples, 1.77%)</title><rect x="84.4904%" y="293" width="1.7725%" height="15" fill="rgb(207,125,25)" fg:x="572" fg:w="12"/><text x="84.7404%" y="303.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 1.77%)</title><rect x="84.4904%" y="277" width="1.7725%" height="15" fill="rgb(210,195,18)" fg:x="572" fg:w="12"/><text x="84.7404%" y="287.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 1.77%)</title><rect x="84.4904%" y="261" width="1.7725%" height="15" fill="rgb(249,80,12)" fg:x="572" fg:w="12"/><text x="84.7404%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 1.77%)</title><rect x="84.4904%" y="245" width="1.7725%" height="15" fill="rgb(221,65,9)" fg:x="572" fg:w="12"/><text x="84.7404%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12 samples, 1.77%)</title><rect x="84.4904%" y="229" width="1.7725%" height="15" fill="rgb(235,49,36)" fg:x="572" fg:w="12"/><text x="84.7404%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12 samples, 1.77%)</title><rect x="84.4904%" y="213" width="1.7725%" height="15" fill="rgb(225,32,20)" fg:x="572" fg:w="12"/><text x="84.7404%" y="223.50">a..</text></g><g><title>alloc::raw_vec::layout_array (10 samples, 1.48%)</title><rect x="84.7858%" y="197" width="1.4771%" height="15" fill="rgb(215,141,46)" fg:x="574" fg:w="10"/><text x="85.0358%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (10 samples, 1.48%)</title><rect x="84.7858%" y="181" width="1.4771%" height="15" fill="rgb(250,160,47)" fg:x="574" fg:w="10"/><text x="85.0358%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (10 samples, 1.48%)</title><rect x="84.7858%" y="165" width="1.4771%" height="15" fill="rgb(216,222,40)" fg:x="574" fg:w="10"/><text x="85.0358%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (10 samples, 1.48%)</title><rect x="84.7858%" y="149" width="1.4771%" height="15" fill="rgb(234,217,39)" fg:x="574" fg:w="10"/><text x="85.0358%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (10 samples, 1.48%)</title><rect x="84.7858%" y="133" width="1.4771%" height="15" fill="rgb(207,178,40)" fg:x="574" fg:w="10"/><text x="85.0358%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.30%)</title><rect x="85.9675%" y="117" width="0.2954%" height="15" fill="rgb(221,136,13)" fg:x="582" fg:w="2"/><text x="86.2175%" y="127.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (13 samples, 1.92%)</title><rect x="86.2629%" y="325" width="1.9202%" height="15" fill="rgb(249,199,10)" fg:x="584" fg:w="13"/><text x="86.5129%" y="335.50">t..</text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (13 samples, 1.92%)</title><rect x="86.2629%" y="309" width="1.9202%" height="15" fill="rgb(249,222,13)" fg:x="584" fg:w="13"/><text x="86.5129%" y="319.50">r..</text></g><g><title>CheckCollisionBoxes (13 samples, 1.92%)</title><rect x="86.2629%" y="293" width="1.9202%" height="15" fill="rgb(244,185,38)" fg:x="584" fg:w="13"/><text x="86.5129%" y="303.50">C..</text></g><g><title>raylib::core::math::Vector4::to_matrix (13 samples, 1.92%)</title><rect x="89.0694%" y="309" width="1.9202%" height="15" fill="rgb(236,202,9)" fg:x="603" fg:w="13"/><text x="89.3194%" y="319.50">r..</text></g><g><title>torpedo::math::Vector4::to_matrix (40 samples, 5.91%)</title><rect x="88.1832%" y="325" width="5.9084%" height="15" fill="rgb(250,229,37)" fg:x="597" fg:w="40"/><text x="88.4332%" y="335.50">torpedo:..</text></g><g><title>torpedo::math::Vector4::as_rl_vec (21 samples, 3.10%)</title><rect x="90.9897%" y="309" width="3.1019%" height="15" fill="rgb(206,174,23)" fg:x="616" fg:w="21"/><text x="91.2397%" y="319.50">tor..</text></g><g><title>torpedo::physics::check_collision_comps (66 samples, 9.75%)</title><rect x="84.4904%" y="357" width="9.7489%" height="15" fill="rgb(211,33,43)" fg:x="572" fg:w="66"/><text x="84.7404%" y="367.50">torpedo::physi..</text></g><g><title>torpedo::physics::col::check_collision (54 samples, 7.98%)</title><rect x="86.2629%" y="341" width="7.9764%" height="15" fill="rgb(245,58,50)" fg:x="584" fg:w="54"/><text x="86.5129%" y="351.50">torpedo::ph..</text></g><g><title>torpedo::physics::col::get_normals (1 samples, 0.15%)</title><rect x="94.0916%" y="325" width="0.1477%" height="15" fill="rgb(244,68,36)" fg:x="637" fg:w="1"/><text x="94.3416%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="94.0916%" y="309" width="0.1477%" height="15" fill="rgb(232,229,15)" fg:x="637" fg:w="1"/><text x="94.3416%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="94.0916%" y="293" width="0.1477%" height="15" fill="rgb(254,30,23)" fg:x="637" fg:w="1"/><text x="94.3416%" y="303.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (2 samples, 0.30%)</title><rect x="94.2393%" y="341" width="0.2954%" height="15" fill="rgb(235,160,14)" fg:x="638" fg:w="2"/><text x="94.4893%" y="351.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (2 samples, 0.30%)</title><rect x="94.2393%" y="325" width="0.2954%" height="15" fill="rgb(212,155,44)" fg:x="638" fg:w="2"/><text x="94.4893%" y="335.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (1 samples, 0.15%)</title><rect x="94.5347%" y="341" width="0.1477%" height="15" fill="rgb(226,2,50)" fg:x="640" fg:w="1"/><text x="94.7847%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.15%)</title><rect x="94.5347%" y="325" width="0.1477%" height="15" fill="rgb(234,177,6)" fg:x="640" fg:w="1"/><text x="94.7847%" y="335.50"></text></g><g><title>torpedo::math::Vector3::transform_with (1 samples, 0.15%)</title><rect x="94.5347%" y="309" width="0.1477%" height="15" fill="rgb(217,24,9)" fg:x="640" fg:w="1"/><text x="94.7847%" y="319.50"></text></g><g><title>raylib::core::math::Vector3::transform_with (1 samples, 0.15%)</title><rect x="94.5347%" y="293" width="0.1477%" height="15" fill="rgb(220,13,46)" fg:x="640" fg:w="1"/><text x="94.7847%" y="303.50"></text></g><g><title>torpedo::level::level_loop::{{closure}} (280 samples, 41.36%)</title><rect x="53.4712%" y="389" width="41.3589%" height="15" fill="rgb(239,221,27)" fg:x="362" fg:w="280"/><text x="53.7212%" y="399.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (280 samples, 41.36%)</title><rect x="53.4712%" y="373" width="41.3589%" height="15" fill="rgb(222,198,25)" fg:x="362" fg:w="280"/><text x="53.7212%" y="383.50">torpedo::physics::update</text></g><g><title>torpedo::physics::make_octree (4 samples, 0.59%)</title><rect x="94.2393%" y="357" width="0.5908%" height="15" fill="rgb(211,99,13)" fg:x="638" fg:w="4"/><text x="94.4893%" y="367.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (1 samples, 0.15%)</title><rect x="94.6824%" y="341" width="0.1477%" height="15" fill="rgb(232,111,31)" fg:x="641" fg:w="1"/><text x="94.9324%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.15%)</title><rect x="94.6824%" y="325" width="0.1477%" height="15" fill="rgb(245,82,37)" fg:x="641" fg:w="1"/><text x="94.9324%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="94.6824%" y="309" width="0.1477%" height="15" fill="rgb(227,149,46)" fg:x="641" fg:w="1"/><text x="94.9324%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="94.6824%" y="293" width="0.1477%" height="15" fill="rgb(218,36,50)" fg:x="641" fg:w="1"/><text x="94.9324%" y="303.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.15%)</title><rect x="94.9778%" y="325" width="0.1477%" height="15" fill="rgb(226,80,48)" fg:x="643" fg:w="1"/><text x="95.2278%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.15%)</title><rect x="94.9778%" y="309" width="0.1477%" height="15" fill="rgb(238,224,15)" fg:x="643" fg:w="1"/><text x="95.2278%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.15%)</title><rect x="94.9778%" y="293" width="0.1477%" height="15" fill="rgb(241,136,10)" fg:x="643" fg:w="1"/><text x="95.2278%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.15%)</title><rect x="94.9778%" y="277" width="0.1477%" height="15" fill="rgb(208,32,45)" fg:x="643" fg:w="1"/><text x="95.2278%" y="287.50"></text></g><g><title>torpedo::arena::Arena::alloc (2 samples, 0.30%)</title><rect x="94.9778%" y="357" width="0.2954%" height="15" fill="rgb(207,135,9)" fg:x="643" fg:w="2"/><text x="95.2278%" y="367.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (2 samples, 0.30%)</title><rect x="94.9778%" y="341" width="0.2954%" height="15" fill="rgb(206,86,44)" fg:x="643" fg:w="2"/><text x="95.2278%" y="351.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.15%)</title><rect x="95.1256%" y="325" width="0.1477%" height="15" fill="rgb(245,177,15)" fg:x="644" fg:w="1"/><text x="95.3756%" y="335.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.15%)</title><rect x="95.1256%" y="309" width="0.1477%" height="15" fill="rgb(206,64,50)" fg:x="644" fg:w="1"/><text x="95.3756%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.15%)</title><rect x="95.1256%" y="293" width="0.1477%" height="15" fill="rgb(234,36,40)" fg:x="644" fg:w="1"/><text x="95.3756%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.15%)</title><rect x="95.1256%" y="277" width="0.1477%" height="15" fill="rgb(213,64,8)" fg:x="644" fg:w="1"/><text x="95.3756%" y="287.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (4 samples, 0.59%)</title><rect x="95.2733%" y="357" width="0.5908%" height="15" fill="rgb(210,75,36)" fg:x="645" fg:w="4"/><text x="95.5233%" y="367.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (4 samples, 0.59%)</title><rect x="95.2733%" y="341" width="0.5908%" height="15" fill="rgb(229,88,21)" fg:x="645" fg:w="4"/><text x="95.5233%" y="351.50"></text></g><g><title>CheckCollisionBoxes (4 samples, 0.59%)</title><rect x="95.2733%" y="325" width="0.5908%" height="15" fill="rgb(252,204,47)" fg:x="645" fg:w="4"/><text x="95.5233%" y="335.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (3 samples, 0.44%)</title><rect x="95.8641%" y="357" width="0.4431%" height="15" fill="rgb(208,77,27)" fg:x="649" fg:w="3"/><text x="96.1141%" y="367.50"></text></g><g><title>torpedo::physics::Collision::max (3 samples, 0.44%)</title><rect x="95.8641%" y="341" width="0.4431%" height="15" fill="rgb(221,76,26)" fg:x="649" fg:w="3"/><text x="96.1141%" y="351.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (3 samples, 0.44%)</title><rect x="95.8641%" y="325" width="0.4431%" height="15" fill="rgb(225,139,18)" fg:x="649" fg:w="3"/><text x="96.1141%" y="335.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (3 samples, 0.44%)</title><rect x="95.8641%" y="309" width="0.4431%" height="15" fill="rgb(230,137,11)" fg:x="649" fg:w="3"/><text x="96.1141%" y="319.50"></text></g><g><title>torpedo::math::Vector3::transform_with (3 samples, 0.44%)</title><rect x="96.3072%" y="325" width="0.4431%" height="15" fill="rgb(212,28,1)" fg:x="652" fg:w="3"/><text x="96.5572%" y="335.50"></text></g><g><title>raylib::core::math::Vector3::transform_with (3 samples, 0.44%)</title><rect x="96.3072%" y="309" width="0.4431%" height="15" fill="rgb(248,164,17)" fg:x="652" fg:w="3"/><text x="96.5572%" y="319.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (5 samples, 0.74%)</title><rect x="96.3072%" y="357" width="0.7386%" height="15" fill="rgb(222,171,42)" fg:x="652" fg:w="5"/><text x="96.5572%" y="367.50"></text></g><g><title>torpedo::physics::Collision::max (5 samples, 0.74%)</title><rect x="96.3072%" y="341" width="0.7386%" height="15" fill="rgb(243,84,45)" fg:x="652" fg:w="5"/><text x="96.5572%" y="351.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (2 samples, 0.30%)</title><rect x="96.7504%" y="325" width="0.2954%" height="15" fill="rgb(252,49,23)" fg:x="655" fg:w="2"/><text x="97.0004%" y="335.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (2 samples, 0.30%)</title><rect x="96.7504%" y="309" width="0.2954%" height="15" fill="rgb(215,19,7)" fg:x="655" fg:w="2"/><text x="97.0004%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::length (1 samples, 0.15%)</title><rect x="96.8981%" y="293" width="0.1477%" height="15" fill="rgb(238,81,41)" fg:x="656" fg:w="1"/><text x="97.1481%" y="303.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (1 samples, 0.15%)</title><rect x="96.8981%" y="277" width="0.1477%" height="15" fill="rgb(210,199,37)" fg:x="656" fg:w="1"/><text x="97.1481%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="97.1935%" y="341" width="0.1477%" height="15" fill="rgb(244,192,49)" fg:x="658" fg:w="1"/><text x="97.4435%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.15%)</title><rect x="97.1935%" y="325" width="0.1477%" height="15" fill="rgb(226,211,11)" fg:x="658" fg:w="1"/><text x="97.4435%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.15%)</title><rect x="97.1935%" y="309" width="0.1477%" height="15" fill="rgb(236,162,54)" fg:x="658" fg:w="1"/><text x="97.4435%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="97.1935%" y="293" width="0.1477%" height="15" fill="rgb(220,229,9)" fg:x="658" fg:w="1"/><text x="97.4435%" y="303.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (1 samples, 0.15%)</title><rect x="97.1935%" y="277" width="0.1477%" height="15" fill="rgb(250,87,22)" fg:x="658" fg:w="1"/><text x="97.4435%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt; (1 samples, 0.15%)</title><rect x="97.3412%" y="341" width="0.1477%" height="15" fill="rgb(239,43,17)" fg:x="659" fg:w="1"/><text x="97.5912%" y="351.50"></text></g><g><title> 8]&gt; (1 samples, 0.15%)</title><rect x="97.3412%" y="325" width="0.1477%" height="15" fill="rgb(231,177,25)" fg:x="659" fg:w="1"/><text x="97.5912%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.15%)</title><rect x="97.3412%" y="309" width="0.1477%" height="15" fill="rgb(219,179,1)" fg:x="659" fg:w="1"/><text x="97.5912%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.15%)</title><rect x="97.3412%" y="293" width="0.1477%" height="15" fill="rgb(238,219,53)" fg:x="659" fg:w="1"/><text x="97.5912%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="97.3412%" y="277" width="0.1477%" height="15" fill="rgb(232,167,36)" fg:x="659" fg:w="1"/><text x="97.5912%" y="287.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.15%)</title><rect x="97.3412%" y="261" width="0.1477%" height="15" fill="rgb(244,19,51)" fg:x="659" fg:w="1"/><text x="97.5912%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.15%)</title><rect x="97.3412%" y="245" width="0.1477%" height="15" fill="rgb(224,6,22)" fg:x="659" fg:w="1"/><text x="97.5912%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc (3 samples, 0.44%)</title><rect x="97.4889%" y="341" width="0.4431%" height="15" fill="rgb(224,145,5)" fg:x="660" fg:w="3"/><text x="97.7389%" y="351.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (3 samples, 0.44%)</title><rect x="97.4889%" y="325" width="0.4431%" height="15" fill="rgb(234,130,49)" fg:x="660" fg:w="3"/><text x="97.7389%" y="335.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.30%)</title><rect x="97.6366%" y="309" width="0.2954%" height="15" fill="rgb(254,6,2)" fg:x="661" fg:w="2"/><text x="97.8866%" y="319.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (2 samples, 0.30%)</title><rect x="97.6366%" y="293" width="0.2954%" height="15" fill="rgb(208,96,46)" fg:x="661" fg:w="2"/><text x="97.8866%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.30%)</title><rect x="97.6366%" y="277" width="0.2954%" height="15" fill="rgb(239,3,39)" fg:x="661" fg:w="2"/><text x="97.8866%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.30%)</title><rect x="97.6366%" y="261" width="0.2954%" height="15" fill="rgb(233,210,1)" fg:x="661" fg:w="2"/><text x="97.8866%" y="271.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (5 samples, 0.74%)</title><rect x="97.9321%" y="341" width="0.7386%" height="15" fill="rgb(244,137,37)" fg:x="663" fg:w="5"/><text x="98.1821%" y="351.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (5 samples, 0.74%)</title><rect x="97.9321%" y="325" width="0.7386%" height="15" fill="rgb(240,136,2)" fg:x="663" fg:w="5"/><text x="98.1821%" y="335.50"></text></g><g><title>CheckCollisionBoxes (2 samples, 0.30%)</title><rect x="98.3752%" y="309" width="0.2954%" height="15" fill="rgb(239,18,37)" fg:x="666" fg:w="2"/><text x="98.6252%" y="319.50"></text></g><g><title>torpedo::math::Vector3::transform_with (1 samples, 0.15%)</title><rect x="98.6706%" y="309" width="0.1477%" height="15" fill="rgb(218,185,22)" fg:x="668" fg:w="1"/><text x="98.9206%" y="319.50"></text></g><g><title>raylib::core::math::Vector3::transform_with (1 samples, 0.15%)</title><rect x="98.6706%" y="293" width="0.1477%" height="15" fill="rgb(225,218,4)" fg:x="668" fg:w="1"/><text x="98.9206%" y="303.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (4 samples, 0.59%)</title><rect x="98.6706%" y="341" width="0.5908%" height="15" fill="rgb(230,182,32)" fg:x="668" fg:w="4"/><text x="98.9206%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (4 samples, 0.59%)</title><rect x="98.6706%" y="325" width="0.5908%" height="15" fill="rgb(242,56,43)" fg:x="668" fg:w="4"/><text x="98.9206%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (3 samples, 0.44%)</title><rect x="98.8183%" y="309" width="0.4431%" height="15" fill="rgb(233,99,24)" fg:x="669" fg:w="3"/><text x="99.0683%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (3 samples, 0.44%)</title><rect x="98.8183%" y="293" width="0.4431%" height="15" fill="rgb(234,209,42)" fg:x="669" fg:w="3"/><text x="99.0683%" y="303.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (1 samples, 0.15%)</title><rect x="99.2614%" y="341" width="0.1477%" height="15" fill="rgb(227,7,12)" fg:x="672" fg:w="1"/><text x="99.5114%" y="351.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.15%)</title><rect x="99.2614%" y="325" width="0.1477%" height="15" fill="rgb(245,203,43)" fg:x="672" fg:w="1"/><text x="99.5114%" y="335.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="99.2614%" y="309" width="0.1477%" height="15" fill="rgb(238,205,33)" fg:x="672" fg:w="1"/><text x="99.5114%" y="319.50"></text></g><g><title>raylib::core::math::Vector4::to_matrix (1 samples, 0.15%)</title><rect x="99.2614%" y="293" width="0.1477%" height="15" fill="rgb(231,56,7)" fg:x="672" fg:w="1"/><text x="99.5114%" y="303.50"></text></g><g><title>all (677 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="677"/><text x="0.2500%" y="607.50"></text></g><g><title>torpedo (677 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="677"/><text x="0.2500%" y="591.50">torpedo</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (315 samples, 46.53%)</title><rect x="53.4712%" y="565" width="46.5288%" height="15" fill="rgb(241,149,10)" fg:x="362" fg:w="315"/><text x="53.7212%" y="575.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (315 samples, 46.53%)</title><rect x="53.4712%" y="549" width="46.5288%" height="15" fill="rgb(249,206,44)" fg:x="362" fg:w="315"/><text x="53.7212%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (315 samples, 46.53%)</title><rect x="53.4712%" y="533" width="46.5288%" height="15" fill="rgb(251,153,30)" fg:x="362" fg:w="315"/><text x="53.7212%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (315 samples, 46.53%)</title><rect x="53.4712%" y="517" width="46.5288%" height="15" fill="rgb(239,152,38)" fg:x="362" fg:w="315"/><text x="53.7212%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (315 samples, 46.53%)</title><rect x="53.4712%" y="501" width="46.5288%" height="15" fill="rgb(249,139,47)" fg:x="362" fg:w="315"/><text x="53.7212%" y="511.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (315 samples, 46.53%)</title><rect x="53.4712%" y="485" width="46.5288%" height="15" fill="rgb(244,64,35)" fg:x="362" fg:w="315"/><text x="53.7212%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (315 samples, 46.53%)</title><rect x="53.4712%" y="469" width="46.5288%" height="15" fill="rgb(216,46,15)" fg:x="362" fg:w="315"/><text x="53.7212%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (315 samples, 46.53%)</title><rect x="53.4712%" y="453" width="46.5288%" height="15" fill="rgb(250,74,19)" fg:x="362" fg:w="315"/><text x="53.7212%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (315 samples, 46.53%)</title><rect x="53.4712%" y="437" width="46.5288%" height="15" fill="rgb(249,42,33)" fg:x="362" fg:w="315"/><text x="53.7212%" y="447.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (315 samples, 46.53%)</title><rect x="53.4712%" y="421" width="46.5288%" height="15" fill="rgb(242,149,17)" fg:x="362" fg:w="315"/><text x="53.7212%" y="431.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (315 samples, 46.53%)</title><rect x="53.4712%" y="405" width="46.5288%" height="15" fill="rgb(244,29,21)" fg:x="362" fg:w="315"/><text x="53.7212%" y="415.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (35 samples, 5.17%)</title><rect x="94.8301%" y="389" width="5.1699%" height="15" fill="rgb(220,130,37)" fg:x="642" fg:w="35"/><text x="95.0801%" y="399.50">torped..</text></g><g><title>torpedo::physics::make_octree (35 samples, 5.17%)</title><rect x="94.8301%" y="373" width="5.1699%" height="15" fill="rgb(211,67,2)" fg:x="642" fg:w="35"/><text x="95.0801%" y="383.50">torped..</text></g><g><title>torpedo::physics::make_octree (20 samples, 2.95%)</title><rect x="97.0458%" y="357" width="2.9542%" height="15" fill="rgb(235,68,52)" fg:x="657" fg:w="20"/><text x="97.2958%" y="367.50">tor..</text></g><g><title>torpedo::physics::make_octree (4 samples, 0.59%)</title><rect x="99.4092%" y="341" width="0.5908%" height="15" fill="rgb(246,142,3)" fg:x="673" fg:w="4"/><text x="99.6592%" y="351.50"></text></g></svg></svg>