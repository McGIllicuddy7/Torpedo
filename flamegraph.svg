<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="516"><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="0.1938%" y="469" width="0.1938%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.4438%" y="479.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="0.1938%" y="453" width="0.1938%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4438%" y="463.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="0.1938%" y="437" width="0.1938%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4438%" y="447.50"></text></g><g><title>6095810560 (3 samples, 0.58%)</title><rect x="0.0000%" y="501" width="0.5814%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (3 samples, 0.58%)</title><rect x="0.0000%" y="485" width="0.5814%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="495.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="0.3876%" y="469" width="0.1938%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.6376%" y="479.50"></text></g><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="0.7752%" y="469" width="0.1938%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="1.0252%" y="479.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="0.7752%" y="453" width="0.1938%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="1.0252%" y="463.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="0.7752%" y="437" width="0.1938%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="1.0252%" y="447.50"></text></g><g><title>6096384000 (3 samples, 0.58%)</title><rect x="0.5814%" y="501" width="0.5814%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="3"/><text x="0.8314%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (2 samples, 0.39%)</title><rect x="0.7752%" y="485" width="0.3876%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="1.0252%" y="495.50"></text></g><g><title>_mig_get_reply_port (1 samples, 0.19%)</title><rect x="0.9690%" y="469" width="0.1938%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="1.2190%" y="479.50"></text></g><g><title>6096957440 (3 samples, 0.58%)</title><rect x="1.1628%" y="501" width="0.5814%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="3"/><text x="1.4128%" y="511.50"></text></g><g><title>__pthread_deallocate (3 samples, 0.58%)</title><rect x="1.1628%" y="485" width="0.5814%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="3"/><text x="1.4128%" y="495.50"></text></g><g><title>_mach_reply_port (3 samples, 0.58%)</title><rect x="1.1628%" y="469" width="0.5814%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="3"/><text x="1.4128%" y="479.50"></text></g><g><title>_thread_get_state (3 samples, 0.58%)</title><rect x="1.1628%" y="453" width="0.5814%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="3"/><text x="1.4128%" y="463.50"></text></g><g><title>_proc_regionfilename (3 samples, 0.58%)</title><rect x="1.1628%" y="437" width="0.5814%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="3"/><text x="1.4128%" y="447.50"></text></g><g><title>6097530880 (3 samples, 0.58%)</title><rect x="1.7442%" y="501" width="0.5814%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="3"/><text x="1.9942%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (3 samples, 0.58%)</title><rect x="1.7442%" y="485" width="0.5814%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="3"/><text x="1.9942%" y="495.50"></text></g><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="2.1318%" y="469" width="0.1938%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="1"/><text x="2.3818%" y="479.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="2.1318%" y="453" width="0.1938%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="1"/><text x="2.3818%" y="463.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="2.1318%" y="437" width="0.1938%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="2.3818%" y="447.50"></text></g><g><title>6098677760 (1 samples, 0.19%)</title><rect x="2.3256%" y="501" width="0.1938%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="1"/><text x="2.5756%" y="511.50"></text></g><g><title>__platform_memchr (1 samples, 0.19%)</title><rect x="2.3256%" y="485" width="0.1938%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="2.5756%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="2.5194%" y="261" width="0.1938%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="2.7694%" y="271.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="2.5194%" y="245" width="0.1938%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="2.7694%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="2.5194%" y="229" width="0.1938%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="2.7694%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="2.5194%" y="213" width="0.1938%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="2.7694%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="2.5194%" y="197" width="0.1938%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="2.7694%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="2.5194%" y="181" width="0.1938%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="2.7694%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="2.5194%" y="165" width="0.1938%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1"/><text x="2.7694%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="2.5194%" y="149" width="0.1938%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="2.7694%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="2.5194%" y="133" width="0.1938%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="1"/><text x="2.7694%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.19%)</title><rect x="2.5194%" y="117" width="0.1938%" height="15" fill="rgb(254,191,54)" fg:x="13" fg:w="1"/><text x="2.7694%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="2.5194%" y="101" width="0.1938%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="1"/><text x="2.7694%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="2.5194%" y="85" width="0.1938%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="1"/><text x="2.7694%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="2.5194%" y="69" width="0.1938%" height="15" fill="rgb(226,3,54)" fg:x="13" fg:w="1"/><text x="2.7694%" y="79.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="2.7132%" y="261" width="0.5814%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="3"/><text x="2.9632%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="2.7132%" y="245" width="0.5814%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="3"/><text x="2.9632%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.58%)</title><rect x="2.7132%" y="229" width="0.5814%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="3"/><text x="2.9632%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.58%)</title><rect x="2.7132%" y="213" width="0.5814%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="3"/><text x="2.9632%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.58%)</title><rect x="2.7132%" y="197" width="0.5814%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="3"/><text x="2.9632%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.58%)</title><rect x="2.7132%" y="181" width="0.5814%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="3"/><text x="2.9632%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.58%)</title><rect x="2.7132%" y="165" width="0.5814%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="3"/><text x="2.9632%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="3.2946%" y="245" width="0.1938%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="1"/><text x="3.5446%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="3.2946%" y="229" width="0.1938%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="1"/><text x="3.5446%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="3.2946%" y="213" width="0.1938%" height="15" fill="rgb(218,138,4)" fg:x="17" fg:w="1"/><text x="3.5446%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="3.2946%" y="197" width="0.1938%" height="15" fill="rgb(250,191,14)" fg:x="17" fg:w="1"/><text x="3.5446%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2946%" y="181" width="0.1938%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="1"/><text x="3.5446%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2946%" y="165" width="0.1938%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="1"/><text x="3.5446%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="3.2946%" y="149" width="0.1938%" height="15" fill="rgb(225,35,8)" fg:x="17" fg:w="1"/><text x="3.5446%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.19%)</title><rect x="3.2946%" y="133" width="0.1938%" height="15" fill="rgb(250,213,24)" fg:x="17" fg:w="1"/><text x="3.5446%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="3.2946%" y="117" width="0.1938%" height="15" fill="rgb(247,123,22)" fg:x="17" fg:w="1"/><text x="3.5446%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="3.2946%" y="101" width="0.1938%" height="15" fill="rgb(231,138,38)" fg:x="17" fg:w="1"/><text x="3.5446%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="3.2946%" y="85" width="0.1938%" height="15" fill="rgb(231,145,46)" fg:x="17" fg:w="1"/><text x="3.5446%" y="95.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (2 samples, 0.39%)</title><rect x="3.2946%" y="261" width="0.3876%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="2"/><text x="3.5446%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="3.4884%" y="245" width="0.1938%" height="15" fill="rgb(217,147,25)" fg:x="18" fg:w="1"/><text x="3.7384%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="3.4884%" y="229" width="0.1938%" height="15" fill="rgb(247,81,37)" fg:x="18" fg:w="1"/><text x="3.7384%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.39%)</title><rect x="3.6822%" y="261" width="0.3876%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="2"/><text x="3.9322%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.39%)</title><rect x="3.6822%" y="245" width="0.3876%" height="15" fill="rgb(227,1,9)" fg:x="19" fg:w="2"/><text x="3.9322%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.39%)</title><rect x="3.6822%" y="229" width="0.3876%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="2"/><text x="3.9322%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.39%)</title><rect x="3.6822%" y="213" width="0.3876%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="2"/><text x="3.9322%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.39%)</title><rect x="3.6822%" y="197" width="0.3876%" height="15" fill="rgb(210,229,1)" fg:x="19" fg:w="2"/><text x="3.9322%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.39%)</title><rect x="3.6822%" y="181" width="0.3876%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="2"/><text x="3.9322%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.39%)</title><rect x="3.6822%" y="165" width="0.3876%" height="15" fill="rgb(234,67,33)" fg:x="19" fg:w="2"/><text x="3.9322%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.39%)</title><rect x="3.6822%" y="149" width="0.3876%" height="15" fill="rgb(247,98,35)" fg:x="19" fg:w="2"/><text x="3.9322%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.39%)</title><rect x="3.6822%" y="133" width="0.3876%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="2"/><text x="3.9322%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.39%)</title><rect x="3.6822%" y="117" width="0.3876%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="2"/><text x="3.9322%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.39%)</title><rect x="3.6822%" y="101" width="0.3876%" height="15" fill="rgb(246,177,23)" fg:x="19" fg:w="2"/><text x="3.9322%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="3.6822%" y="85" width="0.3876%" height="15" fill="rgb(230,62,27)" fg:x="19" fg:w="2"/><text x="3.9322%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="4.0698%" y="261" width="0.1938%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="4.3198%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="4.0698%" y="245" width="0.1938%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="1"/><text x="4.3198%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="4.0698%" y="229" width="0.1938%" height="15" fill="rgb(251,115,12)" fg:x="21" fg:w="1"/><text x="4.3198%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="4.2636%" y="261" width="0.1938%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="1"/><text x="4.5136%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="4.2636%" y="245" width="0.1938%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="1"/><text x="4.5136%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.19%)</title><rect x="4.2636%" y="229" width="0.1938%" height="15" fill="rgb(207,117,47)" fg:x="22" fg:w="1"/><text x="4.5136%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="4.2636%" y="213" width="0.1938%" height="15" fill="rgb(249,43,39)" fg:x="22" fg:w="1"/><text x="4.5136%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="4.2636%" y="197" width="0.1938%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="1"/><text x="4.5136%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="4.2636%" y="181" width="0.1938%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="1"/><text x="4.5136%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (6 samples, 1.16%)</title><rect x="4.4574%" y="261" width="1.1628%" height="15" fill="rgb(242,79,21)" fg:x="23" fg:w="6"/><text x="4.7074%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (6 samples, 1.16%)</title><rect x="4.4574%" y="245" width="1.1628%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="6"/><text x="4.7074%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (6 samples, 1.16%)</title><rect x="4.4574%" y="229" width="1.1628%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="6"/><text x="4.7074%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.16%)</title><rect x="4.4574%" y="213" width="1.1628%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="6"/><text x="4.7074%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.16%)</title><rect x="4.4574%" y="197" width="1.1628%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="6"/><text x="4.7074%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.16%)</title><rect x="4.4574%" y="181" width="1.1628%" height="15" fill="rgb(235,213,38)" fg:x="23" fg:w="6"/><text x="4.7074%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.58%)</title><rect x="5.6202%" y="229" width="0.5814%" height="15" fill="rgb(237,122,38)" fg:x="29" fg:w="3"/><text x="5.8702%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.58%)</title><rect x="5.6202%" y="213" width="0.5814%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="3"/><text x="5.8702%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.58%)</title><rect x="5.6202%" y="197" width="0.5814%" height="15" fill="rgb(240,68,47)" fg:x="29" fg:w="3"/><text x="5.8702%" y="207.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.19%)</title><rect x="6.0078%" y="181" width="0.1938%" height="15" fill="rgb(210,16,53)" fg:x="31" fg:w="1"/><text x="6.2578%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.19%)</title><rect x="6.0078%" y="165" width="0.1938%" height="15" fill="rgb(235,124,12)" fg:x="31" fg:w="1"/><text x="6.2578%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.19%)</title><rect x="6.0078%" y="149" width="0.1938%" height="15" fill="rgb(224,169,11)" fg:x="31" fg:w="1"/><text x="6.2578%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.19%)</title><rect x="6.0078%" y="133" width="0.1938%" height="15" fill="rgb(250,166,2)" fg:x="31" fg:w="1"/><text x="6.2578%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.19%)</title><rect x="6.0078%" y="117" width="0.1938%" height="15" fill="rgb(242,216,29)" fg:x="31" fg:w="1"/><text x="6.2578%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="6.0078%" y="101" width="0.1938%" height="15" fill="rgb(230,116,27)" fg:x="31" fg:w="1"/><text x="6.2578%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (9 samples, 1.74%)</title><rect x="5.6202%" y="261" width="1.7442%" height="15" fill="rgb(228,99,48)" fg:x="29" fg:w="9"/><text x="5.8702%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (9 samples, 1.74%)</title><rect x="5.6202%" y="245" width="1.7442%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="9"/><text x="5.8702%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (6 samples, 1.16%)</title><rect x="6.2016%" y="229" width="1.1628%" height="15" fill="rgb(247,143,39)" fg:x="32" fg:w="6"/><text x="6.4516%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (6 samples, 1.16%)</title><rect x="6.2016%" y="213" width="1.1628%" height="15" fill="rgb(236,97,10)" fg:x="32" fg:w="6"/><text x="6.4516%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (6 samples, 1.16%)</title><rect x="6.2016%" y="197" width="1.1628%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="6"/><text x="6.4516%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.16%)</title><rect x="6.2016%" y="181" width="1.1628%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="6"/><text x="6.4516%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (2 samples, 0.39%)</title><rect x="7.3643%" y="261" width="0.3876%" height="15" fill="rgb(220,129,5)" fg:x="38" fg:w="2"/><text x="7.6143%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (2 samples, 0.39%)</title><rect x="7.3643%" y="245" width="0.3876%" height="15" fill="rgb(242,17,10)" fg:x="38" fg:w="2"/><text x="7.6143%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.39%)</title><rect x="7.3643%" y="229" width="0.3876%" height="15" fill="rgb(242,107,0)" fg:x="38" fg:w="2"/><text x="7.6143%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.39%)</title><rect x="7.3643%" y="213" width="0.3876%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="2"/><text x="7.6143%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.39%)</title><rect x="7.3643%" y="197" width="0.3876%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="2"/><text x="7.6143%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.39%)</title><rect x="7.7519%" y="245" width="0.3876%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="2"/><text x="8.0019%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.39%)</title><rect x="7.7519%" y="229" width="0.3876%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="2"/><text x="8.0019%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.39%)</title><rect x="7.7519%" y="213" width="0.3876%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="2"/><text x="8.0019%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (6 samples, 1.16%)</title><rect x="7.7519%" y="261" width="1.1628%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="6"/><text x="8.0019%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (4 samples, 0.78%)</title><rect x="8.1395%" y="245" width="0.7752%" height="15" fill="rgb(247,70,30)" fg:x="42" fg:w="4"/><text x="8.3895%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (4 samples, 0.78%)</title><rect x="8.1395%" y="229" width="0.7752%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="4"/><text x="8.3895%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (4 samples, 0.78%)</title><rect x="8.1395%" y="213" width="0.7752%" height="15" fill="rgb(240,187,13)" fg:x="42" fg:w="4"/><text x="8.3895%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.78%)</title><rect x="8.1395%" y="197" width="0.7752%" height="15" fill="rgb(223,113,26)" fg:x="42" fg:w="4"/><text x="8.3895%" y="207.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.97%)</title><rect x="8.9147%" y="261" width="0.9690%" height="15" fill="rgb(206,192,2)" fg:x="46" fg:w="5"/><text x="9.1647%" y="271.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (5 samples, 0.97%)</title><rect x="8.9147%" y="245" width="0.9690%" height="15" fill="rgb(241,108,4)" fg:x="46" fg:w="5"/><text x="9.1647%" y="255.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (5 samples, 0.97%)</title><rect x="8.9147%" y="229" width="0.9690%" height="15" fill="rgb(247,173,49)" fg:x="46" fg:w="5"/><text x="9.1647%" y="239.50"></text></g><g><title>__pthread_main_thread_init (5 samples, 0.97%)</title><rect x="8.9147%" y="213" width="0.9690%" height="15" fill="rgb(224,114,35)" fg:x="46" fg:w="5"/><text x="9.1647%" y="223.50"></text></g><g><title>_pthread_rwlock_wrlock (5 samples, 0.97%)</title><rect x="8.9147%" y="197" width="0.9690%" height="15" fill="rgb(245,159,27)" fg:x="46" fg:w="5"/><text x="9.1647%" y="207.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.39%)</title><rect x="9.8837%" y="213" width="0.3876%" height="15" fill="rgb(245,172,44)" fg:x="51" fg:w="2"/><text x="10.1337%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="10.0775%" y="197" width="0.1938%" height="15" fill="rgb(236,23,11)" fg:x="52" fg:w="1"/><text x="10.3275%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="10.0775%" y="181" width="0.1938%" height="15" fill="rgb(205,117,38)" fg:x="52" fg:w="1"/><text x="10.3275%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="10.0775%" y="165" width="0.1938%" height="15" fill="rgb(237,72,25)" fg:x="52" fg:w="1"/><text x="10.3275%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="10.0775%" y="149" width="0.1938%" height="15" fill="rgb(244,70,9)" fg:x="52" fg:w="1"/><text x="10.3275%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.19%)</title><rect x="10.0775%" y="133" width="0.1938%" height="15" fill="rgb(217,125,39)" fg:x="52" fg:w="1"/><text x="10.3275%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="10.0775%" y="117" width="0.1938%" height="15" fill="rgb(235,36,10)" fg:x="52" fg:w="1"/><text x="10.3275%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.58%)</title><rect x="9.8837%" y="229" width="0.5814%" height="15" fill="rgb(251,123,47)" fg:x="51" fg:w="3"/><text x="10.1337%" y="239.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="10.2713%" y="213" width="0.1938%" height="15" fill="rgb(221,13,13)" fg:x="53" fg:w="1"/><text x="10.5213%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.19%)</title><rect x="10.2713%" y="197" width="0.1938%" height="15" fill="rgb(238,131,9)" fg:x="53" fg:w="1"/><text x="10.5213%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.19%)</title><rect x="10.2713%" y="181" width="0.1938%" height="15" fill="rgb(211,50,8)" fg:x="53" fg:w="1"/><text x="10.5213%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.19%)</title><rect x="10.2713%" y="165" width="0.1938%" height="15" fill="rgb(245,182,24)" fg:x="53" fg:w="1"/><text x="10.5213%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.19%)</title><rect x="10.2713%" y="149" width="0.1938%" height="15" fill="rgb(242,14,37)" fg:x="53" fg:w="1"/><text x="10.5213%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="10.2713%" y="133" width="0.1938%" height="15" fill="rgb(246,228,12)" fg:x="53" fg:w="1"/><text x="10.5213%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="10.2713%" y="117" width="0.1938%" height="15" fill="rgb(213,55,15)" fg:x="53" fg:w="1"/><text x="10.5213%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.19%)</title><rect x="10.2713%" y="101" width="0.1938%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="1"/><text x="10.5213%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.19%)</title><rect x="10.2713%" y="85" width="0.1938%" height="15" fill="rgb(230,59,30)" fg:x="53" fg:w="1"/><text x="10.5213%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.19%)</title><rect x="10.2713%" y="69" width="0.1938%" height="15" fill="rgb(209,121,21)" fg:x="53" fg:w="1"/><text x="10.5213%" y="79.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.19%)</title><rect x="10.2713%" y="53" width="0.1938%" height="15" fill="rgb(220,109,13)" fg:x="53" fg:w="1"/><text x="10.5213%" y="63.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.19%)</title><rect x="10.2713%" y="37" width="0.1938%" height="15" fill="rgb(232,18,1)" fg:x="53" fg:w="1"/><text x="10.5213%" y="47.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (4 samples, 0.78%)</title><rect x="9.8837%" y="261" width="0.7752%" height="15" fill="rgb(215,41,42)" fg:x="51" fg:w="4"/><text x="10.1337%" y="271.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (4 samples, 0.78%)</title><rect x="9.8837%" y="245" width="0.7752%" height="15" fill="rgb(224,123,36)" fg:x="51" fg:w="4"/><text x="10.1337%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.19%)</title><rect x="10.4651%" y="229" width="0.1938%" height="15" fill="rgb(240,125,3)" fg:x="54" fg:w="1"/><text x="10.7151%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.19%)</title><rect x="10.4651%" y="213" width="0.1938%" height="15" fill="rgb(205,98,50)" fg:x="54" fg:w="1"/><text x="10.7151%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.19%)</title><rect x="10.4651%" y="197" width="0.1938%" height="15" fill="rgb(205,185,37)" fg:x="54" fg:w="1"/><text x="10.7151%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.19%)</title><rect x="10.4651%" y="181" width="0.1938%" height="15" fill="rgb(238,207,15)" fg:x="54" fg:w="1"/><text x="10.7151%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.19%)</title><rect x="10.4651%" y="165" width="0.1938%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="1"/><text x="10.7151%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="10.4651%" y="149" width="0.1938%" height="15" fill="rgb(235,201,11)" fg:x="54" fg:w="1"/><text x="10.7151%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.39%)</title><rect x="10.6589%" y="245" width="0.3876%" height="15" fill="rgb(207,46,11)" fg:x="55" fg:w="2"/><text x="10.9089%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.39%)</title><rect x="10.6589%" y="229" width="0.3876%" height="15" fill="rgb(241,35,35)" fg:x="55" fg:w="2"/><text x="10.9089%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.39%)</title><rect x="10.6589%" y="213" width="0.3876%" height="15" fill="rgb(243,32,47)" fg:x="55" fg:w="2"/><text x="10.9089%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.19%)</title><rect x="10.8527%" y="197" width="0.1938%" height="15" fill="rgb(247,202,23)" fg:x="56" fg:w="1"/><text x="11.1027%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="10.8527%" y="181" width="0.1938%" height="15" fill="rgb(219,102,11)" fg:x="56" fg:w="1"/><text x="11.1027%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="10.8527%" y="165" width="0.1938%" height="15" fill="rgb(243,110,44)" fg:x="56" fg:w="1"/><text x="11.1027%" y="175.50"></text></g><g><title>__platform_strcpy (1 samples, 0.19%)</title><rect x="10.8527%" y="149" width="0.1938%" height="15" fill="rgb(222,74,54)" fg:x="56" fg:w="1"/><text x="11.1027%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="11.0465%" y="229" width="0.1938%" height="15" fill="rgb(216,99,12)" fg:x="57" fg:w="1"/><text x="11.2965%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="11.0465%" y="213" width="0.1938%" height="15" fill="rgb(226,22,26)" fg:x="57" fg:w="1"/><text x="11.2965%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.19%)</title><rect x="11.0465%" y="197" width="0.1938%" height="15" fill="rgb(217,163,10)" fg:x="57" fg:w="1"/><text x="11.2965%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (1 samples, 0.19%)</title><rect x="11.2403%" y="229" width="0.1938%" height="15" fill="rgb(213,25,53)" fg:x="58" fg:w="1"/><text x="11.4903%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="11.2403%" y="213" width="0.1938%" height="15" fill="rgb(252,105,26)" fg:x="58" fg:w="1"/><text x="11.4903%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (1 samples, 0.19%)</title><rect x="11.2403%" y="197" width="0.1938%" height="15" fill="rgb(220,39,43)" fg:x="58" fg:w="1"/><text x="11.4903%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="11.2403%" y="181" width="0.1938%" height="15" fill="rgb(229,68,48)" fg:x="58" fg:w="1"/><text x="11.4903%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (1 samples, 0.19%)</title><rect x="11.2403%" y="165" width="0.1938%" height="15" fill="rgb(252,8,32)" fg:x="58" fg:w="1"/><text x="11.4903%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="11.2403%" y="149" width="0.1938%" height="15" fill="rgb(223,20,43)" fg:x="58" fg:w="1"/><text x="11.4903%" y="159.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (2 samples, 0.39%)</title><rect x="11.4341%" y="229" width="0.3876%" height="15" fill="rgb(229,81,49)" fg:x="59" fg:w="2"/><text x="11.6841%" y="239.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (2 samples, 0.39%)</title><rect x="11.4341%" y="213" width="0.3876%" height="15" fill="rgb(236,28,36)" fg:x="59" fg:w="2"/><text x="11.6841%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="12.4031%" y="133" width="0.1938%" height="15" fill="rgb(249,185,26)" fg:x="64" fg:w="1"/><text x="12.6531%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 1.55%)</title><rect x="12.2093%" y="213" width="1.5504%" height="15" fill="rgb(249,174,33)" fg:x="63" fg:w="8"/><text x="12.4593%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 1.55%)</title><rect x="12.2093%" y="197" width="1.5504%" height="15" fill="rgb(233,201,37)" fg:x="63" fg:w="8"/><text x="12.4593%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (8 samples, 1.55%)</title><rect x="12.2093%" y="181" width="1.5504%" height="15" fill="rgb(221,78,26)" fg:x="63" fg:w="8"/><text x="12.4593%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (8 samples, 1.55%)</title><rect x="12.2093%" y="165" width="1.5504%" height="15" fill="rgb(250,127,30)" fg:x="63" fg:w="8"/><text x="12.4593%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8 samples, 1.55%)</title><rect x="12.2093%" y="149" width="1.5504%" height="15" fill="rgb(230,49,44)" fg:x="63" fg:w="8"/><text x="12.4593%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 1.16%)</title><rect x="12.5969%" y="133" width="1.1628%" height="15" fill="rgb(229,67,23)" fg:x="65" fg:w="6"/><text x="12.8469%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (4 samples, 0.78%)</title><rect x="13.7597%" y="213" width="0.7752%" height="15" fill="rgb(249,83,47)" fg:x="71" fg:w="4"/><text x="14.0097%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.78%)</title><rect x="13.7597%" y="197" width="0.7752%" height="15" fill="rgb(215,43,3)" fg:x="71" fg:w="4"/><text x="14.0097%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (4 samples, 0.78%)</title><rect x="13.7597%" y="181" width="0.7752%" height="15" fill="rgb(238,154,13)" fg:x="71" fg:w="4"/><text x="14.0097%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.78%)</title><rect x="13.7597%" y="165" width="0.7752%" height="15" fill="rgb(219,56,2)" fg:x="71" fg:w="4"/><text x="14.0097%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (4 samples, 0.78%)</title><rect x="13.7597%" y="149" width="0.7752%" height="15" fill="rgb(233,0,4)" fg:x="71" fg:w="4"/><text x="14.0097%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.78%)</title><rect x="13.7597%" y="133" width="0.7752%" height="15" fill="rgb(235,30,7)" fg:x="71" fg:w="4"/><text x="14.0097%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.39%)</title><rect x="14.1473%" y="117" width="0.3876%" height="15" fill="rgb(250,79,13)" fg:x="73" fg:w="2"/><text x="14.3973%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2 samples, 0.39%)</title><rect x="14.1473%" y="101" width="0.3876%" height="15" fill="rgb(211,146,34)" fg:x="73" fg:w="2"/><text x="14.3973%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.39%)</title><rect x="14.1473%" y="85" width="0.3876%" height="15" fill="rgb(228,22,38)" fg:x="73" fg:w="2"/><text x="14.3973%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (2 samples, 0.39%)</title><rect x="14.1473%" y="69" width="0.3876%" height="15" fill="rgb(235,168,5)" fg:x="73" fg:w="2"/><text x="14.3973%" y="79.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (1 samples, 0.19%)</title><rect x="14.5349%" y="213" width="0.1938%" height="15" fill="rgb(221,155,16)" fg:x="75" fg:w="1"/><text x="14.7849%" y="223.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (1 samples, 0.19%)</title><rect x="14.5349%" y="197" width="0.1938%" height="15" fill="rgb(215,215,53)" fg:x="75" fg:w="1"/><text x="14.7849%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.39%)</title><rect x="14.7287%" y="181" width="0.3876%" height="15" fill="rgb(223,4,10)" fg:x="76" fg:w="2"/><text x="14.9787%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.39%)</title><rect x="14.7287%" y="165" width="0.3876%" height="15" fill="rgb(234,103,6)" fg:x="76" fg:w="2"/><text x="14.9787%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.39%)</title><rect x="14.7287%" y="149" width="0.3876%" height="15" fill="rgb(227,97,0)" fg:x="76" fg:w="2"/><text x="14.9787%" y="159.50"></text></g><g><title>torpedo::physics::Octree::query_box (24 samples, 4.65%)</title><rect x="10.6589%" y="261" width="4.6512%" height="15" fill="rgb(234,150,53)" fg:x="55" fg:w="24"/><text x="10.9089%" y="271.50">torpe..</text></g><g><title>torpedo::physics::Octree::query_box (22 samples, 4.26%)</title><rect x="11.0465%" y="245" width="4.2636%" height="15" fill="rgb(228,201,54)" fg:x="57" fg:w="22"/><text x="11.2965%" y="255.50">torpe..</text></g><g><title>torpedo::physics::Octree::query_box (18 samples, 3.49%)</title><rect x="11.8217%" y="229" width="3.4884%" height="15" fill="rgb(222,22,37)" fg:x="61" fg:w="18"/><text x="12.0717%" y="239.50">tor..</text></g><g><title>torpedo::physics::Octree::query_box (3 samples, 0.58%)</title><rect x="14.7287%" y="213" width="0.5814%" height="15" fill="rgb(237,53,32)" fg:x="76" fg:w="3"/><text x="14.9787%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.58%)</title><rect x="14.7287%" y="197" width="0.5814%" height="15" fill="rgb(233,25,53)" fg:x="76" fg:w="3"/><text x="14.9787%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.19%)</title><rect x="15.1163%" y="181" width="0.1938%" height="15" fill="rgb(210,40,34)" fg:x="78" fg:w="1"/><text x="15.3663%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.19%)</title><rect x="15.1163%" y="165" width="0.1938%" height="15" fill="rgb(241,220,44)" fg:x="78" fg:w="1"/><text x="15.3663%" y="175.50"></text></g><g><title>torpedo::physics::Octree::query_box (1 samples, 0.19%)</title><rect x="15.1163%" y="149" width="0.1938%" height="15" fill="rgb(235,28,35)" fg:x="78" fg:w="1"/><text x="15.3663%" y="159.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.19%)</title><rect x="15.1163%" y="133" width="0.1938%" height="15" fill="rgb(210,56,17)" fg:x="78" fg:w="1"/><text x="15.3663%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.19%)</title><rect x="15.1163%" y="117" width="0.1938%" height="15" fill="rgb(224,130,29)" fg:x="78" fg:w="1"/><text x="15.3663%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.19%)</title><rect x="15.1163%" y="101" width="0.1938%" height="15" fill="rgb(235,212,8)" fg:x="78" fg:w="1"/><text x="15.3663%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 2.13%)</title><rect x="15.8915%" y="165" width="2.1318%" height="15" fill="rgb(223,33,50)" fg:x="82" fg:w="11"/><text x="16.1415%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 2.13%)</title><rect x="15.8915%" y="149" width="2.1318%" height="15" fill="rgb(219,149,13)" fg:x="82" fg:w="11"/><text x="16.1415%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11 samples, 2.13%)</title><rect x="15.8915%" y="133" width="2.1318%" height="15" fill="rgb(250,156,29)" fg:x="82" fg:w="11"/><text x="16.1415%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11 samples, 2.13%)</title><rect x="15.8915%" y="117" width="2.1318%" height="15" fill="rgb(216,193,19)" fg:x="82" fg:w="11"/><text x="16.1415%" y="127.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 2.13%)</title><rect x="15.8915%" y="101" width="2.1318%" height="15" fill="rgb(216,135,14)" fg:x="82" fg:w="11"/><text x="16.1415%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 2.13%)</title><rect x="15.8915%" y="85" width="2.1318%" height="15" fill="rgb(241,47,5)" fg:x="82" fg:w="11"/><text x="16.1415%" y="95.50">a..</text></g><g><title>alloc::alloc::alloc (11 samples, 2.13%)</title><rect x="15.8915%" y="69" width="2.1318%" height="15" fill="rgb(233,42,35)" fg:x="82" fg:w="11"/><text x="16.1415%" y="79.50">a..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (63 samples, 12.21%)</title><rect x="15.3101%" y="245" width="12.2093%" height="15" fill="rgb(231,13,6)" fg:x="79" fg:w="63"/><text x="15.5601%" y="255.50">&lt;torpedo::level::T..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (60 samples, 11.63%)</title><rect x="15.8915%" y="229" width="11.6279%" height="15" fill="rgb(207,181,40)" fg:x="82" fg:w="60"/><text x="16.1415%" y="239.50">&lt;alloc::boxed::Bo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (60 samples, 11.63%)</title><rect x="15.8915%" y="213" width="11.6279%" height="15" fill="rgb(254,173,49)" fg:x="82" fg:w="60"/><text x="16.1415%" y="223.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (60 samples, 11.63%)</title><rect x="15.8915%" y="197" width="11.6279%" height="15" fill="rgb(221,1,38)" fg:x="82" fg:w="60"/><text x="16.1415%" y="207.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (60 samples, 11.63%)</title><rect x="15.8915%" y="181" width="11.6279%" height="15" fill="rgb(206,124,46)" fg:x="82" fg:w="60"/><text x="16.1415%" y="191.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (49 samples, 9.50%)</title><rect x="18.0233%" y="165" width="9.4961%" height="15" fill="rgb(249,21,11)" fg:x="93" fg:w="49"/><text x="18.2733%" y="175.50">core::ptr::con..</text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 9.50%)</title><rect x="18.0233%" y="149" width="9.4961%" height="15" fill="rgb(222,201,40)" fg:x="93" fg:w="49"/><text x="18.2733%" y="159.50">core::intrinsi..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (6 samples, 1.16%)</title><rect x="27.5194%" y="229" width="1.1628%" height="15" fill="rgb(235,61,29)" fg:x="142" fg:w="6"/><text x="27.7694%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (6 samples, 1.16%)</title><rect x="27.5194%" y="213" width="1.1628%" height="15" fill="rgb(219,207,3)" fg:x="142" fg:w="6"/><text x="27.7694%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.16%)</title><rect x="27.5194%" y="197" width="1.1628%" height="15" fill="rgb(222,56,46)" fg:x="142" fg:w="6"/><text x="27.7694%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.16%)</title><rect x="27.5194%" y="181" width="1.1628%" height="15" fill="rgb(239,76,54)" fg:x="142" fg:w="6"/><text x="27.7694%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.16%)</title><rect x="27.5194%" y="165" width="1.1628%" height="15" fill="rgb(231,124,27)" fg:x="142" fg:w="6"/><text x="27.7694%" y="175.50"></text></g><g><title>torpedo::physics::col::check_collision (3 samples, 0.58%)</title><rect x="28.1008%" y="149" width="0.5814%" height="15" fill="rgb(249,195,6)" fg:x="145" fg:w="3"/><text x="28.3508%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (3 samples, 0.58%)</title><rect x="28.1008%" y="133" width="0.5814%" height="15" fill="rgb(237,174,47)" fg:x="145" fg:w="3"/><text x="28.3508%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (3 samples, 0.58%)</title><rect x="28.1008%" y="117" width="0.5814%" height="15" fill="rgb(206,201,31)" fg:x="145" fg:w="3"/><text x="28.3508%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.58%)</title><rect x="28.1008%" y="101" width="0.5814%" height="15" fill="rgb(231,57,52)" fg:x="145" fg:w="3"/><text x="28.3508%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.58%)</title><rect x="28.1008%" y="85" width="0.5814%" height="15" fill="rgb(248,177,22)" fg:x="145" fg:w="3"/><text x="28.3508%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.58%)</title><rect x="28.1008%" y="69" width="0.5814%" height="15" fill="rgb(215,211,37)" fg:x="145" fg:w="3"/><text x="28.3508%" y="79.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (8 samples, 1.55%)</title><rect x="28.6822%" y="229" width="1.5504%" height="15" fill="rgb(241,128,51)" fg:x="148" fg:w="8"/><text x="28.9322%" y="239.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (8 samples, 1.55%)</title><rect x="28.6822%" y="213" width="1.5504%" height="15" fill="rgb(227,165,31)" fg:x="148" fg:w="8"/><text x="28.9322%" y="223.50"></text></g><g><title>torpedo::physics::check_collision_comps (82 samples, 15.89%)</title><rect x="15.3101%" y="261" width="15.8915%" height="15" fill="rgb(228,167,24)" fg:x="79" fg:w="82"/><text x="15.5601%" y="271.50">torpedo::physics::check_..</text></g><g><title>torpedo::physics::col::check_collision (19 samples, 3.68%)</title><rect x="27.5194%" y="245" width="3.6822%" height="15" fill="rgb(228,143,12)" fg:x="142" fg:w="19"/><text x="27.7694%" y="255.50">torp..</text></g><g><title>torpedo::math::Vector4::to_matrix (5 samples, 0.97%)</title><rect x="30.2326%" y="229" width="0.9690%" height="15" fill="rgb(249,149,8)" fg:x="156" fg:w="5"/><text x="30.4826%" y="239.50"></text></g><g><title>__pthread_create (2 samples, 0.39%)</title><rect x="31.2016%" y="69" width="0.3876%" height="15" fill="rgb(243,35,44)" fg:x="161" fg:w="2"/><text x="31.4516%" y="79.50"></text></g><g><title>std::thread::scoped::Scope::spawn (85 samples, 16.47%)</title><rect x="31.2016%" y="133" width="16.4729%" height="15" fill="rgb(246,89,9)" fg:x="161" fg:w="85"/><text x="31.4516%" y="143.50">std::thread::scoped::Scop..</text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (85 samples, 16.47%)</title><rect x="31.2016%" y="117" width="16.4729%" height="15" fill="rgb(233,213,13)" fg:x="161" fg:w="85"/><text x="31.4516%" y="127.50">std::thread::scoped::&lt;imp..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (85 samples, 16.47%)</title><rect x="31.2016%" y="101" width="16.4729%" height="15" fill="rgb(233,141,41)" fg:x="161" fg:w="85"/><text x="31.4516%" y="111.50">std::thread::Builder::spa..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (85 samples, 16.47%)</title><rect x="31.2016%" y="85" width="16.4729%" height="15" fill="rgb(239,167,4)" fg:x="161" fg:w="85"/><text x="31.4516%" y="95.50">std::sys::pal::unix::thre..</text></g><g><title>_pthread_jit_write_with_callback_np (83 samples, 16.09%)</title><rect x="31.5891%" y="69" width="16.0853%" height="15" fill="rgb(209,217,16)" fg:x="163" fg:w="83"/><text x="31.8391%" y="79.50">_pthread_jit_write_with_c..</text></g><g><title>_chmod (2 samples, 0.39%)</title><rect x="47.2868%" y="53" width="0.3876%" height="15" fill="rgb(219,88,35)" fg:x="244" fg:w="2"/><text x="47.5368%" y="63.50"></text></g><g><title>torpedo::physics::make_octree (86 samples, 16.67%)</title><rect x="31.2016%" y="261" width="16.6667%" height="15" fill="rgb(220,193,23)" fg:x="161" fg:w="86"/><text x="31.4516%" y="271.50">torpedo::physics::make_oct..</text></g><g><title>std::thread::scoped::scope (86 samples, 16.67%)</title><rect x="31.2016%" y="245" width="16.6667%" height="15" fill="rgb(230,90,52)" fg:x="161" fg:w="86"/><text x="31.4516%" y="255.50">std::thread::scoped::scope</text></g><g><title>std::panic::catch_unwind (86 samples, 16.67%)</title><rect x="31.2016%" y="229" width="16.6667%" height="15" fill="rgb(252,106,19)" fg:x="161" fg:w="86"/><text x="31.4516%" y="239.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (86 samples, 16.67%)</title><rect x="31.2016%" y="213" width="16.6667%" height="15" fill="rgb(206,74,20)" fg:x="161" fg:w="86"/><text x="31.4516%" y="223.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (86 samples, 16.67%)</title><rect x="31.2016%" y="197" width="16.6667%" height="15" fill="rgb(230,138,44)" fg:x="161" fg:w="86"/><text x="31.4516%" y="207.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (86 samples, 16.67%)</title><rect x="31.2016%" y="181" width="16.6667%" height="15" fill="rgb(235,182,43)" fg:x="161" fg:w="86"/><text x="31.4516%" y="191.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::scoped::scope::{{closure}} (86 samples, 16.67%)</title><rect x="31.2016%" y="165" width="16.6667%" height="15" fill="rgb(242,16,51)" fg:x="161" fg:w="86"/><text x="31.4516%" y="175.50">std::thread::scoped::scope..</text></g><g><title>torpedo::physics::make_octree::{{closure}} (86 samples, 16.67%)</title><rect x="31.2016%" y="149" width="16.6667%" height="15" fill="rgb(248,9,4)" fg:x="161" fg:w="86"/><text x="31.4516%" y="159.50">torpedo::physics::make_oct..</text></g><g><title>std::thread::scoped::ScopedJoinHandle&lt;T&gt;::join (1 samples, 0.19%)</title><rect x="47.6744%" y="133" width="0.1938%" height="15" fill="rgb(210,31,22)" fg:x="246" fg:w="1"/><text x="47.9244%" y="143.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.19%)</title><rect x="47.6744%" y="117" width="0.1938%" height="15" fill="rgb(239,54,39)" fg:x="246" fg:w="1"/><text x="47.9244%" y="127.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (1 samples, 0.19%)</title><rect x="47.6744%" y="101" width="0.1938%" height="15" fill="rgb(230,99,41)" fg:x="246" fg:w="1"/><text x="47.9244%" y="111.50"></text></g><g><title>__pthread_join (1 samples, 0.19%)</title><rect x="47.6744%" y="85" width="0.1938%" height="15" fill="rgb(253,106,12)" fg:x="246" fg:w="1"/><text x="47.9244%" y="95.50"></text></g><g><title>_pthread_detach (1 samples, 0.19%)</title><rect x="47.6744%" y="69" width="0.1938%" height="15" fill="rgb(213,46,41)" fg:x="246" fg:w="1"/><text x="47.9244%" y="79.50"></text></g><g><title>_mig_get_special_reply_port (1 samples, 0.19%)</title><rect x="47.6744%" y="53" width="0.1938%" height="15" fill="rgb(215,133,35)" fg:x="246" fg:w="1"/><text x="47.9244%" y="63.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (235 samples, 45.54%)</title><rect x="2.5194%" y="453" width="45.5426%" height="15" fill="rgb(213,28,5)" fg:x="13" fg:w="235"/><text x="2.7694%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (235 samples, 45.54%)</title><rect x="2.5194%" y="437" width="45.5426%" height="15" fill="rgb(215,77,49)" fg:x="13" fg:w="235"/><text x="2.7694%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (235 samples, 45.54%)</title><rect x="2.5194%" y="421" width="45.5426%" height="15" fill="rgb(248,100,22)" fg:x="13" fg:w="235"/><text x="2.7694%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (235 samples, 45.54%)</title><rect x="2.5194%" y="405" width="45.5426%" height="15" fill="rgb(208,67,9)" fg:x="13" fg:w="235"/><text x="2.7694%" y="415.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (235 samples, 45.54%)</title><rect x="2.5194%" y="389" width="45.5426%" height="15" fill="rgb(219,133,21)" fg:x="13" fg:w="235"/><text x="2.7694%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (235 samples, 45.54%)</title><rect x="2.5194%" y="373" width="45.5426%" height="15" fill="rgb(246,46,29)" fg:x="13" fg:w="235"/><text x="2.7694%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (235 samples, 45.54%)</title><rect x="2.5194%" y="357" width="45.5426%" height="15" fill="rgb(246,185,52)" fg:x="13" fg:w="235"/><text x="2.7694%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (235 samples, 45.54%)</title><rect x="2.5194%" y="341" width="45.5426%" height="15" fill="rgb(252,136,11)" fg:x="13" fg:w="235"/><text x="2.7694%" y="351.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (235 samples, 45.54%)</title><rect x="2.5194%" y="325" width="45.5426%" height="15" fill="rgb(219,138,53)" fg:x="13" fg:w="235"/><text x="2.7694%" y="335.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (235 samples, 45.54%)</title><rect x="2.5194%" y="309" width="45.5426%" height="15" fill="rgb(211,51,23)" fg:x="13" fg:w="235"/><text x="2.7694%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::level::level_loop::{{closure}} (235 samples, 45.54%)</title><rect x="2.5194%" y="293" width="45.5426%" height="15" fill="rgb(247,221,28)" fg:x="13" fg:w="235"/><text x="2.7694%" y="303.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (235 samples, 45.54%)</title><rect x="2.5194%" y="277" width="45.5426%" height="15" fill="rgb(251,222,45)" fg:x="13" fg:w="235"/><text x="2.7694%" y="287.50">torpedo::physics::update</text></g><g><title>torpedo::physics::update (1 samples, 0.19%)</title><rect x="47.8682%" y="261" width="0.1938%" height="15" fill="rgb(217,162,53)" fg:x="247" fg:w="1"/><text x="48.1182%" y="271.50"></text></g><g><title>6101397504 (316 samples, 61.24%)</title><rect x="2.5194%" y="501" width="61.2403%" height="15" fill="rgb(229,93,14)" fg:x="13" fg:w="316"/><text x="2.7694%" y="511.50">6101397504</text></g><g><title>__pthread_deallocate (316 samples, 61.24%)</title><rect x="2.5194%" y="485" width="61.2403%" height="15" fill="rgb(209,67,49)" fg:x="13" fg:w="316"/><text x="2.7694%" y="495.50">__pthread_deallocate</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (316 samples, 61.24%)</title><rect x="2.5194%" y="469" width="61.2403%" height="15" fill="rgb(213,87,29)" fg:x="13" fg:w="316"/><text x="2.7694%" y="479.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (81 samples, 15.70%)</title><rect x="48.0620%" y="453" width="15.6977%" height="15" fill="rgb(205,151,52)" fg:x="248" fg:w="81"/><text x="48.3120%" y="463.50">core::ptr::drop_in_place..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (81 samples, 15.70%)</title><rect x="48.0620%" y="437" width="15.6977%" height="15" fill="rgb(253,215,39)" fg:x="248" fg:w="81"/><text x="48.3120%" y="447.50">&lt;std::sys::pal::unix::st..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (81 samples, 15.70%)</title><rect x="48.0620%" y="421" width="15.6977%" height="15" fill="rgb(221,220,41)" fg:x="248" fg:w="81"/><text x="48.3120%" y="431.50">std::sys::pal::unix::sta..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.19%)</title><rect x="63.7597%" y="453" width="0.1938%" height="15" fill="rgb(218,133,21)" fg:x="329" fg:w="1"/><text x="64.0097%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.19%)</title><rect x="63.7597%" y="437" width="0.1938%" height="15" fill="rgb(221,193,43)" fg:x="329" fg:w="1"/><text x="64.0097%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.19%)</title><rect x="63.7597%" y="421" width="0.1938%" height="15" fill="rgb(240,128,52)" fg:x="329" fg:w="1"/><text x="64.0097%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.19%)</title><rect x="63.7597%" y="405" width="0.1938%" height="15" fill="rgb(253,114,12)" fg:x="329" fg:w="1"/><text x="64.0097%" y="415.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.19%)</title><rect x="63.7597%" y="389" width="0.1938%" height="15" fill="rgb(215,223,47)" fg:x="329" fg:w="1"/><text x="64.0097%" y="399.50"></text></g><g><title>std::panicking::try (1 samples, 0.19%)</title><rect x="63.7597%" y="373" width="0.1938%" height="15" fill="rgb(248,225,23)" fg:x="329" fg:w="1"/><text x="64.0097%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.19%)</title><rect x="63.7597%" y="357" width="0.1938%" height="15" fill="rgb(250,108,0)" fg:x="329" fg:w="1"/><text x="64.0097%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.19%)</title><rect x="63.7597%" y="341" width="0.1938%" height="15" fill="rgb(228,208,7)" fg:x="329" fg:w="1"/><text x="64.0097%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.19%)</title><rect x="63.7597%" y="325" width="0.1938%" height="15" fill="rgb(244,45,10)" fg:x="329" fg:w="1"/><text x="64.0097%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.19%)</title><rect x="63.7597%" y="309" width="0.1938%" height="15" fill="rgb(207,125,25)" fg:x="329" fg:w="1"/><text x="64.0097%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (1 samples, 0.19%)</title><rect x="63.7597%" y="293" width="0.1938%" height="15" fill="rgb(210,195,18)" fg:x="329" fg:w="1"/><text x="64.0097%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.19%)</title><rect x="63.7597%" y="277" width="0.1938%" height="15" fill="rgb(249,80,12)" fg:x="329" fg:w="1"/><text x="64.0097%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.19%)</title><rect x="63.7597%" y="261" width="0.1938%" height="15" fill="rgb(221,65,9)" fg:x="329" fg:w="1"/><text x="64.0097%" y="271.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.19%)</title><rect x="63.7597%" y="245" width="0.1938%" height="15" fill="rgb(235,49,36)" fg:x="329" fg:w="1"/><text x="64.0097%" y="255.50"></text></g><g><title>torpedo::arena::AVec&lt;T&gt;::push (1 samples, 0.19%)</title><rect x="63.7597%" y="229" width="0.1938%" height="15" fill="rgb(225,32,20)" fg:x="329" fg:w="1"/><text x="64.0097%" y="239.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_space (1 samples, 0.19%)</title><rect x="63.7597%" y="213" width="0.1938%" height="15" fill="rgb(215,141,46)" fg:x="329" fg:w="1"/><text x="64.0097%" y="223.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.19%)</title><rect x="63.7597%" y="197" width="0.1938%" height="15" fill="rgb(250,160,47)" fg:x="329" fg:w="1"/><text x="64.0097%" y="207.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.19%)</title><rect x="63.7597%" y="181" width="0.1938%" height="15" fill="rgb(216,222,40)" fg:x="329" fg:w="1"/><text x="64.0097%" y="191.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.19%)</title><rect x="63.7597%" y="165" width="0.1938%" height="15" fill="rgb(234,217,39)" fg:x="329" fg:w="1"/><text x="64.0097%" y="175.50"></text></g><g><title>6103543808 (2 samples, 0.39%)</title><rect x="63.7597%" y="501" width="0.3876%" height="15" fill="rgb(207,178,40)" fg:x="329" fg:w="2"/><text x="64.0097%" y="511.50"></text></g><g><title>__pthread_deallocate (2 samples, 0.39%)</title><rect x="63.7597%" y="485" width="0.3876%" height="15" fill="rgb(221,136,13)" fg:x="329" fg:w="2"/><text x="64.0097%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.39%)</title><rect x="63.7597%" y="469" width="0.3876%" height="15" fill="rgb(249,199,10)" fg:x="329" fg:w="2"/><text x="64.0097%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.19%)</title><rect x="63.9535%" y="453" width="0.1938%" height="15" fill="rgb(249,222,13)" fg:x="330" fg:w="1"/><text x="64.2035%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.19%)</title><rect x="63.9535%" y="437" width="0.1938%" height="15" fill="rgb(244,185,38)" fg:x="330" fg:w="1"/><text x="64.2035%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.19%)</title><rect x="63.9535%" y="421" width="0.1938%" height="15" fill="rgb(236,202,9)" fg:x="330" fg:w="1"/><text x="64.2035%" y="431.50"></text></g><g><title>_task_info (1 samples, 0.19%)</title><rect x="63.9535%" y="405" width="0.1938%" height="15" fill="rgb(250,229,37)" fg:x="330" fg:w="1"/><text x="64.2035%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.19%)</title><rect x="64.1473%" y="245" width="0.1938%" height="15" fill="rgb(206,174,23)" fg:x="331" fg:w="1"/><text x="64.3973%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.19%)</title><rect x="64.1473%" y="229" width="0.1938%" height="15" fill="rgb(211,33,43)" fg:x="331" fg:w="1"/><text x="64.3973%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.19%)</title><rect x="64.1473%" y="213" width="0.1938%" height="15" fill="rgb(245,58,50)" fg:x="331" fg:w="1"/><text x="64.3973%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.19%)</title><rect x="64.1473%" y="197" width="0.1938%" height="15" fill="rgb(244,68,36)" fg:x="331" fg:w="1"/><text x="64.3973%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="64.1473%" y="181" width="0.1938%" height="15" fill="rgb(232,229,15)" fg:x="331" fg:w="1"/><text x="64.3973%" y="191.50"></text></g><g><title>__platform_strcpy (1 samples, 0.19%)</title><rect x="64.1473%" y="165" width="0.1938%" height="15" fill="rgb(254,30,23)" fg:x="331" fg:w="1"/><text x="64.3973%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt; (1 samples, 0.19%)</title><rect x="64.3411%" y="245" width="0.1938%" height="15" fill="rgb(235,160,14)" fg:x="332" fg:w="1"/><text x="64.5911%" y="255.50"></text></g><g><title> 8]&gt; (1 samples, 0.19%)</title><rect x="64.3411%" y="229" width="0.1938%" height="15" fill="rgb(212,155,44)" fg:x="332" fg:w="1"/><text x="64.5911%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="64.3411%" y="213" width="0.1938%" height="15" fill="rgb(226,2,50)" fg:x="332" fg:w="1"/><text x="64.5911%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="64.3411%" y="197" width="0.1938%" height="15" fill="rgb(234,177,6)" fg:x="332" fg:w="1"/><text x="64.5911%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="64.3411%" y="181" width="0.1938%" height="15" fill="rgb(217,24,9)" fg:x="332" fg:w="1"/><text x="64.5911%" y="191.50"></text></g><g><title>__platform_memchr (1 samples, 0.19%)</title><rect x="64.3411%" y="165" width="0.1938%" height="15" fill="rgb(220,13,46)" fg:x="332" fg:w="1"/><text x="64.5911%" y="175.50"></text></g><g><title>6105690112 (3 samples, 0.58%)</title><rect x="64.1473%" y="501" width="0.5814%" height="15" fill="rgb(239,221,27)" fg:x="331" fg:w="3"/><text x="64.3973%" y="511.50"></text></g><g><title>__pthread_deallocate (3 samples, 0.58%)</title><rect x="64.1473%" y="485" width="0.5814%" height="15" fill="rgb(222,198,25)" fg:x="331" fg:w="3"/><text x="64.3973%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.58%)</title><rect x="64.1473%" y="469" width="0.5814%" height="15" fill="rgb(211,99,13)" fg:x="331" fg:w="3"/><text x="64.3973%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.58%)</title><rect x="64.1473%" y="453" width="0.5814%" height="15" fill="rgb(232,111,31)" fg:x="331" fg:w="3"/><text x="64.3973%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.58%)</title><rect x="64.1473%" y="437" width="0.5814%" height="15" fill="rgb(245,82,37)" fg:x="331" fg:w="3"/><text x="64.3973%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.58%)</title><rect x="64.1473%" y="421" width="0.5814%" height="15" fill="rgb(227,149,46)" fg:x="331" fg:w="3"/><text x="64.3973%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 0.58%)</title><rect x="64.1473%" y="405" width="0.5814%" height="15" fill="rgb(218,36,50)" fg:x="331" fg:w="3"/><text x="64.3973%" y="415.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.58%)</title><rect x="64.1473%" y="389" width="0.5814%" height="15" fill="rgb(226,80,48)" fg:x="331" fg:w="3"/><text x="64.3973%" y="399.50"></text></g><g><title>std::panicking::try (3 samples, 0.58%)</title><rect x="64.1473%" y="373" width="0.5814%" height="15" fill="rgb(238,224,15)" fg:x="331" fg:w="3"/><text x="64.3973%" y="383.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.58%)</title><rect x="64.1473%" y="357" width="0.5814%" height="15" fill="rgb(241,136,10)" fg:x="331" fg:w="3"/><text x="64.3973%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.58%)</title><rect x="64.1473%" y="341" width="0.5814%" height="15" fill="rgb(208,32,45)" fg:x="331" fg:w="3"/><text x="64.3973%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 0.58%)</title><rect x="64.1473%" y="325" width="0.5814%" height="15" fill="rgb(207,135,9)" fg:x="331" fg:w="3"/><text x="64.3973%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.58%)</title><rect x="64.1473%" y="309" width="0.5814%" height="15" fill="rgb(206,86,44)" fg:x="331" fg:w="3"/><text x="64.3973%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (3 samples, 0.58%)</title><rect x="64.1473%" y="293" width="0.5814%" height="15" fill="rgb(245,177,15)" fg:x="331" fg:w="3"/><text x="64.3973%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (3 samples, 0.58%)</title><rect x="64.1473%" y="277" width="0.5814%" height="15" fill="rgb(206,64,50)" fg:x="331" fg:w="3"/><text x="64.3973%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (3 samples, 0.58%)</title><rect x="64.1473%" y="261" width="0.5814%" height="15" fill="rgb(234,36,40)" fg:x="331" fg:w="3"/><text x="64.3973%" y="271.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.19%)</title><rect x="64.5349%" y="245" width="0.1938%" height="15" fill="rgb(213,64,8)" fg:x="333" fg:w="1"/><text x="64.7849%" y="255.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (1 samples, 0.19%)</title><rect x="64.5349%" y="229" width="0.1938%" height="15" fill="rgb(210,75,36)" fg:x="333" fg:w="1"/><text x="64.7849%" y="239.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.19%)</title><rect x="64.5349%" y="213" width="0.1938%" height="15" fill="rgb(229,88,21)" fg:x="333" fg:w="1"/><text x="64.7849%" y="223.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (1 samples, 0.19%)</title><rect x="64.5349%" y="197" width="0.1938%" height="15" fill="rgb(252,204,47)" fg:x="333" fg:w="1"/><text x="64.7849%" y="207.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (1 samples, 0.19%)</title><rect x="64.5349%" y="181" width="0.1938%" height="15" fill="rgb(208,77,27)" fg:x="333" fg:w="1"/><text x="64.7849%" y="191.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.19%)</title><rect x="64.5349%" y="165" width="0.1938%" height="15" fill="rgb(221,76,26)" fg:x="333" fg:w="1"/><text x="64.7849%" y="175.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.19%)</title><rect x="64.5349%" y="149" width="0.1938%" height="15" fill="rgb(225,139,18)" fg:x="333" fg:w="1"/><text x="64.7849%" y="159.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.19%)</title><rect x="64.9225%" y="197" width="0.1938%" height="15" fill="rgb(230,137,11)" fg:x="335" fg:w="1"/><text x="65.1725%" y="207.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.19%)</title><rect x="64.9225%" y="181" width="0.1938%" height="15" fill="rgb(212,28,1)" fg:x="335" fg:w="1"/><text x="65.1725%" y="191.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.19%)</title><rect x="64.9225%" y="165" width="0.1938%" height="15" fill="rgb(248,164,17)" fg:x="335" fg:w="1"/><text x="65.1725%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.39%)</title><rect x="64.9225%" y="453" width="0.3876%" height="15" fill="rgb(222,171,42)" fg:x="335" fg:w="2"/><text x="65.1725%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.39%)</title><rect x="64.9225%" y="437" width="0.3876%" height="15" fill="rgb(243,84,45)" fg:x="335" fg:w="2"/><text x="65.1725%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.39%)</title><rect x="64.9225%" y="421" width="0.3876%" height="15" fill="rgb(252,49,23)" fg:x="335" fg:w="2"/><text x="65.1725%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.39%)</title><rect x="64.9225%" y="405" width="0.3876%" height="15" fill="rgb(215,19,7)" fg:x="335" fg:w="2"/><text x="65.1725%" y="415.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.39%)</title><rect x="64.9225%" y="389" width="0.3876%" height="15" fill="rgb(238,81,41)" fg:x="335" fg:w="2"/><text x="65.1725%" y="399.50"></text></g><g><title>std::panicking::try (2 samples, 0.39%)</title><rect x="64.9225%" y="373" width="0.3876%" height="15" fill="rgb(210,199,37)" fg:x="335" fg:w="2"/><text x="65.1725%" y="383.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.39%)</title><rect x="64.9225%" y="357" width="0.3876%" height="15" fill="rgb(244,192,49)" fg:x="335" fg:w="2"/><text x="65.1725%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.39%)</title><rect x="64.9225%" y="341" width="0.3876%" height="15" fill="rgb(226,211,11)" fg:x="335" fg:w="2"/><text x="65.1725%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.39%)</title><rect x="64.9225%" y="325" width="0.3876%" height="15" fill="rgb(236,162,54)" fg:x="335" fg:w="2"/><text x="65.1725%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.39%)</title><rect x="64.9225%" y="309" width="0.3876%" height="15" fill="rgb(220,229,9)" fg:x="335" fg:w="2"/><text x="65.1725%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (2 samples, 0.39%)</title><rect x="64.9225%" y="293" width="0.3876%" height="15" fill="rgb(250,87,22)" fg:x="335" fg:w="2"/><text x="65.1725%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.39%)</title><rect x="64.9225%" y="277" width="0.3876%" height="15" fill="rgb(239,43,17)" fg:x="335" fg:w="2"/><text x="65.1725%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.39%)</title><rect x="64.9225%" y="261" width="0.3876%" height="15" fill="rgb(231,177,25)" fg:x="335" fg:w="2"/><text x="65.1725%" y="271.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.39%)</title><rect x="64.9225%" y="245" width="0.3876%" height="15" fill="rgb(219,179,1)" fg:x="335" fg:w="2"/><text x="65.1725%" y="255.50"></text></g><g><title>torpedo::arena::AVec&lt;T&gt;::push (2 samples, 0.39%)</title><rect x="64.9225%" y="229" width="0.3876%" height="15" fill="rgb(238,219,53)" fg:x="335" fg:w="2"/><text x="65.1725%" y="239.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_space (2 samples, 0.39%)</title><rect x="64.9225%" y="213" width="0.3876%" height="15" fill="rgb(232,167,36)" fg:x="335" fg:w="2"/><text x="65.1725%" y="223.50"></text></g><g><title>torpedo::arena::Arena::unlock (1 samples, 0.19%)</title><rect x="65.1163%" y="197" width="0.1938%" height="15" fill="rgb(244,19,51)" fg:x="336" fg:w="1"/><text x="65.3663%" y="207.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.19%)</title><rect x="65.1163%" y="181" width="0.1938%" height="15" fill="rgb(224,6,22)" fg:x="336" fg:w="1"/><text x="65.3663%" y="191.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.19%)</title><rect x="65.1163%" y="165" width="0.1938%" height="15" fill="rgb(224,145,5)" fg:x="336" fg:w="1"/><text x="65.3663%" y="175.50"></text></g><g><title>6107836416 (4 samples, 0.78%)</title><rect x="64.7287%" y="501" width="0.7752%" height="15" fill="rgb(234,130,49)" fg:x="334" fg:w="4"/><text x="64.9787%" y="511.50"></text></g><g><title>__pthread_deallocate (4 samples, 0.78%)</title><rect x="64.7287%" y="485" width="0.7752%" height="15" fill="rgb(254,6,2)" fg:x="334" fg:w="4"/><text x="64.9787%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.58%)</title><rect x="64.9225%" y="469" width="0.5814%" height="15" fill="rgb(208,96,46)" fg:x="335" fg:w="3"/><text x="65.1725%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.19%)</title><rect x="65.3101%" y="453" width="0.1938%" height="15" fill="rgb(239,3,39)" fg:x="337" fg:w="1"/><text x="65.5601%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.19%)</title><rect x="65.3101%" y="437" width="0.1938%" height="15" fill="rgb(233,210,1)" fg:x="337" fg:w="1"/><text x="65.5601%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt; (1 samples, 0.19%)</title><rect x="65.5039%" y="245" width="0.1938%" height="15" fill="rgb(244,137,37)" fg:x="338" fg:w="1"/><text x="65.7539%" y="255.50"></text></g><g><title> 8]&gt; (1 samples, 0.19%)</title><rect x="65.5039%" y="229" width="0.1938%" height="15" fill="rgb(240,136,2)" fg:x="338" fg:w="1"/><text x="65.7539%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="65.5039%" y="213" width="0.1938%" height="15" fill="rgb(239,18,37)" fg:x="338" fg:w="1"/><text x="65.7539%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.19%)</title><rect x="65.5039%" y="197" width="0.1938%" height="15" fill="rgb(218,185,22)" fg:x="338" fg:w="1"/><text x="65.7539%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="65.5039%" y="181" width="0.1938%" height="15" fill="rgb(225,218,4)" fg:x="338" fg:w="1"/><text x="65.7539%" y="191.50"></text></g><g><title>__platform_strcpy (1 samples, 0.19%)</title><rect x="65.5039%" y="165" width="0.1938%" height="15" fill="rgb(230,182,32)" fg:x="338" fg:w="1"/><text x="65.7539%" y="175.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.19%)</title><rect x="65.6977%" y="245" width="0.1938%" height="15" fill="rgb(242,56,43)" fg:x="339" fg:w="1"/><text x="65.9477%" y="255.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (1 samples, 0.19%)</title><rect x="65.6977%" y="229" width="0.1938%" height="15" fill="rgb(233,99,24)" fg:x="339" fg:w="1"/><text x="65.9477%" y="239.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.19%)</title><rect x="65.6977%" y="213" width="0.1938%" height="15" fill="rgb(234,209,42)" fg:x="339" fg:w="1"/><text x="65.9477%" y="223.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.19%)</title><rect x="65.6977%" y="197" width="0.1938%" height="15" fill="rgb(227,7,12)" fg:x="339" fg:w="1"/><text x="65.9477%" y="207.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.19%)</title><rect x="65.8915%" y="197" width="0.1938%" height="15" fill="rgb(245,203,43)" fg:x="340" fg:w="1"/><text x="66.1415%" y="207.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.19%)</title><rect x="65.8915%" y="181" width="0.1938%" height="15" fill="rgb(238,205,33)" fg:x="340" fg:w="1"/><text x="66.1415%" y="191.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.19%)</title><rect x="65.8915%" y="165" width="0.1938%" height="15" fill="rgb(231,56,7)" fg:x="340" fg:w="1"/><text x="66.1415%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 0.78%)</title><rect x="65.5039%" y="453" width="0.7752%" height="15" fill="rgb(244,186,29)" fg:x="338" fg:w="4"/><text x="65.7539%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 0.78%)</title><rect x="65.5039%" y="437" width="0.7752%" height="15" fill="rgb(234,111,31)" fg:x="338" fg:w="4"/><text x="65.7539%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.78%)</title><rect x="65.5039%" y="421" width="0.7752%" height="15" fill="rgb(241,149,10)" fg:x="338" fg:w="4"/><text x="65.7539%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (4 samples, 0.78%)</title><rect x="65.5039%" y="405" width="0.7752%" height="15" fill="rgb(249,206,44)" fg:x="338" fg:w="4"/><text x="65.7539%" y="415.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.78%)</title><rect x="65.5039%" y="389" width="0.7752%" height="15" fill="rgb(251,153,30)" fg:x="338" fg:w="4"/><text x="65.7539%" y="399.50"></text></g><g><title>std::panicking::try (4 samples, 0.78%)</title><rect x="65.5039%" y="373" width="0.7752%" height="15" fill="rgb(239,152,38)" fg:x="338" fg:w="4"/><text x="65.7539%" y="383.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.78%)</title><rect x="65.5039%" y="357" width="0.7752%" height="15" fill="rgb(249,139,47)" fg:x="338" fg:w="4"/><text x="65.7539%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.78%)</title><rect x="65.5039%" y="341" width="0.7752%" height="15" fill="rgb(244,64,35)" fg:x="338" fg:w="4"/><text x="65.7539%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (4 samples, 0.78%)</title><rect x="65.5039%" y="325" width="0.7752%" height="15" fill="rgb(216,46,15)" fg:x="338" fg:w="4"/><text x="65.7539%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4 samples, 0.78%)</title><rect x="65.5039%" y="309" width="0.7752%" height="15" fill="rgb(250,74,19)" fg:x="338" fg:w="4"/><text x="65.7539%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (4 samples, 0.78%)</title><rect x="65.5039%" y="293" width="0.7752%" height="15" fill="rgb(249,42,33)" fg:x="338" fg:w="4"/><text x="65.7539%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (4 samples, 0.78%)</title><rect x="65.5039%" y="277" width="0.7752%" height="15" fill="rgb(242,149,17)" fg:x="338" fg:w="4"/><text x="65.7539%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (4 samples, 0.78%)</title><rect x="65.5039%" y="261" width="0.7752%" height="15" fill="rgb(244,29,21)" fg:x="338" fg:w="4"/><text x="65.7539%" y="271.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.39%)</title><rect x="65.8915%" y="245" width="0.3876%" height="15" fill="rgb(220,130,37)" fg:x="340" fg:w="2"/><text x="66.1415%" y="255.50"></text></g><g><title>torpedo::arena::AVec&lt;T&gt;::push (2 samples, 0.39%)</title><rect x="65.8915%" y="229" width="0.3876%" height="15" fill="rgb(211,67,2)" fg:x="340" fg:w="2"/><text x="66.1415%" y="239.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_space (2 samples, 0.39%)</title><rect x="65.8915%" y="213" width="0.3876%" height="15" fill="rgb(235,68,52)" fg:x="340" fg:w="2"/><text x="66.1415%" y="223.50"></text></g><g><title>torpedo::arena::Arena::unlock (1 samples, 0.19%)</title><rect x="66.0853%" y="197" width="0.1938%" height="15" fill="rgb(246,142,3)" fg:x="341" fg:w="1"/><text x="66.3353%" y="207.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.19%)</title><rect x="66.0853%" y="181" width="0.1938%" height="15" fill="rgb(241,25,7)" fg:x="341" fg:w="1"/><text x="66.3353%" y="191.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.19%)</title><rect x="66.0853%" y="165" width="0.1938%" height="15" fill="rgb(242,119,39)" fg:x="341" fg:w="1"/><text x="66.3353%" y="175.50"></text></g><g><title>6109982720 (5 samples, 0.97%)</title><rect x="65.5039%" y="501" width="0.9690%" height="15" fill="rgb(241,98,45)" fg:x="338" fg:w="5"/><text x="65.7539%" y="511.50"></text></g><g><title>__pthread_deallocate (5 samples, 0.97%)</title><rect x="65.5039%" y="485" width="0.9690%" height="15" fill="rgb(254,28,30)" fg:x="338" fg:w="5"/><text x="65.7539%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5 samples, 0.97%)</title><rect x="65.5039%" y="469" width="0.9690%" height="15" fill="rgb(241,142,54)" fg:x="338" fg:w="5"/><text x="65.7539%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1 samples, 0.19%)</title><rect x="66.2791%" y="453" width="0.1938%" height="15" fill="rgb(222,85,15)" fg:x="342" fg:w="1"/><text x="66.5291%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="66.2791%" y="437" width="0.1938%" height="15" fill="rgb(210,85,47)" fg:x="342" fg:w="1"/><text x="66.5291%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1 samples, 0.19%)</title><rect x="66.2791%" y="421" width="0.1938%" height="15" fill="rgb(224,206,25)" fg:x="342" fg:w="1"/><text x="66.5291%" y="431.50"></text></g><g><title>Unknown (8 samples, 1.55%)</title><rect x="70.9302%" y="165" width="1.5504%" height="15" fill="rgb(243,201,19)" fg:x="366" fg:w="8"/><text x="71.1802%" y="175.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="72.2868%" y="149" width="0.1938%" height="15" fill="rgb(236,59,4)" fg:x="373" fg:w="1"/><text x="72.5368%" y="159.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.19%)</title><rect x="72.4806%" y="165" width="0.1938%" height="15" fill="rgb(254,179,45)" fg:x="374" fg:w="1"/><text x="72.7306%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (11 samples, 2.13%)</title><rect x="70.7364%" y="245" width="2.1318%" height="15" fill="rgb(226,14,10)" fg:x="365" fg:w="11"/><text x="70.9864%" y="255.50">c..</text></g><g><title>Unknown (11 samples, 2.13%)</title><rect x="70.7364%" y="229" width="2.1318%" height="15" fill="rgb(244,27,41)" fg:x="365" fg:w="11"/><text x="70.9864%" y="239.50">U..</text></g><g><title>Unknown (11 samples, 2.13%)</title><rect x="70.7364%" y="213" width="2.1318%" height="15" fill="rgb(235,35,32)" fg:x="365" fg:w="11"/><text x="70.9864%" y="223.50">U..</text></g><g><title>Unknown (11 samples, 2.13%)</title><rect x="70.7364%" y="197" width="2.1318%" height="15" fill="rgb(218,68,31)" fg:x="365" fg:w="11"/><text x="70.9864%" y="207.50">U..</text></g><g><title>Unknown (11 samples, 2.13%)</title><rect x="70.7364%" y="181" width="2.1318%" height="15" fill="rgb(207,120,37)" fg:x="365" fg:w="11"/><text x="70.9864%" y="191.50">U..</text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="72.6744%" y="165" width="0.1938%" height="15" fill="rgb(227,98,0)" fg:x="375" fg:w="1"/><text x="72.9244%" y="175.50"></text></g><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="78.6822%" y="117" width="0.1938%" height="15" fill="rgb(207,7,3)" fg:x="406" fg:w="1"/><text x="78.9322%" y="127.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="78.6822%" y="101" width="0.1938%" height="15" fill="rgb(206,98,19)" fg:x="406" fg:w="1"/><text x="78.9322%" y="111.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="78.6822%" y="85" width="0.1938%" height="15" fill="rgb(217,5,26)" fg:x="406" fg:w="1"/><text x="78.9322%" y="95.50"></text></g><g><title>_posix_spawnattr_set_importancewatch_port_np (1 samples, 0.19%)</title><rect x="78.8760%" y="117" width="0.1938%" height="15" fill="rgb(235,190,38)" fg:x="407" fg:w="1"/><text x="79.1260%" y="127.50"></text></g><g><title>_proc_udata_info (2 samples, 0.39%)</title><rect x="79.0698%" y="117" width="0.3876%" height="15" fill="rgb(247,86,24)" fg:x="408" fg:w="2"/><text x="79.3198%" y="127.50"></text></g><g><title>Unknown (11 samples, 2.13%)</title><rect x="77.5194%" y="133" width="2.1318%" height="15" fill="rgb(205,101,16)" fg:x="400" fg:w="11"/><text x="77.7694%" y="143.50">U..</text></g><g><title>_pthread_mutex_init (1 samples, 0.19%)</title><rect x="79.4574%" y="117" width="0.1938%" height="15" fill="rgb(246,168,33)" fg:x="410" fg:w="1"/><text x="79.7074%" y="127.50"></text></g><g><title>_kdebug_trace_string (1 samples, 0.19%)</title><rect x="79.6512%" y="133" width="0.1938%" height="15" fill="rgb(231,114,1)" fg:x="411" fg:w="1"/><text x="79.9012%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="79.6512%" y="117" width="0.1938%" height="15" fill="rgb(207,184,53)" fg:x="411" fg:w="1"/><text x="79.9012%" y="127.50"></text></g><g><title>_mach_get_times (1 samples, 0.19%)</title><rect x="79.8450%" y="133" width="0.1938%" height="15" fill="rgb(224,95,51)" fg:x="412" fg:w="1"/><text x="80.0950%" y="143.50"></text></g><g><title>_mach_get_times (1 samples, 0.19%)</title><rect x="79.8450%" y="117" width="0.1938%" height="15" fill="rgb(212,188,45)" fg:x="412" fg:w="1"/><text x="80.0950%" y="127.50"></text></g><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="80.0388%" y="133" width="0.1938%" height="15" fill="rgb(223,154,38)" fg:x="413" fg:w="1"/><text x="80.2888%" y="143.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="80.0388%" y="117" width="0.1938%" height="15" fill="rgb(251,22,52)" fg:x="413" fg:w="1"/><text x="80.2888%" y="127.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="80.0388%" y="101" width="0.1938%" height="15" fill="rgb(229,209,22)" fg:x="413" fg:w="1"/><text x="80.2888%" y="111.50"></text></g><g><title>Unknown (30 samples, 5.81%)</title><rect x="75.0000%" y="149" width="5.8140%" height="15" fill="rgb(234,138,34)" fg:x="387" fg:w="30"/><text x="75.2500%" y="159.50">Unknown</text></g><g><title>_proc_udata_info (3 samples, 0.58%)</title><rect x="80.2326%" y="133" width="0.5814%" height="15" fill="rgb(212,95,11)" fg:x="414" fg:w="3"/><text x="80.4826%" y="143.50"></text></g><g><title>_host_create_mach_voucher (1 samples, 0.19%)</title><rect x="80.8140%" y="149" width="0.1938%" height="15" fill="rgb(240,179,47)" fg:x="417" fg:w="1"/><text x="81.0640%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="80.8140%" y="133" width="0.1938%" height="15" fill="rgb(240,163,11)" fg:x="417" fg:w="1"/><text x="81.0640%" y="143.50"></text></g><g><title>_mach_reply_port (1 samples, 0.19%)</title><rect x="81.0078%" y="149" width="0.1938%" height="15" fill="rgb(236,37,12)" fg:x="418" fg:w="1"/><text x="81.2578%" y="159.50"></text></g><g><title>_thread_get_state (1 samples, 0.19%)</title><rect x="81.0078%" y="133" width="0.1938%" height="15" fill="rgb(232,164,16)" fg:x="418" fg:w="1"/><text x="81.2578%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="81.0078%" y="117" width="0.1938%" height="15" fill="rgb(244,205,15)" fg:x="418" fg:w="1"/><text x="81.2578%" y="127.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="81.2016%" y="149" width="0.1938%" height="15" fill="rgb(223,117,47)" fg:x="419" fg:w="1"/><text x="81.4516%" y="159.50"></text></g><g><title>_pthread_mutex_init (1 samples, 0.19%)</title><rect x="81.3953%" y="149" width="0.1938%" height="15" fill="rgb(244,107,35)" fg:x="420" fg:w="1"/><text x="81.6453%" y="159.50"></text></g><g><title>_task_info (1 samples, 0.19%)</title><rect x="81.5891%" y="149" width="0.1938%" height="15" fill="rgb(205,140,8)" fg:x="421" fg:w="1"/><text x="81.8391%" y="159.50"></text></g><g><title>raylib::core::RaylibBuilder::build (47 samples, 9.11%)</title><rect x="72.8682%" y="245" width="9.1085%" height="15" fill="rgb(228,84,46)" fg:x="376" fg:w="47"/><text x="73.1182%" y="255.50">raylib::core:..</text></g><g><title>raylib::core::init_window (47 samples, 9.11%)</title><rect x="72.8682%" y="229" width="9.1085%" height="15" fill="rgb(254,188,9)" fg:x="376" fg:w="47"/><text x="73.1182%" y="239.50">raylib::core:..</text></g><g><title>Unknown (47 samples, 9.11%)</title><rect x="72.8682%" y="213" width="9.1085%" height="15" fill="rgb(206,112,54)" fg:x="376" fg:w="47"/><text x="73.1182%" y="223.50">Unknown</text></g><g><title>Unknown (47 samples, 9.11%)</title><rect x="72.8682%" y="197" width="9.1085%" height="15" fill="rgb(216,84,49)" fg:x="376" fg:w="47"/><text x="73.1182%" y="207.50">Unknown</text></g><g><title>Unknown (47 samples, 9.11%)</title><rect x="72.8682%" y="181" width="9.1085%" height="15" fill="rgb(214,194,35)" fg:x="376" fg:w="47"/><text x="73.1182%" y="191.50">Unknown</text></g><g><title>Unknown (46 samples, 8.91%)</title><rect x="73.0620%" y="165" width="8.9147%" height="15" fill="rgb(249,28,3)" fg:x="377" fg:w="46"/><text x="73.3120%" y="175.50">Unknown</text></g><g><title>_task_restartable_ranges_register (1 samples, 0.19%)</title><rect x="81.7829%" y="149" width="0.1938%" height="15" fill="rgb(222,56,52)" fg:x="422" fg:w="1"/><text x="82.0329%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="81.7829%" y="133" width="0.1938%" height="15" fill="rgb(245,217,50)" fg:x="422" fg:w="1"/><text x="82.0329%" y="143.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.19%)</title><rect x="81.9767%" y="197" width="0.1938%" height="15" fill="rgb(213,201,24)" fg:x="423" fg:w="1"/><text x="82.2267%" y="207.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.19%)</title><rect x="81.9767%" y="181" width="0.1938%" height="15" fill="rgb(248,116,28)" fg:x="423" fg:w="1"/><text x="82.2267%" y="191.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.19%)</title><rect x="81.9767%" y="165" width="0.1938%" height="15" fill="rgb(219,72,43)" fg:x="423" fg:w="1"/><text x="82.2267%" y="175.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.19%)</title><rect x="81.9767%" y="149" width="0.1938%" height="15" fill="rgb(209,138,14)" fg:x="423" fg:w="1"/><text x="82.2267%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="81.9767%" y="133" width="0.1938%" height="15" fill="rgb(222,18,33)" fg:x="423" fg:w="1"/><text x="82.2267%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="81.9767%" y="117" width="0.1938%" height="15" fill="rgb(213,199,7)" fg:x="423" fg:w="1"/><text x="82.2267%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 0.39%)</title><rect x="81.9767%" y="229" width="0.3876%" height="15" fill="rgb(250,110,10)" fg:x="423" fg:w="2"/><text x="82.2267%" y="239.50"></text></g><g><title>torpedo::make_test_level (2 samples, 0.39%)</title><rect x="81.9767%" y="213" width="0.3876%" height="15" fill="rgb(248,123,6)" fg:x="423" fg:w="2"/><text x="82.2267%" y="223.50"></text></g><g><title>torpedo::physics::create_box (1 samples, 0.19%)</title><rect x="82.1705%" y="197" width="0.1938%" height="15" fill="rgb(206,91,31)" fg:x="424" fg:w="1"/><text x="82.4205%" y="207.50"></text></g><g><title>torpedo::level::TransformComp::new (1 samples, 0.19%)</title><rect x="82.1705%" y="181" width="0.1938%" height="15" fill="rgb(211,154,13)" fg:x="424" fg:w="1"/><text x="82.4205%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="82.1705%" y="165" width="0.1938%" height="15" fill="rgb(225,148,7)" fg:x="424" fg:w="1"/><text x="82.4205%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.19%)</title><rect x="82.1705%" y="149" width="0.1938%" height="15" fill="rgb(220,160,43)" fg:x="424" fg:w="1"/><text x="82.4205%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.19%)</title><rect x="82.3643%" y="229" width="0.1938%" height="15" fill="rgb(213,52,39)" fg:x="425" fg:w="1"/><text x="82.6143%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.19%)</title><rect x="82.3643%" y="213" width="0.1938%" height="15" fill="rgb(243,137,7)" fg:x="425" fg:w="1"/><text x="82.6143%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="88.9535%" y="149" width="0.1938%" height="15" fill="rgb(230,79,13)" fg:x="459" fg:w="1"/><text x="89.2035%" y="159.50"></text></g><g><title>__kernelrpc_vm_map (2 samples, 0.39%)</title><rect x="89.1473%" y="149" width="0.3876%" height="15" fill="rgb(247,105,23)" fg:x="460" fg:w="2"/><text x="89.3973%" y="159.50"></text></g><g><title>_kdebug_trace_string (1 samples, 0.19%)</title><rect x="89.5349%" y="149" width="0.1938%" height="15" fill="rgb(223,179,41)" fg:x="462" fg:w="1"/><text x="89.7849%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.19%)</title><rect x="89.5349%" y="133" width="0.1938%" height="15" fill="rgb(218,9,34)" fg:x="462" fg:w="1"/><text x="89.7849%" y="143.50"></text></g><g><title>_mach_get_times (2 samples, 0.39%)</title><rect x="89.7287%" y="149" width="0.3876%" height="15" fill="rgb(222,106,8)" fg:x="463" fg:w="2"/><text x="89.9787%" y="159.50"></text></g><g><title>_mach_port_allocate (1 samples, 0.19%)</title><rect x="90.1163%" y="149" width="0.1938%" height="15" fill="rgb(211,220,0)" fg:x="465" fg:w="1"/><text x="90.3663%" y="159.50"></text></g><g><title>_mach_reply_port (6 samples, 1.16%)</title><rect x="90.3101%" y="149" width="1.1628%" height="15" fill="rgb(229,52,16)" fg:x="466" fg:w="6"/><text x="90.5601%" y="159.50"></text></g><g><title>_thread_get_state (6 samples, 1.16%)</title><rect x="90.3101%" y="133" width="1.1628%" height="15" fill="rgb(212,155,18)" fg:x="466" fg:w="6"/><text x="90.5601%" y="143.50"></text></g><g><title>_proc_udata_info (6 samples, 1.16%)</title><rect x="90.3101%" y="117" width="1.1628%" height="15" fill="rgb(242,21,14)" fg:x="466" fg:w="6"/><text x="90.5601%" y="127.50"></text></g><g><title>_proc_udata_info (10 samples, 1.94%)</title><rect x="91.4729%" y="149" width="1.9380%" height="15" fill="rgb(222,19,48)" fg:x="472" fg:w="10"/><text x="91.7229%" y="159.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (57 samples, 11.05%)</title><rect x="82.5581%" y="229" width="11.0465%" height="15" fill="rgb(232,45,27)" fg:x="426" fg:w="57"/><text x="82.8081%" y="239.50">core::ptr::drop_..</text></g><g><title>Unknown (57 samples, 11.05%)</title><rect x="82.5581%" y="213" width="11.0465%" height="15" fill="rgb(249,103,42)" fg:x="426" fg:w="57"/><text x="82.8081%" y="223.50">Unknown</text></g><g><title>Unknown (57 samples, 11.05%)</title><rect x="82.5581%" y="197" width="11.0465%" height="15" fill="rgb(246,81,33)" fg:x="426" fg:w="57"/><text x="82.8081%" y="207.50">Unknown</text></g><g><title>Unknown (57 samples, 11.05%)</title><rect x="82.5581%" y="181" width="11.0465%" height="15" fill="rgb(252,33,42)" fg:x="426" fg:w="57"/><text x="82.8081%" y="191.50">Unknown</text></g><g><title>Unknown (56 samples, 10.85%)</title><rect x="82.7519%" y="165" width="10.8527%" height="15" fill="rgb(209,212,41)" fg:x="427" fg:w="56"/><text x="83.0019%" y="175.50">Unknown</text></g><g><title>_task_info (1 samples, 0.19%)</title><rect x="93.4109%" y="149" width="0.1938%" height="15" fill="rgb(207,154,6)" fg:x="482" fg:w="1"/><text x="93.6609%" y="159.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (3 samples, 0.58%)</title><rect x="93.6047%" y="229" width="0.5814%" height="15" fill="rgb(223,64,47)" fg:x="483" fg:w="3"/><text x="93.8547%" y="239.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (3 samples, 0.58%)</title><rect x="93.6047%" y="213" width="0.5814%" height="15" fill="rgb(211,161,38)" fg:x="483" fg:w="3"/><text x="93.8547%" y="223.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (3 samples, 0.58%)</title><rect x="93.6047%" y="197" width="0.5814%" height="15" fill="rgb(219,138,40)" fg:x="483" fg:w="3"/><text x="93.8547%" y="207.50"></text></g><g><title>__pthread_join (3 samples, 0.58%)</title><rect x="93.6047%" y="181" width="0.5814%" height="15" fill="rgb(241,228,46)" fg:x="483" fg:w="3"/><text x="93.8547%" y="191.50"></text></g><g><title>__pthread_create (1 samples, 0.19%)</title><rect x="94.1860%" y="149" width="0.1938%" height="15" fill="rgb(223,209,38)" fg:x="486" fg:w="1"/><text x="94.4360%" y="159.50"></text></g><g><title>std::thread::spawn (2 samples, 0.39%)</title><rect x="94.1860%" y="229" width="0.3876%" height="15" fill="rgb(236,164,45)" fg:x="486" fg:w="2"/><text x="94.4360%" y="239.50"></text></g><g><title>std::thread::Builder::spawn (2 samples, 0.39%)</title><rect x="94.1860%" y="213" width="0.3876%" height="15" fill="rgb(231,15,5)" fg:x="486" fg:w="2"/><text x="94.4360%" y="223.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (2 samples, 0.39%)</title><rect x="94.1860%" y="197" width="0.3876%" height="15" fill="rgb(252,35,15)" fg:x="486" fg:w="2"/><text x="94.4360%" y="207.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (2 samples, 0.39%)</title><rect x="94.1860%" y="181" width="0.3876%" height="15" fill="rgb(248,181,18)" fg:x="486" fg:w="2"/><text x="94.4360%" y="191.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (2 samples, 0.39%)</title><rect x="94.1860%" y="165" width="0.3876%" height="15" fill="rgb(233,39,42)" fg:x="486" fg:w="2"/><text x="94.4360%" y="175.50"></text></g><g><title>_pthread_jit_write_with_callback_np (1 samples, 0.19%)</title><rect x="94.3798%" y="149" width="0.1938%" height="15" fill="rgb(238,110,33)" fg:x="487" fg:w="1"/><text x="94.6298%" y="159.50"></text></g><g><title>__pthread_mutex_global_init (7 samples, 1.36%)</title><rect x="94.7674%" y="213" width="1.3566%" height="15" fill="rgb(233,195,10)" fg:x="489" fg:w="7"/><text x="95.0174%" y="223.50"></text></g><g><title>_pthread_set_qos_class_self_np (7 samples, 1.36%)</title><rect x="94.7674%" y="197" width="1.3566%" height="15" fill="rgb(254,105,3)" fg:x="489" fg:w="7"/><text x="95.0174%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (6 samples, 1.16%)</title><rect x="96.1240%" y="213" width="1.1628%" height="15" fill="rgb(221,225,9)" fg:x="496" fg:w="6"/><text x="96.3740%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (6 samples, 1.16%)</title><rect x="96.1240%" y="197" width="1.1628%" height="15" fill="rgb(224,227,45)" fg:x="496" fg:w="6"/><text x="96.3740%" y="207.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.16%)</title><rect x="96.1240%" y="181" width="1.1628%" height="15" fill="rgb(229,198,43)" fg:x="496" fg:w="6"/><text x="96.3740%" y="191.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (6 samples, 1.16%)</title><rect x="96.1240%" y="165" width="1.1628%" height="15" fill="rgb(206,209,35)" fg:x="496" fg:w="6"/><text x="96.3740%" y="175.50"></text></g><g><title>__pthread_mutex_global_init (6 samples, 1.16%)</title><rect x="96.1240%" y="149" width="1.1628%" height="15" fill="rgb(245,195,53)" fg:x="496" fg:w="6"/><text x="96.3740%" y="159.50"></text></g><g><title>_pthread_set_qos_class_self_np (6 samples, 1.16%)</title><rect x="96.1240%" y="133" width="1.1628%" height="15" fill="rgb(240,92,26)" fg:x="496" fg:w="6"/><text x="96.3740%" y="143.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_fps (1 samples, 0.19%)</title><rect x="97.2868%" y="213" width="0.1938%" height="15" fill="rgb(207,40,23)" fg:x="502" fg:w="1"/><text x="97.5368%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="97.2868%" y="197" width="0.1938%" height="15" fill="rgb(223,111,35)" fg:x="502" fg:w="1"/><text x="97.5368%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.19%)</title><rect x="97.2868%" y="181" width="0.1938%" height="15" fill="rgb(229,147,28)" fg:x="502" fg:w="1"/><text x="97.5368%" y="191.50"></text></g><g><title>_main (150 samples, 29.07%)</title><rect x="70.7364%" y="485" width="29.0698%" height="15" fill="rgb(211,29,28)" fg:x="365" fg:w="150"/><text x="70.9864%" y="495.50">_main</text></g><g><title>std::rt::lang_start_internal (150 samples, 29.07%)</title><rect x="70.7364%" y="469" width="29.0698%" height="15" fill="rgb(228,72,33)" fg:x="365" fg:w="150"/><text x="70.9864%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (150 samples, 29.07%)</title><rect x="70.7364%" y="453" width="29.0698%" height="15" fill="rgb(205,214,31)" fg:x="365" fg:w="150"/><text x="70.9864%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (150 samples, 29.07%)</title><rect x="70.7364%" y="437" width="29.0698%" height="15" fill="rgb(224,111,15)" fg:x="365" fg:w="150"/><text x="70.9864%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (150 samples, 29.07%)</title><rect x="70.7364%" y="421" width="29.0698%" height="15" fill="rgb(253,21,26)" fg:x="365" fg:w="150"/><text x="70.9864%" y="431.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (150 samples, 29.07%)</title><rect x="70.7364%" y="405" width="29.0698%" height="15" fill="rgb(245,139,43)" fg:x="365" fg:w="150"/><text x="70.9864%" y="415.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (150 samples, 29.07%)</title><rect x="70.7364%" y="389" width="29.0698%" height="15" fill="rgb(252,170,7)" fg:x="365" fg:w="150"/><text x="70.9864%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (150 samples, 29.07%)</title><rect x="70.7364%" y="373" width="29.0698%" height="15" fill="rgb(231,118,14)" fg:x="365" fg:w="150"/><text x="70.9864%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (150 samples, 29.07%)</title><rect x="70.7364%" y="357" width="29.0698%" height="15" fill="rgb(238,83,0)" fg:x="365" fg:w="150"/><text x="70.9864%" y="367.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (150 samples, 29.07%)</title><rect x="70.7364%" y="341" width="29.0698%" height="15" fill="rgb(221,39,39)" fg:x="365" fg:w="150"/><text x="70.9864%" y="351.50">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>std::rt::lang_start::{{closure}} (150 samples, 29.07%)</title><rect x="70.7364%" y="325" width="29.0698%" height="15" fill="rgb(222,119,46)" fg:x="365" fg:w="150"/><text x="70.9864%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (150 samples, 29.07%)</title><rect x="70.7364%" y="309" width="29.0698%" height="15" fill="rgb(222,165,49)" fg:x="365" fg:w="150"/><text x="70.9864%" y="319.50">std::sys::backtrace::__rust_begin_short_backtra..</text></g><g><title>core::ops::function::FnOnce::call_once (150 samples, 29.07%)</title><rect x="70.7364%" y="293" width="29.0698%" height="15" fill="rgb(219,113,52)" fg:x="365" fg:w="150"/><text x="70.9864%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (150 samples, 29.07%)</title><rect x="70.7364%" y="277" width="29.0698%" height="15" fill="rgb(214,7,15)" fg:x="365" fg:w="150"/><text x="70.9864%" y="287.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (150 samples, 29.07%)</title><rect x="70.7364%" y="261" width="29.0698%" height="15" fill="rgb(235,32,4)" fg:x="365" fg:w="150"/><text x="70.9864%" y="271.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (92 samples, 17.83%)</title><rect x="81.9767%" y="245" width="17.8295%" height="15" fill="rgb(238,90,54)" fg:x="423" fg:w="92"/><text x="82.2267%" y="255.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (27 samples, 5.23%)</title><rect x="94.5736%" y="229" width="5.2326%" height="15" fill="rgb(213,208,19)" fg:x="488" fg:w="27"/><text x="94.8236%" y="239.50">torped..</text></g><g><title>torpedo::renderer::render_object (12 samples, 2.33%)</title><rect x="97.4806%" y="213" width="2.3256%" height="15" fill="rgb(233,156,4)" fg:x="503" fg:w="12"/><text x="97.7306%" y="223.50">t..</text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (12 samples, 2.33%)</title><rect x="97.4806%" y="197" width="2.3256%" height="15" fill="rgb(207,194,5)" fg:x="503" fg:w="12"/><text x="97.7306%" y="207.50">r..</text></g><g><title>Unknown (12 samples, 2.33%)</title><rect x="97.4806%" y="181" width="2.3256%" height="15" fill="rgb(206,111,30)" fg:x="503" fg:w="12"/><text x="97.7306%" y="191.50">U..</text></g><g><title>Unknown (12 samples, 2.33%)</title><rect x="97.4806%" y="165" width="2.3256%" height="15" fill="rgb(243,70,54)" fg:x="503" fg:w="12"/><text x="97.7306%" y="175.50">U..</text></g><g><title>Unknown (9 samples, 1.74%)</title><rect x="98.0620%" y="149" width="1.7442%" height="15" fill="rgb(242,28,8)" fg:x="506" fg:w="9"/><text x="98.3120%" y="159.50"></text></g><g><title>Unknown (9 samples, 1.74%)</title><rect x="98.0620%" y="133" width="1.7442%" height="15" fill="rgb(219,106,18)" fg:x="506" fg:w="9"/><text x="98.3120%" y="143.50"></text></g><g><title>all (516 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="516"/><text x="0.2500%" y="527.50"></text></g><g><title>8451819584 (173 samples, 33.53%)</title><rect x="66.4729%" y="501" width="33.5271%" height="15" fill="rgb(236,179,52)" fg:x="343" fg:w="173"/><text x="66.7229%" y="511.50">8451819584</text></g><g><title>_pthread_atfork (1 samples, 0.19%)</title><rect x="99.8062%" y="485" width="0.1938%" height="15" fill="rgb(213,23,39)" fg:x="515" fg:w="1"/><text x="100.0562%" y="495.50"></text></g><g><title>_pthread_atfork (1 samples, 0.19%)</title><rect x="99.8062%" y="469" width="0.1938%" height="15" fill="rgb(238,48,10)" fg:x="515" fg:w="1"/><text x="100.0562%" y="479.50"></text></g><g><title>_mig_get_special_reply_port (1 samples, 0.19%)</title><rect x="99.8062%" y="453" width="0.1938%" height="15" fill="rgb(251,196,23)" fg:x="515" fg:w="1"/><text x="100.0562%" y="463.50"></text></g></svg></svg>