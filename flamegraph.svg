<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="799"><g><title>__kernelrpc_mach_vm_map (1 samples, 0.13%)</title><rect x="0.5006%" y="485" width="0.1252%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.7506%" y="495.50"></text></g><g><title>_mach_reply_port (1 samples, 0.13%)</title><rect x="0.6258%" y="485" width="0.1252%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="0.8758%" y="495.50"></text></g><g><title>_thread_get_state (1 samples, 0.13%)</title><rect x="0.6258%" y="469" width="0.1252%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.8758%" y="479.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="0.6258%" y="453" width="0.1252%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.8758%" y="463.50"></text></g><g><title>6157496320 (7 samples, 0.88%)</title><rect x="0.0000%" y="517" width="0.8761%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (5 samples, 0.63%)</title><rect x="0.2503%" y="501" width="0.6258%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="5"/><text x="0.5003%" y="511.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="0.7509%" y="485" width="0.1252%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="1.0009%" y="495.50"></text></g><g><title>_mach_reply_port (1 samples, 0.13%)</title><rect x="0.8761%" y="485" width="0.1252%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="1.1261%" y="495.50"></text></g><g><title>_thread_get_state (1 samples, 0.13%)</title><rect x="0.8761%" y="469" width="0.1252%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="1.1261%" y="479.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="0.8761%" y="453" width="0.1252%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="1.1261%" y="463.50"></text></g><g><title>6158069760 (2 samples, 0.25%)</title><rect x="0.8761%" y="517" width="0.2503%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="2"/><text x="1.1261%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (2 samples, 0.25%)</title><rect x="0.8761%" y="501" width="0.2503%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="2"/><text x="1.1261%" y="511.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="1.0013%" y="485" width="0.1252%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="1.2513%" y="495.50"></text></g><g><title>6159790080 (1 samples, 0.13%)</title><rect x="1.1264%" y="517" width="0.1252%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="1"/><text x="1.3764%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.13%)</title><rect x="1.1264%" y="501" width="0.1252%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="1"/><text x="1.3764%" y="511.50"></text></g><g><title>_mach_reply_port (1 samples, 0.13%)</title><rect x="1.1264%" y="485" width="0.1252%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="1"/><text x="1.3764%" y="495.50"></text></g><g><title>_thread_get_state (1 samples, 0.13%)</title><rect x="1.1264%" y="469" width="0.1252%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="1.3764%" y="479.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="1.1264%" y="453" width="0.1252%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="1.3764%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.63%)</title><rect x="1.2516%" y="277" width="0.6258%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="5"/><text x="1.5016%" y="287.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (5 samples, 0.63%)</title><rect x="1.2516%" y="261" width="0.6258%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="5"/><text x="1.5016%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.63%)</title><rect x="1.2516%" y="245" width="0.6258%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="5"/><text x="1.5016%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.63%)</title><rect x="1.2516%" y="229" width="0.6258%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="5"/><text x="1.5016%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.63%)</title><rect x="1.2516%" y="213" width="0.6258%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="5"/><text x="1.5016%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.63%)</title><rect x="1.2516%" y="197" width="0.6258%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="5"/><text x="1.5016%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.63%)</title><rect x="1.2516%" y="181" width="0.6258%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="5"/><text x="1.5016%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.63%)</title><rect x="1.2516%" y="165" width="0.6258%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="5"/><text x="1.5016%" y="175.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="1.8773%" y="277" width="0.1252%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="1"/><text x="2.1273%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="1.8773%" y="261" width="0.1252%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="1"/><text x="2.1273%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.13%)</title><rect x="1.8773%" y="245" width="0.1252%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="1"/><text x="2.1273%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.13%)</title><rect x="1.8773%" y="229" width="0.1252%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="2.1273%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="1.8773%" y="213" width="0.1252%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="2.1273%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.13%)</title><rect x="1.8773%" y="197" width="0.1252%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="1"/><text x="2.1273%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.13%)</title><rect x="1.8773%" y="181" width="0.1252%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="1"/><text x="2.1273%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.50%)</title><rect x="2.0025%" y="261" width="0.5006%" height="15" fill="rgb(254,191,54)" fg:x="16" fg:w="4"/><text x="2.2525%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.50%)</title><rect x="2.0025%" y="245" width="0.5006%" height="15" fill="rgb(241,83,37)" fg:x="16" fg:w="4"/><text x="2.2525%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.50%)</title><rect x="2.0025%" y="229" width="0.5006%" height="15" fill="rgb(233,36,39)" fg:x="16" fg:w="4"/><text x="2.2525%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.50%)</title><rect x="2.0025%" y="213" width="0.5006%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="4"/><text x="2.2525%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.50%)</title><rect x="2.0025%" y="197" width="0.5006%" height="15" fill="rgb(245,192,40)" fg:x="16" fg:w="4"/><text x="2.2525%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.50%)</title><rect x="2.0025%" y="181" width="0.5006%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="4"/><text x="2.2525%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.50%)</title><rect x="2.0025%" y="165" width="0.5006%" height="15" fill="rgb(232,182,51)" fg:x="16" fg:w="4"/><text x="2.2525%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4 samples, 0.50%)</title><rect x="2.0025%" y="149" width="0.5006%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="4"/><text x="2.2525%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.50%)</title><rect x="2.0025%" y="133" width="0.5006%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="4"/><text x="2.2525%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.50%)</title><rect x="2.0025%" y="117" width="0.5006%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="4"/><text x="2.2525%" y="127.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.50%)</title><rect x="2.0025%" y="101" width="0.5006%" height="15" fill="rgb(213,116,39)" fg:x="16" fg:w="4"/><text x="2.2525%" y="111.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (6 samples, 0.75%)</title><rect x="2.0025%" y="277" width="0.7509%" height="15" fill="rgb(222,207,29)" fg:x="16" fg:w="6"/><text x="2.2525%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.25%)</title><rect x="2.5031%" y="261" width="0.2503%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="2"/><text x="2.7531%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.25%)</title><rect x="2.5031%" y="245" width="0.2503%" height="15" fill="rgb(218,138,4)" fg:x="20" fg:w="2"/><text x="2.7531%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.63%)</title><rect x="2.7534%" y="277" width="0.6258%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="5"/><text x="3.0034%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.63%)</title><rect x="2.7534%" y="261" width="0.6258%" height="15" fill="rgb(239,60,40)" fg:x="22" fg:w="5"/><text x="3.0034%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.50%)</title><rect x="2.8786%" y="245" width="0.5006%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="4"/><text x="3.1286%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.50%)</title><rect x="2.8786%" y="229" width="0.5006%" height="15" fill="rgb(225,35,8)" fg:x="23" fg:w="4"/><text x="3.1286%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.50%)</title><rect x="2.8786%" y="213" width="0.5006%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="4"/><text x="3.1286%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.50%)</title><rect x="2.8786%" y="197" width="0.5006%" height="15" fill="rgb(247,123,22)" fg:x="23" fg:w="4"/><text x="3.1286%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.50%)</title><rect x="2.8786%" y="181" width="0.5006%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="4"/><text x="3.1286%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.50%)</title><rect x="2.8786%" y="165" width="0.5006%" height="15" fill="rgb(231,145,46)" fg:x="23" fg:w="4"/><text x="3.1286%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4 samples, 0.50%)</title><rect x="2.8786%" y="149" width="0.5006%" height="15" fill="rgb(251,118,11)" fg:x="23" fg:w="4"/><text x="3.1286%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.25%)</title><rect x="3.1289%" y="133" width="0.2503%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="2"/><text x="3.3789%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.25%)</title><rect x="3.1289%" y="117" width="0.2503%" height="15" fill="rgb(247,81,37)" fg:x="25" fg:w="2"/><text x="3.3789%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.25%)</title><rect x="3.1289%" y="101" width="0.2503%" height="15" fill="rgb(209,12,38)" fg:x="25" fg:w="2"/><text x="3.3789%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;usize&gt;&gt; (1 samples, 0.13%)</title><rect x="3.3792%" y="277" width="0.1252%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="1"/><text x="3.6292%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="3.3792%" y="261" width="0.1252%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="1"/><text x="3.6292%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.13%)</title><rect x="3.3792%" y="245" width="0.1252%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="1"/><text x="3.6292%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="3.3792%" y="229" width="0.1252%" height="15" fill="rgb(210,229,1)" fg:x="27" fg:w="1"/><text x="3.6292%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;usize&gt;&gt; (1 samples, 0.13%)</title><rect x="3.3792%" y="213" width="0.1252%" height="15" fill="rgb(222,148,37)" fg:x="27" fg:w="1"/><text x="3.6292%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="3.3792%" y="197" width="0.1252%" height="15" fill="rgb(234,67,33)" fg:x="27" fg:w="1"/><text x="3.6292%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (8 samples, 1.00%)</title><rect x="3.5044%" y="277" width="1.0013%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="8"/><text x="3.7544%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (8 samples, 1.00%)</title><rect x="3.5044%" y="261" width="1.0013%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="8"/><text x="3.7544%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (8 samples, 1.00%)</title><rect x="3.5044%" y="245" width="1.0013%" height="15" fill="rgb(213,79,30)" fg:x="28" fg:w="8"/><text x="3.7544%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 1.00%)</title><rect x="3.5044%" y="229" width="1.0013%" height="15" fill="rgb(246,177,23)" fg:x="28" fg:w="8"/><text x="3.7544%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 1.00%)</title><rect x="3.5044%" y="213" width="1.0013%" height="15" fill="rgb(230,62,27)" fg:x="28" fg:w="8"/><text x="3.7544%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 1.00%)</title><rect x="3.5044%" y="197" width="1.0013%" height="15" fill="rgb(216,154,8)" fg:x="28" fg:w="8"/><text x="3.7544%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (9 samples, 1.13%)</title><rect x="4.5056%" y="277" width="1.1264%" height="15" fill="rgb(244,35,45)" fg:x="36" fg:w="9"/><text x="4.7556%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (9 samples, 1.13%)</title><rect x="4.5056%" y="261" width="1.1264%" height="15" fill="rgb(251,115,12)" fg:x="36" fg:w="9"/><text x="4.7556%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (9 samples, 1.13%)</title><rect x="4.5056%" y="245" width="1.1264%" height="15" fill="rgb(240,54,50)" fg:x="36" fg:w="9"/><text x="4.7556%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (9 samples, 1.13%)</title><rect x="4.5056%" y="229" width="1.1264%" height="15" fill="rgb(233,84,52)" fg:x="36" fg:w="9"/><text x="4.7556%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (9 samples, 1.13%)</title><rect x="4.5056%" y="213" width="1.1264%" height="15" fill="rgb(207,117,47)" fg:x="36" fg:w="9"/><text x="4.7556%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.13%)</title><rect x="4.5056%" y="197" width="1.1264%" height="15" fill="rgb(249,43,39)" fg:x="36" fg:w="9"/><text x="4.7556%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockWriteGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt;&gt;&gt; (3 samples, 0.38%)</title><rect x="5.6320%" y="277" width="0.3755%" height="15" fill="rgb(209,38,44)" fg:x="45" fg:w="3"/><text x="5.8820%" y="287.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.38%)</title><rect x="5.6320%" y="261" width="0.3755%" height="15" fill="rgb(236,212,23)" fg:x="45" fg:w="3"/><text x="5.8820%" y="271.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write_unlock (3 samples, 0.38%)</title><rect x="5.6320%" y="245" width="0.3755%" height="15" fill="rgb(242,79,21)" fg:x="45" fg:w="3"/><text x="5.8820%" y="255.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (3 samples, 0.38%)</title><rect x="5.6320%" y="229" width="0.3755%" height="15" fill="rgb(211,96,35)" fg:x="45" fg:w="3"/><text x="5.8820%" y="239.50"></text></g><g><title>std::sys::sync::rwlock::queue::complete_all (3 samples, 0.38%)</title><rect x="5.6320%" y="213" width="0.3755%" height="15" fill="rgb(253,215,40)" fg:x="45" fg:w="3"/><text x="5.8820%" y="223.50"></text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (3 samples, 0.38%)</title><rect x="5.6320%" y="197" width="0.3755%" height="15" fill="rgb(211,81,21)" fg:x="45" fg:w="3"/><text x="5.8820%" y="207.50"></text></g><g><title>std::thread::Thread::unpark (3 samples, 0.38%)</title><rect x="5.6320%" y="181" width="0.3755%" height="15" fill="rgb(208,190,38)" fg:x="45" fg:w="3"/><text x="5.8820%" y="191.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (3 samples, 0.38%)</title><rect x="5.6320%" y="165" width="0.3755%" height="15" fill="rgb(235,213,38)" fg:x="45" fg:w="3"/><text x="5.8820%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockWriteGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="6.0075%" y="277" width="0.1252%" height="15" fill="rgb(237,122,38)" fg:x="48" fg:w="1"/><text x="6.2575%" y="287.50"></text></g><g><title>&lt;std::sync::poison::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="6.0075%" y="261" width="0.1252%" height="15" fill="rgb(244,218,35)" fg:x="48" fg:w="1"/><text x="6.2575%" y="271.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write_unlock (1 samples, 0.13%)</title><rect x="6.0075%" y="245" width="0.1252%" height="15" fill="rgb(240,68,47)" fg:x="48" fg:w="1"/><text x="6.2575%" y="255.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (1 samples, 0.13%)</title><rect x="6.0075%" y="229" width="0.1252%" height="15" fill="rgb(210,16,53)" fg:x="48" fg:w="1"/><text x="6.2575%" y="239.50"></text></g><g><title>std::sys::sync::rwlock::queue::complete_all (1 samples, 0.13%)</title><rect x="6.0075%" y="213" width="0.1252%" height="15" fill="rgb(235,124,12)" fg:x="48" fg:w="1"/><text x="6.2575%" y="223.50"></text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (1 samples, 0.13%)</title><rect x="6.0075%" y="197" width="0.1252%" height="15" fill="rgb(224,169,11)" fg:x="48" fg:w="1"/><text x="6.2575%" y="207.50"></text></g><g><title>std::thread::Thread::unpark (1 samples, 0.13%)</title><rect x="6.0075%" y="181" width="0.1252%" height="15" fill="rgb(250,166,2)" fg:x="48" fg:w="1"/><text x="6.2575%" y="191.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (1 samples, 0.13%)</title><rect x="6.0075%" y="165" width="0.1252%" height="15" fill="rgb(242,216,29)" fg:x="48" fg:w="1"/><text x="6.2575%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (4 samples, 0.50%)</title><rect x="6.1327%" y="277" width="0.5006%" height="15" fill="rgb(230,116,27)" fg:x="49" fg:w="4"/><text x="6.3827%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (4 samples, 0.50%)</title><rect x="6.1327%" y="261" width="0.5006%" height="15" fill="rgb(228,99,48)" fg:x="49" fg:w="4"/><text x="6.3827%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.50%)</title><rect x="6.1327%" y="245" width="0.5006%" height="15" fill="rgb(253,11,6)" fg:x="49" fg:w="4"/><text x="6.3827%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.50%)</title><rect x="6.1327%" y="229" width="0.5006%" height="15" fill="rgb(247,143,39)" fg:x="49" fg:w="4"/><text x="6.3827%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.50%)</title><rect x="6.1327%" y="213" width="0.5006%" height="15" fill="rgb(236,97,10)" fg:x="49" fg:w="4"/><text x="6.3827%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.50%)</title><rect x="6.6333%" y="261" width="0.5006%" height="15" fill="rgb(233,208,19)" fg:x="53" fg:w="4"/><text x="6.8833%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.50%)</title><rect x="6.6333%" y="245" width="0.5006%" height="15" fill="rgb(216,164,2)" fg:x="53" fg:w="4"/><text x="6.8833%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.50%)</title><rect x="6.6333%" y="229" width="0.5006%" height="15" fill="rgb(220,129,5)" fg:x="53" fg:w="4"/><text x="6.8833%" y="239.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.13%)</title><rect x="7.0088%" y="213" width="0.1252%" height="15" fill="rgb(242,17,10)" fg:x="56" fg:w="1"/><text x="7.2588%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.13%)</title><rect x="7.0088%" y="197" width="0.1252%" height="15" fill="rgb(242,107,0)" fg:x="56" fg:w="1"/><text x="7.2588%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.13%)</title><rect x="7.0088%" y="181" width="0.1252%" height="15" fill="rgb(251,28,31)" fg:x="56" fg:w="1"/><text x="7.2588%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.13%)</title><rect x="7.0088%" y="165" width="0.1252%" height="15" fill="rgb(233,223,10)" fg:x="56" fg:w="1"/><text x="7.2588%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="7.0088%" y="149" width="0.1252%" height="15" fill="rgb(215,21,27)" fg:x="56" fg:w="1"/><text x="7.2588%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (10 samples, 1.25%)</title><rect x="6.6333%" y="277" width="1.2516%" height="15" fill="rgb(232,23,21)" fg:x="53" fg:w="10"/><text x="6.8833%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (6 samples, 0.75%)</title><rect x="7.1339%" y="261" width="0.7509%" height="15" fill="rgb(244,5,23)" fg:x="57" fg:w="6"/><text x="7.3839%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (6 samples, 0.75%)</title><rect x="7.1339%" y="245" width="0.7509%" height="15" fill="rgb(226,81,46)" fg:x="57" fg:w="6"/><text x="7.3839%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (6 samples, 0.75%)</title><rect x="7.1339%" y="229" width="0.7509%" height="15" fill="rgb(247,70,30)" fg:x="57" fg:w="6"/><text x="7.3839%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.75%)</title><rect x="7.1339%" y="213" width="0.7509%" height="15" fill="rgb(212,68,19)" fg:x="57" fg:w="6"/><text x="7.3839%" y="223.50"></text></g><g><title>torpedo::physics::update (2 samples, 0.25%)</title><rect x="7.6345%" y="197" width="0.2503%" height="15" fill="rgb(240,187,13)" fg:x="61" fg:w="2"/><text x="7.8845%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.25%)</title><rect x="7.6345%" y="181" width="0.2503%" height="15" fill="rgb(223,113,26)" fg:x="61" fg:w="2"/><text x="7.8845%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.25%)</title><rect x="7.6345%" y="165" width="0.2503%" height="15" fill="rgb(206,192,2)" fg:x="61" fg:w="2"/><text x="7.8845%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.25%)</title><rect x="7.6345%" y="149" width="0.2503%" height="15" fill="rgb(241,108,4)" fg:x="61" fg:w="2"/><text x="7.8845%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.25%)</title><rect x="7.6345%" y="133" width="0.2503%" height="15" fill="rgb(247,173,49)" fg:x="61" fg:w="2"/><text x="7.8845%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="7.6345%" y="117" width="0.2503%" height="15" fill="rgb(224,114,35)" fg:x="61" fg:w="2"/><text x="7.8845%" y="127.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (2 samples, 0.25%)</title><rect x="7.8849%" y="277" width="0.2503%" height="15" fill="rgb(245,159,27)" fg:x="63" fg:w="2"/><text x="8.1349%" y="287.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (2 samples, 0.25%)</title><rect x="7.8849%" y="261" width="0.2503%" height="15" fill="rgb(245,172,44)" fg:x="63" fg:w="2"/><text x="8.1349%" y="271.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (2 samples, 0.25%)</title><rect x="7.8849%" y="245" width="0.2503%" height="15" fill="rgb(236,23,11)" fg:x="63" fg:w="2"/><text x="8.1349%" y="255.50"></text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (2 samples, 0.25%)</title><rect x="7.8849%" y="229" width="0.2503%" height="15" fill="rgb(205,117,38)" fg:x="63" fg:w="2"/><text x="8.1349%" y="239.50"></text></g><g><title>std::thread::Thread::park (2 samples, 0.25%)</title><rect x="7.8849%" y="213" width="0.2503%" height="15" fill="rgb(237,72,25)" fg:x="63" fg:w="2"/><text x="8.1349%" y="223.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (2 samples, 0.25%)</title><rect x="7.8849%" y="197" width="0.2503%" height="15" fill="rgb(244,70,9)" fg:x="63" fg:w="2"/><text x="8.1349%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="8.7610%" y="149" width="0.1252%" height="15" fill="rgb(217,125,39)" fg:x="70" fg:w="1"/><text x="9.0110%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="8.7610%" y="133" width="0.1252%" height="15" fill="rgb(235,36,10)" fg:x="70" fg:w="1"/><text x="9.0110%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="8.7610%" y="117" width="0.1252%" height="15" fill="rgb(251,123,47)" fg:x="70" fg:w="1"/><text x="9.0110%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.13%)</title><rect x="8.7610%" y="101" width="0.1252%" height="15" fill="rgb(221,13,13)" fg:x="70" fg:w="1"/><text x="9.0110%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="8.7610%" y="85" width="0.1252%" height="15" fill="rgb(238,131,9)" fg:x="70" fg:w="1"/><text x="9.0110%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="8.7610%" y="69" width="0.1252%" height="15" fill="rgb(211,50,8)" fg:x="70" fg:w="1"/><text x="9.0110%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="8.7610%" y="53" width="0.1252%" height="15" fill="rgb(245,182,24)" fg:x="70" fg:w="1"/><text x="9.0110%" y="63.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (10 samples, 1.25%)</title><rect x="8.1352%" y="229" width="1.2516%" height="15" fill="rgb(242,14,37)" fg:x="65" fg:w="10"/><text x="8.3852%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.63%)</title><rect x="8.7610%" y="213" width="0.6258%" height="15" fill="rgb(246,228,12)" fg:x="70" fg:w="5"/><text x="9.0110%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.63%)</title><rect x="8.7610%" y="197" width="0.6258%" height="15" fill="rgb(213,55,15)" fg:x="70" fg:w="5"/><text x="9.0110%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.63%)</title><rect x="8.7610%" y="181" width="0.6258%" height="15" fill="rgb(209,9,3)" fg:x="70" fg:w="5"/><text x="9.0110%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.63%)</title><rect x="8.7610%" y="165" width="0.6258%" height="15" fill="rgb(230,59,30)" fg:x="70" fg:w="5"/><text x="9.0110%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.50%)</title><rect x="8.8861%" y="149" width="0.5006%" height="15" fill="rgb(209,121,21)" fg:x="71" fg:w="4"/><text x="9.1361%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.50%)</title><rect x="8.8861%" y="133" width="0.5006%" height="15" fill="rgb(220,109,13)" fg:x="71" fg:w="4"/><text x="9.1361%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 1.63%)</title><rect x="8.1352%" y="245" width="1.6270%" height="15" fill="rgb(232,18,1)" fg:x="65" fg:w="13"/><text x="8.3852%" y="255.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (3 samples, 0.38%)</title><rect x="9.3867%" y="229" width="0.3755%" height="15" fill="rgb(215,41,42)" fg:x="75" fg:w="3"/><text x="9.6367%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.38%)</title><rect x="9.3867%" y="213" width="0.3755%" height="15" fill="rgb(224,123,36)" fg:x="75" fg:w="3"/><text x="9.6367%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.38%)</title><rect x="9.3867%" y="197" width="0.3755%" height="15" fill="rgb(240,125,3)" fg:x="75" fg:w="3"/><text x="9.6367%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.38%)</title><rect x="9.3867%" y="181" width="0.3755%" height="15" fill="rgb(205,98,50)" fg:x="75" fg:w="3"/><text x="9.6367%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.38%)</title><rect x="9.3867%" y="165" width="0.3755%" height="15" fill="rgb(205,185,37)" fg:x="75" fg:w="3"/><text x="9.6367%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.38%)</title><rect x="9.3867%" y="149" width="0.3755%" height="15" fill="rgb(238,207,15)" fg:x="75" fg:w="3"/><text x="9.6367%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.38%)</title><rect x="9.3867%" y="133" width="0.3755%" height="15" fill="rgb(213,199,42)" fg:x="75" fg:w="3"/><text x="9.6367%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.38%)</title><rect x="9.3867%" y="117" width="0.3755%" height="15" fill="rgb(235,201,11)" fg:x="75" fg:w="3"/><text x="9.6367%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.38%)</title><rect x="9.3867%" y="101" width="0.3755%" height="15" fill="rgb(207,46,11)" fg:x="75" fg:w="3"/><text x="9.6367%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.38%)</title><rect x="9.3867%" y="85" width="0.3755%" height="15" fill="rgb(241,35,35)" fg:x="75" fg:w="3"/><text x="9.6367%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.38%)</title><rect x="9.3867%" y="69" width="0.3755%" height="15" fill="rgb(243,32,47)" fg:x="75" fg:w="3"/><text x="9.6367%" y="79.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.38%)</title><rect x="9.3867%" y="53" width="0.3755%" height="15" fill="rgb(247,202,23)" fg:x="75" fg:w="3"/><text x="9.6367%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.50%)</title><rect x="9.7622%" y="213" width="0.5006%" height="15" fill="rgb(219,102,11)" fg:x="78" fg:w="4"/><text x="10.0122%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (4 samples, 0.50%)</title><rect x="9.7622%" y="197" width="0.5006%" height="15" fill="rgb(243,110,44)" fg:x="78" fg:w="4"/><text x="10.0122%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.50%)</title><rect x="9.7622%" y="181" width="0.5006%" height="15" fill="rgb(222,74,54)" fg:x="78" fg:w="4"/><text x="10.0122%" y="191.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (3 samples, 0.38%)</title><rect x="9.8874%" y="165" width="0.3755%" height="15" fill="rgb(216,99,12)" fg:x="79" fg:w="3"/><text x="10.1374%" y="175.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (3 samples, 0.38%)</title><rect x="9.8874%" y="149" width="0.3755%" height="15" fill="rgb(226,22,26)" fg:x="79" fg:w="3"/><text x="10.1374%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (3 samples, 0.38%)</title><rect x="9.8874%" y="133" width="0.3755%" height="15" fill="rgb(217,163,10)" fg:x="79" fg:w="3"/><text x="10.1374%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (3 samples, 0.38%)</title><rect x="9.8874%" y="117" width="0.3755%" height="15" fill="rgb(213,25,53)" fg:x="79" fg:w="3"/><text x="10.1374%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.38%)</title><rect x="9.8874%" y="101" width="0.3755%" height="15" fill="rgb(252,105,26)" fg:x="79" fg:w="3"/><text x="10.1374%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.38%)</title><rect x="9.8874%" y="85" width="0.3755%" height="15" fill="rgb(220,39,43)" fg:x="79" fg:w="3"/><text x="10.1374%" y="95.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.38%)</title><rect x="9.8874%" y="69" width="0.3755%" height="15" fill="rgb(229,68,48)" fg:x="79" fg:w="3"/><text x="10.1374%" y="79.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (23 samples, 2.88%)</title><rect x="8.1352%" y="277" width="2.8786%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="23"/><text x="8.3852%" y="287.50">to..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (23 samples, 2.88%)</title><rect x="8.1352%" y="261" width="2.8786%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="23"/><text x="8.3852%" y="271.50">to..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (10 samples, 1.25%)</title><rect x="9.7622%" y="245" width="1.2516%" height="15" fill="rgb(229,81,49)" fg:x="78" fg:w="10"/><text x="10.0122%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (10 samples, 1.25%)</title><rect x="9.7622%" y="229" width="1.2516%" height="15" fill="rgb(236,28,36)" fg:x="78" fg:w="10"/><text x="10.0122%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (6 samples, 0.75%)</title><rect x="10.2628%" y="213" width="0.7509%" height="15" fill="rgb(249,185,26)" fg:x="82" fg:w="6"/><text x="10.5128%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (6 samples, 0.75%)</title><rect x="10.2628%" y="197" width="0.7509%" height="15" fill="rgb(249,174,33)" fg:x="82" fg:w="6"/><text x="10.5128%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (6 samples, 0.75%)</title><rect x="10.2628%" y="181" width="0.7509%" height="15" fill="rgb(233,201,37)" fg:x="82" fg:w="6"/><text x="10.5128%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.75%)</title><rect x="10.2628%" y="165" width="0.7509%" height="15" fill="rgb(221,78,26)" fg:x="82" fg:w="6"/><text x="10.5128%" y="175.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (1 samples, 0.13%)</title><rect x="10.8886%" y="149" width="0.1252%" height="15" fill="rgb(250,127,30)" fg:x="87" fg:w="1"/><text x="11.1386%" y="159.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (1 samples, 0.13%)</title><rect x="10.8886%" y="133" width="0.1252%" height="15" fill="rgb(230,49,44)" fg:x="87" fg:w="1"/><text x="11.1386%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.13%)</title><rect x="10.8886%" y="117" width="0.1252%" height="15" fill="rgb(229,67,23)" fg:x="87" fg:w="1"/><text x="11.1386%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.13%)</title><rect x="10.8886%" y="101" width="0.1252%" height="15" fill="rgb(249,83,47)" fg:x="87" fg:w="1"/><text x="11.1386%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.13%)</title><rect x="10.8886%" y="85" width="0.1252%" height="15" fill="rgb(215,43,3)" fg:x="87" fg:w="1"/><text x="11.1386%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.13%)</title><rect x="10.8886%" y="69" width="0.1252%" height="15" fill="rgb(238,154,13)" fg:x="87" fg:w="1"/><text x="11.1386%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.13%)</title><rect x="10.8886%" y="53" width="0.1252%" height="15" fill="rgb(219,56,2)" fg:x="87" fg:w="1"/><text x="11.1386%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="10.8886%" y="37" width="0.1252%" height="15" fill="rgb(233,0,4)" fg:x="87" fg:w="1"/><text x="11.1386%" y="47.50"></text></g><g><title>torpedo::arena::Arena::new_sized (1 samples, 0.13%)</title><rect x="11.0138%" y="277" width="0.1252%" height="15" fill="rgb(235,30,7)" fg:x="88" fg:w="1"/><text x="11.2638%" y="287.50"></text></g><g><title>torpedo::arena::ArenaInternal::new_sized (1 samples, 0.13%)</title><rect x="11.0138%" y="261" width="0.1252%" height="15" fill="rgb(250,79,13)" fg:x="88" fg:w="1"/><text x="11.2638%" y="271.50"></text></g><g><title>torpedo::level::TransformComp::update (2 samples, 0.25%)</title><rect x="11.1389%" y="277" width="0.2503%" height="15" fill="rgb(211,146,34)" fg:x="89" fg:w="2"/><text x="11.3889%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.25%)</title><rect x="11.3892%" y="261" width="0.2503%" height="15" fill="rgb(228,22,38)" fg:x="91" fg:w="2"/><text x="11.6392%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.25%)</title><rect x="11.3892%" y="245" width="0.2503%" height="15" fill="rgb(235,168,5)" fg:x="91" fg:w="2"/><text x="11.6392%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.25%)</title><rect x="11.3892%" y="229" width="0.2503%" height="15" fill="rgb(221,155,16)" fg:x="91" fg:w="2"/><text x="11.6392%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.25%)</title><rect x="11.3892%" y="213" width="0.2503%" height="15" fill="rgb(215,215,53)" fg:x="91" fg:w="2"/><text x="11.6392%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.25%)</title><rect x="11.3892%" y="197" width="0.2503%" height="15" fill="rgb(223,4,10)" fg:x="91" fg:w="2"/><text x="11.6392%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.25%)</title><rect x="11.3892%" y="181" width="0.2503%" height="15" fill="rgb(234,103,6)" fg:x="91" fg:w="2"/><text x="11.6392%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="11.5144%" y="165" width="0.1252%" height="15" fill="rgb(227,97,0)" fg:x="92" fg:w="1"/><text x="11.7644%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="11.7647%" y="245" width="0.1252%" height="15" fill="rgb(234,150,53)" fg:x="94" fg:w="1"/><text x="12.0147%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="11.7647%" y="229" width="0.1252%" height="15" fill="rgb(228,201,54)" fg:x="94" fg:w="1"/><text x="12.0147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.13%)</title><rect x="11.7647%" y="213" width="0.1252%" height="15" fill="rgb(222,22,37)" fg:x="94" fg:w="1"/><text x="12.0147%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="11.7647%" y="197" width="0.1252%" height="15" fill="rgb(237,53,32)" fg:x="94" fg:w="1"/><text x="12.0147%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (5 samples, 0.63%)</title><rect x="11.8899%" y="245" width="0.6258%" height="15" fill="rgb(233,25,53)" fg:x="95" fg:w="5"/><text x="12.1399%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.63%)</title><rect x="11.8899%" y="229" width="0.6258%" height="15" fill="rgb(210,40,34)" fg:x="95" fg:w="5"/><text x="12.1399%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (5 samples, 0.63%)</title><rect x="11.8899%" y="213" width="0.6258%" height="15" fill="rgb(241,220,44)" fg:x="95" fg:w="5"/><text x="12.1399%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.63%)</title><rect x="11.8899%" y="197" width="0.6258%" height="15" fill="rgb(235,28,35)" fg:x="95" fg:w="5"/><text x="12.1399%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (5 samples, 0.63%)</title><rect x="11.8899%" y="181" width="0.6258%" height="15" fill="rgb(210,56,17)" fg:x="95" fg:w="5"/><text x="12.1399%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.63%)</title><rect x="11.8899%" y="165" width="0.6258%" height="15" fill="rgb(224,130,29)" fg:x="95" fg:w="5"/><text x="12.1399%" y="175.50"></text></g><g><title>torpedo::physics::Octree::query_box (2 samples, 0.25%)</title><rect x="12.2653%" y="149" width="0.2503%" height="15" fill="rgb(235,212,8)" fg:x="98" fg:w="2"/><text x="12.5153%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (2 samples, 0.25%)</title><rect x="12.2653%" y="133" width="0.2503%" height="15" fill="rgb(223,33,50)" fg:x="98" fg:w="2"/><text x="12.5153%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="12.2653%" y="117" width="0.2503%" height="15" fill="rgb(219,149,13)" fg:x="98" fg:w="2"/><text x="12.5153%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (2 samples, 0.25%)</title><rect x="12.2653%" y="101" width="0.2503%" height="15" fill="rgb(250,156,29)" fg:x="98" fg:w="2"/><text x="12.5153%" y="111.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="12.2653%" y="85" width="0.2503%" height="15" fill="rgb(216,193,19)" fg:x="98" fg:w="2"/><text x="12.5153%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (2 samples, 0.25%)</title><rect x="12.2653%" y="69" width="0.2503%" height="15" fill="rgb(216,135,14)" fg:x="98" fg:w="2"/><text x="12.5153%" y="79.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.25%)</title><rect x="12.2653%" y="53" width="0.2503%" height="15" fill="rgb(241,47,5)" fg:x="98" fg:w="2"/><text x="12.5153%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.63%)</title><rect x="12.5156%" y="213" width="0.6258%" height="15" fill="rgb(233,42,35)" fg:x="100" fg:w="5"/><text x="12.7656%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.63%)</title><rect x="12.5156%" y="197" width="0.6258%" height="15" fill="rgb(231,13,6)" fg:x="100" fg:w="5"/><text x="12.7656%" y="207.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.63%)</title><rect x="12.5156%" y="181" width="0.6258%" height="15" fill="rgb(207,181,40)" fg:x="100" fg:w="5"/><text x="12.7656%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.75%)</title><rect x="12.5156%" y="229" width="0.7509%" height="15" fill="rgb(254,173,49)" fg:x="100" fg:w="6"/><text x="12.7656%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.13%)</title><rect x="13.1414%" y="213" width="0.1252%" height="15" fill="rgb(221,1,38)" fg:x="105" fg:w="1"/><text x="13.3914%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.13%)</title><rect x="13.1414%" y="197" width="0.1252%" height="15" fill="rgb(206,124,46)" fg:x="105" fg:w="1"/><text x="13.3914%" y="207.50"></text></g><g><title>torpedo::physics::Octree::query_box (1 samples, 0.13%)</title><rect x="13.1414%" y="181" width="0.1252%" height="15" fill="rgb(249,21,11)" fg:x="105" fg:w="1"/><text x="13.3914%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.13%)</title><rect x="13.1414%" y="165" width="0.1252%" height="15" fill="rgb(222,201,40)" fg:x="105" fg:w="1"/><text x="13.3914%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.13%)</title><rect x="13.1414%" y="149" width="0.1252%" height="15" fill="rgb(235,61,29)" fg:x="105" fg:w="1"/><text x="13.3914%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.13%)</title><rect x="13.1414%" y="133" width="0.1252%" height="15" fill="rgb(219,207,3)" fg:x="105" fg:w="1"/><text x="13.3914%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (1 samples, 0.13%)</title><rect x="13.2666%" y="229" width="0.1252%" height="15" fill="rgb(222,56,46)" fg:x="106" fg:w="1"/><text x="13.5166%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="13.2666%" y="213" width="0.1252%" height="15" fill="rgb(239,76,54)" fg:x="106" fg:w="1"/><text x="13.5166%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (1 samples, 0.13%)</title><rect x="13.2666%" y="197" width="0.1252%" height="15" fill="rgb(231,124,27)" fg:x="106" fg:w="1"/><text x="13.5166%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="13.2666%" y="181" width="0.1252%" height="15" fill="rgb(249,195,6)" fg:x="106" fg:w="1"/><text x="13.5166%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (1 samples, 0.13%)</title><rect x="13.2666%" y="165" width="0.1252%" height="15" fill="rgb(237,174,47)" fg:x="106" fg:w="1"/><text x="13.5166%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="13.2666%" y="149" width="0.1252%" height="15" fill="rgb(206,201,31)" fg:x="106" fg:w="1"/><text x="13.5166%" y="159.50"></text></g><g><title>torpedo::physics::Octree::query_box (17 samples, 2.13%)</title><rect x="11.3892%" y="277" width="2.1277%" height="15" fill="rgb(231,57,52)" fg:x="91" fg:w="17"/><text x="11.6392%" y="287.50">t..</text></g><g><title>torpedo::physics::Octree::query_box (15 samples, 1.88%)</title><rect x="11.6395%" y="261" width="1.8773%" height="15" fill="rgb(248,177,22)" fg:x="93" fg:w="15"/><text x="11.8895%" y="271.50">t..</text></g><g><title>torpedo::physics::Octree::query_box (8 samples, 1.00%)</title><rect x="12.5156%" y="245" width="1.0013%" height="15" fill="rgb(215,211,37)" fg:x="100" fg:w="8"/><text x="12.7656%" y="255.50"></text></g><g><title>torpedo::physics::Octree::query_box (1 samples, 0.13%)</title><rect x="13.3917%" y="229" width="0.1252%" height="15" fill="rgb(241,128,51)" fg:x="107" fg:w="1"/><text x="13.6417%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.13%)</title><rect x="13.3917%" y="213" width="0.1252%" height="15" fill="rgb(227,165,31)" fg:x="107" fg:w="1"/><text x="13.6417%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="13.3917%" y="197" width="0.1252%" height="15" fill="rgb(228,167,24)" fg:x="107" fg:w="1"/><text x="13.6417%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="13.3917%" y="181" width="0.1252%" height="15" fill="rgb(228,143,12)" fg:x="107" fg:w="1"/><text x="13.6417%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="13.3917%" y="165" width="0.1252%" height="15" fill="rgb(249,149,8)" fg:x="107" fg:w="1"/><text x="13.6417%" y="175.50"></text></g><g><title>torpedo::physics::PhysicsComp::bb (1 samples, 0.13%)</title><rect x="13.5169%" y="277" width="0.1252%" height="15" fill="rgb(243,35,44)" fg:x="108" fg:w="1"/><text x="13.7669%" y="287.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (1 samples, 0.13%)</title><rect x="13.5169%" y="261" width="0.1252%" height="15" fill="rgb(246,89,9)" fg:x="108" fg:w="1"/><text x="13.7669%" y="271.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.13%)</title><rect x="13.5169%" y="245" width="0.1252%" height="15" fill="rgb(233,213,13)" fg:x="108" fg:w="1"/><text x="13.7669%" y="255.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.13%)</title><rect x="13.5169%" y="229" width="0.1252%" height="15" fill="rgb(233,141,41)" fg:x="108" fg:w="1"/><text x="13.7669%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 2.13%)</title><rect x="14.5181%" y="181" width="2.1277%" height="15" fill="rgb(239,167,4)" fg:x="116" fg:w="17"/><text x="14.7681%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 2.13%)</title><rect x="14.5181%" y="165" width="2.1277%" height="15" fill="rgb(209,217,16)" fg:x="116" fg:w="17"/><text x="14.7681%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17 samples, 2.13%)</title><rect x="14.5181%" y="149" width="2.1277%" height="15" fill="rgb(219,88,35)" fg:x="116" fg:w="17"/><text x="14.7681%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17 samples, 2.13%)</title><rect x="14.5181%" y="133" width="2.1277%" height="15" fill="rgb(220,193,23)" fg:x="116" fg:w="17"/><text x="14.7681%" y="143.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 2.13%)</title><rect x="14.5181%" y="117" width="2.1277%" height="15" fill="rgb(230,90,52)" fg:x="116" fg:w="17"/><text x="14.7681%" y="127.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 2.13%)</title><rect x="14.5181%" y="101" width="2.1277%" height="15" fill="rgb(252,106,19)" fg:x="116" fg:w="17"/><text x="14.7681%" y="111.50">a..</text></g><g><title>alloc::alloc::alloc (17 samples, 2.13%)</title><rect x="14.5181%" y="85" width="2.1277%" height="15" fill="rgb(206,74,20)" fg:x="116" fg:w="17"/><text x="14.7681%" y="95.50">a..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (98 samples, 12.27%)</title><rect x="13.6421%" y="261" width="12.2653%" height="15" fill="rgb(230,138,44)" fg:x="109" fg:w="98"/><text x="13.8921%" y="271.50">&lt;torpedo::level::T..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (91 samples, 11.39%)</title><rect x="14.5181%" y="245" width="11.3892%" height="15" fill="rgb(235,182,43)" fg:x="116" fg:w="91"/><text x="14.7681%" y="255.50">&lt;alloc::boxed::Bo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (91 samples, 11.39%)</title><rect x="14.5181%" y="229" width="11.3892%" height="15" fill="rgb(242,16,51)" fg:x="116" fg:w="91"/><text x="14.7681%" y="239.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (91 samples, 11.39%)</title><rect x="14.5181%" y="213" width="11.3892%" height="15" fill="rgb(248,9,4)" fg:x="116" fg:w="91"/><text x="14.7681%" y="223.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (91 samples, 11.39%)</title><rect x="14.5181%" y="197" width="11.3892%" height="15" fill="rgb(210,31,22)" fg:x="116" fg:w="91"/><text x="14.7681%" y="207.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (74 samples, 9.26%)</title><rect x="16.6458%" y="181" width="9.2616%" height="15" fill="rgb(239,54,39)" fg:x="133" fg:w="74"/><text x="16.8958%" y="191.50">core::ptr::co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 9.26%)</title><rect x="16.6458%" y="165" width="9.2616%" height="15" fill="rgb(230,99,41)" fg:x="133" fg:w="74"/><text x="16.8958%" y="175.50">core::intrins..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (9 samples, 1.13%)</title><rect x="25.9074%" y="245" width="1.1264%" height="15" fill="rgb(253,106,12)" fg:x="207" fg:w="9"/><text x="26.1574%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (9 samples, 1.13%)</title><rect x="25.9074%" y="229" width="1.1264%" height="15" fill="rgb(213,46,41)" fg:x="207" fg:w="9"/><text x="26.1574%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.13%)</title><rect x="25.9074%" y="213" width="1.1264%" height="15" fill="rgb(215,133,35)" fg:x="207" fg:w="9"/><text x="26.1574%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 1.13%)</title><rect x="25.9074%" y="197" width="1.1264%" height="15" fill="rgb(213,28,5)" fg:x="207" fg:w="9"/><text x="26.1574%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 1.13%)</title><rect x="25.9074%" y="181" width="1.1264%" height="15" fill="rgb(215,77,49)" fg:x="207" fg:w="9"/><text x="26.1574%" y="191.50"></text></g><g><title>torpedo::physics::col::check_collision (5 samples, 0.63%)</title><rect x="26.4080%" y="165" width="0.6258%" height="15" fill="rgb(248,100,22)" fg:x="211" fg:w="5"/><text x="26.6580%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (5 samples, 0.63%)</title><rect x="26.4080%" y="149" width="0.6258%" height="15" fill="rgb(208,67,9)" fg:x="211" fg:w="5"/><text x="26.6580%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (5 samples, 0.63%)</title><rect x="26.4080%" y="133" width="0.6258%" height="15" fill="rgb(219,133,21)" fg:x="211" fg:w="5"/><text x="26.6580%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.63%)</title><rect x="26.4080%" y="117" width="0.6258%" height="15" fill="rgb(246,46,29)" fg:x="211" fg:w="5"/><text x="26.6580%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.63%)</title><rect x="26.4080%" y="101" width="0.6258%" height="15" fill="rgb(246,185,52)" fg:x="211" fg:w="5"/><text x="26.6580%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.63%)</title><rect x="26.4080%" y="85" width="0.6258%" height="15" fill="rgb(252,136,11)" fg:x="211" fg:w="5"/><text x="26.6580%" y="95.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (5 samples, 0.63%)</title><rect x="27.0338%" y="245" width="0.6258%" height="15" fill="rgb(219,138,53)" fg:x="216" fg:w="5"/><text x="27.2838%" y="255.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (5 samples, 0.63%)</title><rect x="27.0338%" y="229" width="0.6258%" height="15" fill="rgb(211,51,23)" fg:x="216" fg:w="5"/><text x="27.2838%" y="239.50"></text></g><g><title>torpedo::physics::col::check_collision (22 samples, 2.75%)</title><rect x="25.9074%" y="261" width="2.7534%" height="15" fill="rgb(247,221,28)" fg:x="207" fg:w="22"/><text x="26.1574%" y="271.50">to..</text></g><g><title>torpedo::math::Vector4::to_matrix (8 samples, 1.00%)</title><rect x="27.6596%" y="245" width="1.0013%" height="15" fill="rgb(251,222,45)" fg:x="221" fg:w="8"/><text x="27.9096%" y="255.50"></text></g><g><title>torpedo::physics::check_collision_comps (121 samples, 15.14%)</title><rect x="13.6421%" y="277" width="15.1439%" height="15" fill="rgb(217,162,53)" fg:x="109" fg:w="121"/><text x="13.8921%" y="287.50">torpedo::physics::check..</text></g><g><title>torpedo::physics::update (1 samples, 0.13%)</title><rect x="28.6608%" y="261" width="0.1252%" height="15" fill="rgb(229,93,14)" fg:x="229" fg:w="1"/><text x="28.9108%" y="271.50"></text></g><g><title>torpedo::physics::check_collision_comps (1 samples, 0.13%)</title><rect x="28.6608%" y="245" width="0.1252%" height="15" fill="rgb(209,67,49)" fg:x="229" fg:w="1"/><text x="28.9108%" y="255.50"></text></g><g><title>__pthread_create (1 samples, 0.13%)</title><rect x="28.7860%" y="85" width="0.1252%" height="15" fill="rgb(213,87,29)" fg:x="230" fg:w="1"/><text x="29.0360%" y="95.50"></text></g><g><title>std::thread::scoped::scope (123 samples, 15.39%)</title><rect x="28.7860%" y="261" width="15.3942%" height="15" fill="rgb(205,151,52)" fg:x="230" fg:w="123"/><text x="29.0360%" y="271.50">std::thread::scoped::sco..</text></g><g><title>std::panic::catch_unwind (123 samples, 15.39%)</title><rect x="28.7860%" y="245" width="15.3942%" height="15" fill="rgb(253,215,39)" fg:x="230" fg:w="123"/><text x="29.0360%" y="255.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (123 samples, 15.39%)</title><rect x="28.7860%" y="229" width="15.3942%" height="15" fill="rgb(221,220,41)" fg:x="230" fg:w="123"/><text x="29.0360%" y="239.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (123 samples, 15.39%)</title><rect x="28.7860%" y="213" width="15.3942%" height="15" fill="rgb(218,133,21)" fg:x="230" fg:w="123"/><text x="29.0360%" y="223.50">std::panicking::try::do_..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (123 samples, 15.39%)</title><rect x="28.7860%" y="197" width="15.3942%" height="15" fill="rgb(221,193,43)" fg:x="230" fg:w="123"/><text x="29.0360%" y="207.50">&lt;core::panic::unwind_saf..</text></g><g><title>std::thread::scoped::scope::{{closure}} (123 samples, 15.39%)</title><rect x="28.7860%" y="181" width="15.3942%" height="15" fill="rgb(240,128,52)" fg:x="230" fg:w="123"/><text x="29.0360%" y="191.50">std::thread::scoped::sco..</text></g><g><title>torpedo::physics::make_octree::{{closure}} (123 samples, 15.39%)</title><rect x="28.7860%" y="165" width="15.3942%" height="15" fill="rgb(253,114,12)" fg:x="230" fg:w="123"/><text x="29.0360%" y="175.50">torpedo::physics::make_o..</text></g><g><title>std::thread::scoped::Scope::spawn (123 samples, 15.39%)</title><rect x="28.7860%" y="149" width="15.3942%" height="15" fill="rgb(215,223,47)" fg:x="230" fg:w="123"/><text x="29.0360%" y="159.50">std::thread::scoped::Sco..</text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (123 samples, 15.39%)</title><rect x="28.7860%" y="133" width="15.3942%" height="15" fill="rgb(248,225,23)" fg:x="230" fg:w="123"/><text x="29.0360%" y="143.50">std::thread::scoped::&lt;im..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (123 samples, 15.39%)</title><rect x="28.7860%" y="117" width="15.3942%" height="15" fill="rgb(250,108,0)" fg:x="230" fg:w="123"/><text x="29.0360%" y="127.50">std::thread::Builder::sp..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (123 samples, 15.39%)</title><rect x="28.7860%" y="101" width="15.3942%" height="15" fill="rgb(228,208,7)" fg:x="230" fg:w="123"/><text x="29.0360%" y="111.50">std::sys::pal::unix::thr..</text></g><g><title>_pthread_jit_write_with_callback_np (122 samples, 15.27%)</title><rect x="28.9111%" y="85" width="15.2691%" height="15" fill="rgb(244,45,10)" fg:x="231" fg:w="122"/><text x="29.1611%" y="95.50">_pthread_jit_write_with..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (344 samples, 43.05%)</title><rect x="1.2516%" y="469" width="43.0538%" height="15" fill="rgb(207,125,25)" fg:x="10" fg:w="344"/><text x="1.5016%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_on..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (344 samples, 43.05%)</title><rect x="1.2516%" y="453" width="43.0538%" height="15" fill="rgb(210,195,18)" fg:x="10" fg:w="344"/><text x="1.5016%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_on..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (344 samples, 43.05%)</title><rect x="1.2516%" y="437" width="43.0538%" height="15" fill="rgb(249,80,12)" fg:x="10" fg:w="344"/><text x="1.5016%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (344 samples, 43.05%)</title><rect x="1.2516%" y="421" width="43.0538%" height="15" fill="rgb(221,65,9)" fg:x="10" fg:w="344"/><text x="1.5016%" y="431.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (344 samples, 43.05%)</title><rect x="1.2516%" y="405" width="43.0538%" height="15" fill="rgb(235,49,36)" fg:x="10" fg:w="344"/><text x="1.5016%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (344 samples, 43.05%)</title><rect x="1.2516%" y="389" width="43.0538%" height="15" fill="rgb(225,32,20)" fg:x="10" fg:w="344"/><text x="1.5016%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (344 samples, 43.05%)</title><rect x="1.2516%" y="373" width="43.0538%" height="15" fill="rgb(215,141,46)" fg:x="10" fg:w="344"/><text x="1.5016%" y="383.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (344 samples, 43.05%)</title><rect x="1.2516%" y="357" width="43.0538%" height="15" fill="rgb(250,160,47)" fg:x="10" fg:w="344"/><text x="1.5016%" y="367.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (344 samples, 43.05%)</title><rect x="1.2516%" y="341" width="43.0538%" height="15" fill="rgb(216,222,40)" fg:x="10" fg:w="344"/><text x="1.5016%" y="351.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (344 samples, 43.05%)</title><rect x="1.2516%" y="325" width="43.0538%" height="15" fill="rgb(234,217,39)" fg:x="10" fg:w="344"/><text x="1.5016%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::level::level_loop::{{closure}} (344 samples, 43.05%)</title><rect x="1.2516%" y="309" width="43.0538%" height="15" fill="rgb(207,178,40)" fg:x="10" fg:w="344"/><text x="1.5016%" y="319.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (344 samples, 43.05%)</title><rect x="1.2516%" y="293" width="43.0538%" height="15" fill="rgb(221,136,13)" fg:x="10" fg:w="344"/><text x="1.5016%" y="303.50">torpedo::physics::update</text></g><g><title>torpedo::physics::make_octree (124 samples, 15.52%)</title><rect x="28.7860%" y="277" width="15.5194%" height="15" fill="rgb(249,199,10)" fg:x="230" fg:w="124"/><text x="29.0360%" y="287.50">torpedo::physics::make_o..</text></g><g><title>torpedo::physics::PhysicsComp::min (1 samples, 0.13%)</title><rect x="44.1802%" y="261" width="0.1252%" height="15" fill="rgb(249,222,13)" fg:x="353" fg:w="1"/><text x="44.4302%" y="271.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.13%)</title><rect x="44.1802%" y="245" width="0.1252%" height="15" fill="rgb(244,185,38)" fg:x="353" fg:w="1"/><text x="44.4302%" y="255.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.13%)</title><rect x="44.1802%" y="229" width="0.1252%" height="15" fill="rgb(236,202,9)" fg:x="353" fg:w="1"/><text x="44.4302%" y="239.50"></text></g><g><title>6161936384 (550 samples, 68.84%)</title><rect x="1.2516%" y="517" width="68.8360%" height="15" fill="rgb(250,229,37)" fg:x="10" fg:w="550"/><text x="1.5016%" y="527.50">6161936384</text></g><g><title>__pthread_deallocate (550 samples, 68.84%)</title><rect x="1.2516%" y="501" width="68.8360%" height="15" fill="rgb(206,174,23)" fg:x="10" fg:w="550"/><text x="1.5016%" y="511.50">__pthread_deallocate</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (550 samples, 68.84%)</title><rect x="1.2516%" y="485" width="68.8360%" height="15" fill="rgb(211,33,43)" fg:x="10" fg:w="550"/><text x="1.5016%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (206 samples, 25.78%)</title><rect x="44.3054%" y="469" width="25.7822%" height="15" fill="rgb(245,58,50)" fg:x="354" fg:w="206"/><text x="44.5554%" y="479.50">core::ptr::drop_in_place&lt;std::sys::pal::u..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (206 samples, 25.78%)</title><rect x="44.3054%" y="453" width="25.7822%" height="15" fill="rgb(244,68,36)" fg:x="354" fg:w="206"/><text x="44.5554%" y="463.50">&lt;std::sys::pal::unix::stack_overflow::Han..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (206 samples, 25.78%)</title><rect x="44.3054%" y="437" width="25.7822%" height="15" fill="rgb(232,229,15)" fg:x="354" fg:w="206"/><text x="44.5554%" y="447.50">std::sys::pal::unix::stack_overflow::imp:..</text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.13%)</title><rect x="70.0876%" y="261" width="0.1252%" height="15" fill="rgb(254,30,23)" fg:x="560" fg:w="1"/><text x="70.3376%" y="271.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (1 samples, 0.13%)</title><rect x="70.0876%" y="245" width="0.1252%" height="15" fill="rgb(235,160,14)" fg:x="560" fg:w="1"/><text x="70.3376%" y="255.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.13%)</title><rect x="70.0876%" y="229" width="0.1252%" height="15" fill="rgb(212,155,44)" fg:x="560" fg:w="1"/><text x="70.3376%" y="239.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.13%)</title><rect x="70.0876%" y="213" width="0.1252%" height="15" fill="rgb(226,2,50)" fg:x="560" fg:w="1"/><text x="70.3376%" y="223.50"></text></g><g><title>6164082688 (2 samples, 0.25%)</title><rect x="70.0876%" y="517" width="0.2503%" height="15" fill="rgb(234,177,6)" fg:x="560" fg:w="2"/><text x="70.3376%" y="527.50"></text></g><g><title>__pthread_deallocate (2 samples, 0.25%)</title><rect x="70.0876%" y="501" width="0.2503%" height="15" fill="rgb(217,24,9)" fg:x="560" fg:w="2"/><text x="70.3376%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.25%)</title><rect x="70.0876%" y="485" width="0.2503%" height="15" fill="rgb(220,13,46)" fg:x="560" fg:w="2"/><text x="70.3376%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.25%)</title><rect x="70.0876%" y="469" width="0.2503%" height="15" fill="rgb(239,221,27)" fg:x="560" fg:w="2"/><text x="70.3376%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.25%)</title><rect x="70.0876%" y="453" width="0.2503%" height="15" fill="rgb(222,198,25)" fg:x="560" fg:w="2"/><text x="70.3376%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.25%)</title><rect x="70.0876%" y="437" width="0.2503%" height="15" fill="rgb(211,99,13)" fg:x="560" fg:w="2"/><text x="70.3376%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.25%)</title><rect x="70.0876%" y="421" width="0.2503%" height="15" fill="rgb(232,111,31)" fg:x="560" fg:w="2"/><text x="70.3376%" y="431.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.25%)</title><rect x="70.0876%" y="405" width="0.2503%" height="15" fill="rgb(245,82,37)" fg:x="560" fg:w="2"/><text x="70.3376%" y="415.50"></text></g><g><title>std::panicking::try (2 samples, 0.25%)</title><rect x="70.0876%" y="389" width="0.2503%" height="15" fill="rgb(227,149,46)" fg:x="560" fg:w="2"/><text x="70.3376%" y="399.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.25%)</title><rect x="70.0876%" y="373" width="0.2503%" height="15" fill="rgb(218,36,50)" fg:x="560" fg:w="2"/><text x="70.3376%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.25%)</title><rect x="70.0876%" y="357" width="0.2503%" height="15" fill="rgb(226,80,48)" fg:x="560" fg:w="2"/><text x="70.3376%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.25%)</title><rect x="70.0876%" y="341" width="0.2503%" height="15" fill="rgb(238,224,15)" fg:x="560" fg:w="2"/><text x="70.3376%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.25%)</title><rect x="70.0876%" y="325" width="0.2503%" height="15" fill="rgb(241,136,10)" fg:x="560" fg:w="2"/><text x="70.3376%" y="335.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (2 samples, 0.25%)</title><rect x="70.0876%" y="309" width="0.2503%" height="15" fill="rgb(208,32,45)" fg:x="560" fg:w="2"/><text x="70.3376%" y="319.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.25%)</title><rect x="70.0876%" y="293" width="0.2503%" height="15" fill="rgb(207,135,9)" fg:x="560" fg:w="2"/><text x="70.3376%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.25%)</title><rect x="70.0876%" y="277" width="0.2503%" height="15" fill="rgb(206,86,44)" fg:x="560" fg:w="2"/><text x="70.3376%" y="287.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (1 samples, 0.13%)</title><rect x="70.2128%" y="261" width="0.1252%" height="15" fill="rgb(245,177,15)" fg:x="561" fg:w="1"/><text x="70.4628%" y="271.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (1 samples, 0.13%)</title><rect x="70.2128%" y="245" width="0.1252%" height="15" fill="rgb(206,64,50)" fg:x="561" fg:w="1"/><text x="70.4628%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="70.3379%" y="469" width="0.1252%" height="15" fill="rgb(234,36,40)" fg:x="562" fg:w="1"/><text x="70.5879%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="70.3379%" y="453" width="0.1252%" height="15" fill="rgb(213,64,8)" fg:x="562" fg:w="1"/><text x="70.5879%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="70.3379%" y="437" width="0.1252%" height="15" fill="rgb(210,75,36)" fg:x="562" fg:w="1"/><text x="70.5879%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.13%)</title><rect x="70.3379%" y="421" width="0.1252%" height="15" fill="rgb(229,88,21)" fg:x="562" fg:w="1"/><text x="70.5879%" y="431.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.13%)</title><rect x="70.3379%" y="405" width="0.1252%" height="15" fill="rgb(252,204,47)" fg:x="562" fg:w="1"/><text x="70.5879%" y="415.50"></text></g><g><title>std::panicking::try (1 samples, 0.13%)</title><rect x="70.3379%" y="389" width="0.1252%" height="15" fill="rgb(208,77,27)" fg:x="562" fg:w="1"/><text x="70.5879%" y="399.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.13%)</title><rect x="70.3379%" y="373" width="0.1252%" height="15" fill="rgb(221,76,26)" fg:x="562" fg:w="1"/><text x="70.5879%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="70.3379%" y="357" width="0.1252%" height="15" fill="rgb(225,139,18)" fg:x="562" fg:w="1"/><text x="70.5879%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.13%)</title><rect x="70.3379%" y="341" width="0.1252%" height="15" fill="rgb(230,137,11)" fg:x="562" fg:w="1"/><text x="70.5879%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.13%)</title><rect x="70.3379%" y="325" width="0.1252%" height="15" fill="rgb(212,28,1)" fg:x="562" fg:w="1"/><text x="70.5879%" y="335.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (1 samples, 0.13%)</title><rect x="70.3379%" y="309" width="0.1252%" height="15" fill="rgb(248,164,17)" fg:x="562" fg:w="1"/><text x="70.5879%" y="319.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.13%)</title><rect x="70.3379%" y="293" width="0.1252%" height="15" fill="rgb(222,171,42)" fg:x="562" fg:w="1"/><text x="70.5879%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.13%)</title><rect x="70.3379%" y="277" width="0.1252%" height="15" fill="rgb(243,84,45)" fg:x="562" fg:w="1"/><text x="70.5879%" y="287.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.13%)</title><rect x="70.3379%" y="261" width="0.1252%" height="15" fill="rgb(252,49,23)" fg:x="562" fg:w="1"/><text x="70.5879%" y="271.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.13%)</title><rect x="70.3379%" y="245" width="0.1252%" height="15" fill="rgb(215,19,7)" fg:x="562" fg:w="1"/><text x="70.5879%" y="255.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.13%)</title><rect x="70.3379%" y="229" width="0.1252%" height="15" fill="rgb(238,81,41)" fg:x="562" fg:w="1"/><text x="70.5879%" y="239.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.13%)</title><rect x="70.3379%" y="213" width="0.1252%" height="15" fill="rgb(210,199,37)" fg:x="562" fg:w="1"/><text x="70.5879%" y="223.50"></text></g><g><title>6166228992 (2 samples, 0.25%)</title><rect x="70.3379%" y="517" width="0.2503%" height="15" fill="rgb(244,192,49)" fg:x="562" fg:w="2"/><text x="70.5879%" y="527.50"></text></g><g><title>__pthread_deallocate (2 samples, 0.25%)</title><rect x="70.3379%" y="501" width="0.2503%" height="15" fill="rgb(226,211,11)" fg:x="562" fg:w="2"/><text x="70.5879%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 0.25%)</title><rect x="70.3379%" y="485" width="0.2503%" height="15" fill="rgb(236,162,54)" fg:x="562" fg:w="2"/><text x="70.5879%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1 samples, 0.13%)</title><rect x="70.4631%" y="469" width="0.1252%" height="15" fill="rgb(220,229,9)" fg:x="563" fg:w="1"/><text x="70.7131%" y="479.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="70.4631%" y="453" width="0.1252%" height="15" fill="rgb(250,87,22)" fg:x="563" fg:w="1"/><text x="70.7131%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1 samples, 0.13%)</title><rect x="70.4631%" y="437" width="0.1252%" height="15" fill="rgb(239,43,17)" fg:x="563" fg:w="1"/><text x="70.7131%" y="447.50"></text></g><g><title>Unknown (1 samples, 0.13%)</title><rect x="73.8423%" y="501" width="0.1252%" height="15" fill="rgb(231,177,25)" fg:x="590" fg:w="1"/><text x="74.0923%" y="511.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.13%)</title><rect x="73.9675%" y="501" width="0.1252%" height="15" fill="rgb(219,179,1)" fg:x="591" fg:w="1"/><text x="74.2175%" y="511.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.13%)</title><rect x="74.5932%" y="165" width="0.1252%" height="15" fill="rgb(238,219,53)" fg:x="596" fg:w="1"/><text x="74.8432%" y="175.50"></text></g><g><title>_mach_get_times (1 samples, 0.13%)</title><rect x="74.7184%" y="165" width="0.1252%" height="15" fill="rgb(232,167,36)" fg:x="597" fg:w="1"/><text x="74.9684%" y="175.50"></text></g><g><title>_mach_msg_destroy (1 samples, 0.13%)</title><rect x="74.8436%" y="165" width="0.1252%" height="15" fill="rgb(244,19,51)" fg:x="598" fg:w="1"/><text x="75.0936%" y="175.50"></text></g><g><title>Unknown (9 samples, 1.13%)</title><rect x="74.0926%" y="181" width="1.1264%" height="15" fill="rgb(224,6,22)" fg:x="592" fg:w="9"/><text x="74.3426%" y="191.50"></text></g><g><title>_proc_udata_info (2 samples, 0.25%)</title><rect x="74.9687%" y="165" width="0.2503%" height="15" fill="rgb(224,145,5)" fg:x="599" fg:w="2"/><text x="75.2187%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 1.25%)</title><rect x="74.0926%" y="261" width="1.2516%" height="15" fill="rgb(234,130,49)" fg:x="592" fg:w="10"/><text x="74.3426%" y="271.50"></text></g><g><title>Unknown (10 samples, 1.25%)</title><rect x="74.0926%" y="245" width="1.2516%" height="15" fill="rgb(254,6,2)" fg:x="592" fg:w="10"/><text x="74.3426%" y="255.50"></text></g><g><title>Unknown (10 samples, 1.25%)</title><rect x="74.0926%" y="229" width="1.2516%" height="15" fill="rgb(208,96,46)" fg:x="592" fg:w="10"/><text x="74.3426%" y="239.50"></text></g><g><title>Unknown (10 samples, 1.25%)</title><rect x="74.0926%" y="213" width="1.2516%" height="15" fill="rgb(239,3,39)" fg:x="592" fg:w="10"/><text x="74.3426%" y="223.50"></text></g><g><title>Unknown (10 samples, 1.25%)</title><rect x="74.0926%" y="197" width="1.2516%" height="15" fill="rgb(233,210,1)" fg:x="592" fg:w="10"/><text x="74.3426%" y="207.50"></text></g><g><title>_mach_reply_port (1 samples, 0.13%)</title><rect x="75.2190%" y="181" width="0.1252%" height="15" fill="rgb(244,137,37)" fg:x="601" fg:w="1"/><text x="75.4690%" y="191.50"></text></g><g><title>_thread_get_state (1 samples, 0.13%)</title><rect x="75.2190%" y="165" width="0.1252%" height="15" fill="rgb(240,136,2)" fg:x="601" fg:w="1"/><text x="75.4690%" y="175.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="75.2190%" y="149" width="0.1252%" height="15" fill="rgb(239,18,37)" fg:x="601" fg:w="1"/><text x="75.4690%" y="159.50"></text></g><g><title>_mig_get_reply_port (1 samples, 0.13%)</title><rect x="78.0976%" y="133" width="0.1252%" height="15" fill="rgb(218,185,22)" fg:x="624" fg:w="1"/><text x="78.3476%" y="143.50"></text></g><g><title>_posix_spawnattr_set_importancewatch_port_np (1 samples, 0.13%)</title><rect x="78.2228%" y="133" width="0.1252%" height="15" fill="rgb(225,218,4)" fg:x="625" fg:w="1"/><text x="78.4728%" y="143.50"></text></g><g><title>_proc_udata_info (3 samples, 0.38%)</title><rect x="78.3479%" y="133" width="0.3755%" height="15" fill="rgb(230,182,32)" fg:x="626" fg:w="3"/><text x="78.5979%" y="143.50"></text></g><g><title>Unknown (12 samples, 1.50%)</title><rect x="77.3467%" y="149" width="1.5019%" height="15" fill="rgb(242,56,43)" fg:x="618" fg:w="12"/><text x="77.5967%" y="159.50"></text></g><g><title>_pthread_mutex_init (1 samples, 0.13%)</title><rect x="78.7234%" y="133" width="0.1252%" height="15" fill="rgb(233,99,24)" fg:x="629" fg:w="1"/><text x="78.9734%" y="143.50"></text></g><g><title>_kdebug_trace_string (1 samples, 0.13%)</title><rect x="78.8486%" y="149" width="0.1252%" height="15" fill="rgb(234,209,42)" fg:x="630" fg:w="1"/><text x="79.0986%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="78.8486%" y="133" width="0.1252%" height="15" fill="rgb(227,7,12)" fg:x="630" fg:w="1"/><text x="79.0986%" y="143.50"></text></g><g><title>_mach_get_times (1 samples, 0.13%)</title><rect x="78.9737%" y="149" width="0.1252%" height="15" fill="rgb(245,203,43)" fg:x="631" fg:w="1"/><text x="79.2237%" y="159.50"></text></g><g><title>_mach_reply_port (1 samples, 0.13%)</title><rect x="79.0989%" y="149" width="0.1252%" height="15" fill="rgb(238,205,33)" fg:x="632" fg:w="1"/><text x="79.3489%" y="159.50"></text></g><g><title>_thread_get_state (1 samples, 0.13%)</title><rect x="79.0989%" y="133" width="0.1252%" height="15" fill="rgb(231,56,7)" fg:x="632" fg:w="1"/><text x="79.3489%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.13%)</title><rect x="79.0989%" y="117" width="0.1252%" height="15" fill="rgb(244,186,29)" fg:x="632" fg:w="1"/><text x="79.3489%" y="127.50"></text></g><g><title>_proc_udata_info (3 samples, 0.38%)</title><rect x="79.2240%" y="149" width="0.3755%" height="15" fill="rgb(234,111,31)" fg:x="633" fg:w="3"/><text x="79.4740%" y="159.50"></text></g><g><title>Unknown (29 samples, 3.63%)</title><rect x="76.0951%" y="165" width="3.6295%" height="15" fill="rgb(241,149,10)" fg:x="608" fg:w="29"/><text x="76.3451%" y="175.50">Unkn..</text></g><g><title>_task_info (1 samples, 0.13%)</title><rect x="79.5995%" y="149" width="0.1252%" height="15" fill="rgb(249,206,44)" fg:x="636" fg:w="1"/><text x="79.8495%" y="159.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.13%)</title><rect x="79.7247%" y="165" width="0.1252%" height="15" fill="rgb(251,153,30)" fg:x="637" fg:w="1"/><text x="79.9747%" y="175.50"></text></g><g><title>raylib::core::RaylibBuilder::build (37 samples, 4.63%)</title><rect x="75.3442%" y="261" width="4.6308%" height="15" fill="rgb(239,152,38)" fg:x="602" fg:w="37"/><text x="75.5942%" y="271.50">rayli..</text></g><g><title>raylib::core::init_window (37 samples, 4.63%)</title><rect x="75.3442%" y="245" width="4.6308%" height="15" fill="rgb(249,139,47)" fg:x="602" fg:w="37"/><text x="75.5942%" y="255.50">rayli..</text></g><g><title>Unknown (37 samples, 4.63%)</title><rect x="75.3442%" y="229" width="4.6308%" height="15" fill="rgb(244,64,35)" fg:x="602" fg:w="37"/><text x="75.5942%" y="239.50">Unkno..</text></g><g><title>Unknown (37 samples, 4.63%)</title><rect x="75.3442%" y="213" width="4.6308%" height="15" fill="rgb(216,46,15)" fg:x="602" fg:w="37"/><text x="75.5942%" y="223.50">Unkno..</text></g><g><title>Unknown (37 samples, 4.63%)</title><rect x="75.3442%" y="197" width="4.6308%" height="15" fill="rgb(250,74,19)" fg:x="602" fg:w="37"/><text x="75.5942%" y="207.50">Unkno..</text></g><g><title>Unknown (36 samples, 4.51%)</title><rect x="75.4693%" y="181" width="4.5056%" height="15" fill="rgb(249,42,33)" fg:x="603" fg:w="36"/><text x="75.7193%" y="191.50">Unkno..</text></g><g><title>_task_info (1 samples, 0.13%)</title><rect x="79.8498%" y="165" width="0.1252%" height="15" fill="rgb(242,149,17)" fg:x="638" fg:w="1"/><text x="80.0998%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.13%)</title><rect x="79.9750%" y="245" width="0.1252%" height="15" fill="rgb(244,29,21)" fg:x="639" fg:w="1"/><text x="80.2250%" y="255.50"></text></g><g><title>torpedo::make_test_level (1 samples, 0.13%)</title><rect x="79.9750%" y="229" width="0.1252%" height="15" fill="rgb(220,130,37)" fg:x="639" fg:w="1"/><text x="80.2250%" y="239.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.13%)</title><rect x="79.9750%" y="213" width="0.1252%" height="15" fill="rgb(211,67,2)" fg:x="639" fg:w="1"/><text x="80.2250%" y="223.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.13%)</title><rect x="79.9750%" y="197" width="0.1252%" height="15" fill="rgb(235,68,52)" fg:x="639" fg:w="1"/><text x="80.2250%" y="207.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.13%)</title><rect x="79.9750%" y="181" width="0.1252%" height="15" fill="rgb(246,142,3)" fg:x="639" fg:w="1"/><text x="80.2250%" y="191.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.13%)</title><rect x="79.9750%" y="165" width="0.1252%" height="15" fill="rgb(241,25,7)" fg:x="639" fg:w="1"/><text x="80.2250%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.13%)</title><rect x="79.9750%" y="149" width="0.1252%" height="15" fill="rgb(242,119,39)" fg:x="639" fg:w="1"/><text x="80.2250%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.13%)</title><rect x="79.9750%" y="133" width="0.1252%" height="15" fill="rgb(241,98,45)" fg:x="639" fg:w="1"/><text x="80.2250%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.13%)</title><rect x="80.1001%" y="245" width="0.1252%" height="15" fill="rgb(254,28,30)" fg:x="640" fg:w="1"/><text x="80.3501%" y="255.50"></text></g><g><title>__kernelrpc_mach_port_get_refs (1 samples, 0.13%)</title><rect x="82.7284%" y="165" width="0.1252%" height="15" fill="rgb(241,142,54)" fg:x="661" fg:w="1"/><text x="82.9784%" y="175.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.13%)</title><rect x="82.8536%" y="165" width="0.1252%" height="15" fill="rgb(222,85,15)" fg:x="662" fg:w="1"/><text x="83.1036%" y="175.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.13%)</title><rect x="82.9787%" y="165" width="0.1252%" height="15" fill="rgb(210,85,47)" fg:x="663" fg:w="1"/><text x="83.2287%" y="175.50"></text></g><g><title>_mach_get_times (9 samples, 1.13%)</title><rect x="83.1039%" y="165" width="1.1264%" height="15" fill="rgb(224,206,25)" fg:x="664" fg:w="9"/><text x="83.3539%" y="175.50"></text></g><g><title>_mach_port_allocate (1 samples, 0.13%)</title><rect x="84.2303%" y="165" width="0.1252%" height="15" fill="rgb(243,201,19)" fg:x="673" fg:w="1"/><text x="84.4803%" y="175.50"></text></g><g><title>_mach_reply_port (2 samples, 0.25%)</title><rect x="84.3554%" y="165" width="0.2503%" height="15" fill="rgb(236,59,4)" fg:x="674" fg:w="2"/><text x="84.6054%" y="175.50"></text></g><g><title>_thread_get_state (2 samples, 0.25%)</title><rect x="84.3554%" y="149" width="0.2503%" height="15" fill="rgb(254,179,45)" fg:x="674" fg:w="2"/><text x="84.6054%" y="159.50"></text></g><g><title>_proc_udata_info (2 samples, 0.25%)</title><rect x="84.3554%" y="133" width="0.2503%" height="15" fill="rgb(226,14,10)" fg:x="674" fg:w="2"/><text x="84.6054%" y="143.50"></text></g><g><title>_proc_udata_info (16 samples, 2.00%)</title><rect x="84.6058%" y="165" width="2.0025%" height="15" fill="rgb(244,27,41)" fg:x="676" fg:w="16"/><text x="84.8558%" y="175.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (52 samples, 6.51%)</title><rect x="80.2253%" y="245" width="6.5081%" height="15" fill="rgb(235,35,32)" fg:x="641" fg:w="52"/><text x="80.4753%" y="255.50">core::ptr..</text></g><g><title>Unknown (52 samples, 6.51%)</title><rect x="80.2253%" y="229" width="6.5081%" height="15" fill="rgb(218,68,31)" fg:x="641" fg:w="52"/><text x="80.4753%" y="239.50">Unknown</text></g><g><title>Unknown (52 samples, 6.51%)</title><rect x="80.2253%" y="213" width="6.5081%" height="15" fill="rgb(207,120,37)" fg:x="641" fg:w="52"/><text x="80.4753%" y="223.50">Unknown</text></g><g><title>Unknown (51 samples, 6.38%)</title><rect x="80.3504%" y="197" width="6.3830%" height="15" fill="rgb(227,98,0)" fg:x="642" fg:w="51"/><text x="80.6004%" y="207.50">Unknown</text></g><g><title>Unknown (50 samples, 6.26%)</title><rect x="80.4756%" y="181" width="6.2578%" height="15" fill="rgb(207,7,3)" fg:x="643" fg:w="50"/><text x="80.7256%" y="191.50">Unknown</text></g><g><title>_task_info (1 samples, 0.13%)</title><rect x="86.6083%" y="165" width="0.1252%" height="15" fill="rgb(206,98,19)" fg:x="692" fg:w="1"/><text x="86.8583%" y="175.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (3 samples, 0.38%)</title><rect x="86.7334%" y="245" width="0.3755%" height="15" fill="rgb(217,5,26)" fg:x="693" fg:w="3"/><text x="86.9834%" y="255.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (3 samples, 0.38%)</title><rect x="86.7334%" y="229" width="0.3755%" height="15" fill="rgb(235,190,38)" fg:x="693" fg:w="3"/><text x="86.9834%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (3 samples, 0.38%)</title><rect x="86.7334%" y="213" width="0.3755%" height="15" fill="rgb(247,86,24)" fg:x="693" fg:w="3"/><text x="86.9834%" y="223.50"></text></g><g><title>__pthread_join (3 samples, 0.38%)</title><rect x="86.7334%" y="197" width="0.3755%" height="15" fill="rgb(205,101,16)" fg:x="693" fg:w="3"/><text x="86.9834%" y="207.50"></text></g><g><title>std::thread::spawn (1 samples, 0.13%)</title><rect x="87.1089%" y="245" width="0.1252%" height="15" fill="rgb(246,168,33)" fg:x="696" fg:w="1"/><text x="87.3589%" y="255.50"></text></g><g><title>std::thread::Builder::spawn (1 samples, 0.13%)</title><rect x="87.1089%" y="229" width="0.1252%" height="15" fill="rgb(231,114,1)" fg:x="696" fg:w="1"/><text x="87.3589%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.13%)</title><rect x="87.1089%" y="213" width="0.1252%" height="15" fill="rgb(207,184,53)" fg:x="696" fg:w="1"/><text x="87.3589%" y="223.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (1 samples, 0.13%)</title><rect x="87.1089%" y="197" width="0.1252%" height="15" fill="rgb(224,95,51)" fg:x="696" fg:w="1"/><text x="87.3589%" y="207.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 0.13%)</title><rect x="87.1089%" y="181" width="0.1252%" height="15" fill="rgb(212,188,45)" fg:x="696" fg:w="1"/><text x="87.3589%" y="191.50"></text></g><g><title>__pthread_create (1 samples, 0.13%)</title><rect x="87.1089%" y="165" width="0.1252%" height="15" fill="rgb(223,154,38)" fg:x="696" fg:w="1"/><text x="87.3589%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt;&gt;&gt; (96 samples, 12.02%)</title><rect x="87.2340%" y="229" width="12.0150%" height="15" fill="rgb(251,22,52)" fg:x="697" fg:w="96"/><text x="87.4840%" y="239.50">core::ptr::drop_in..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 12.02%)</title><rect x="87.2340%" y="213" width="12.0150%" height="15" fill="rgb(229,209,22)" fg:x="697" fg:w="96"/><text x="87.4840%" y="223.50">&lt;std::sync::poison..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (96 samples, 12.02%)</title><rect x="87.2340%" y="197" width="12.0150%" height="15" fill="rgb(234,138,34)" fg:x="697" fg:w="96"/><text x="87.4840%" y="207.50">std::sys::sync::rw..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (96 samples, 12.02%)</title><rect x="87.2340%" y="181" width="12.0150%" height="15" fill="rgb(212,95,11)" fg:x="697" fg:w="96"/><text x="87.4840%" y="191.50">std::sys::sync::rw..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (96 samples, 12.02%)</title><rect x="87.2340%" y="165" width="12.0150%" height="15" fill="rgb(240,179,47)" fg:x="697" fg:w="96"/><text x="87.4840%" y="175.50">std::sys::sync::rw..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (96 samples, 12.02%)</title><rect x="87.2340%" y="149" width="12.0150%" height="15" fill="rgb(240,163,11)" fg:x="697" fg:w="96"/><text x="87.4840%" y="159.50">std::sys::sync::rw..</text></g><g><title>std::thread::Thread::unpark (96 samples, 12.02%)</title><rect x="87.2340%" y="133" width="12.0150%" height="15" fill="rgb(236,37,12)" fg:x="697" fg:w="96"/><text x="87.4840%" y="143.50">std::thread::Threa..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (96 samples, 12.02%)</title><rect x="87.2340%" y="117" width="12.0150%" height="15" fill="rgb(232,164,16)" fg:x="697" fg:w="96"/><text x="87.4840%" y="127.50">std::sys::sync::th..</text></g><g><title>_main (206 samples, 25.78%)</title><rect x="74.0926%" y="501" width="25.7822%" height="15" fill="rgb(244,205,15)" fg:x="592" fg:w="206"/><text x="74.3426%" y="511.50">_main</text></g><g><title>std::rt::lang_start_internal (206 samples, 25.78%)</title><rect x="74.0926%" y="485" width="25.7822%" height="15" fill="rgb(223,117,47)" fg:x="592" fg:w="206"/><text x="74.3426%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (206 samples, 25.78%)</title><rect x="74.0926%" y="469" width="25.7822%" height="15" fill="rgb(244,107,35)" fg:x="592" fg:w="206"/><text x="74.3426%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (206 samples, 25.78%)</title><rect x="74.0926%" y="453" width="25.7822%" height="15" fill="rgb(205,140,8)" fg:x="592" fg:w="206"/><text x="74.3426%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (206 samples, 25.78%)</title><rect x="74.0926%" y="437" width="25.7822%" height="15" fill="rgb(228,84,46)" fg:x="592" fg:w="206"/><text x="74.3426%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (206 samples, 25.78%)</title><rect x="74.0926%" y="421" width="25.7822%" height="15" fill="rgb(254,188,9)" fg:x="592" fg:w="206"/><text x="74.3426%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (206 samples, 25.78%)</title><rect x="74.0926%" y="405" width="25.7822%" height="15" fill="rgb(206,112,54)" fg:x="592" fg:w="206"/><text x="74.3426%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (206 samples, 25.78%)</title><rect x="74.0926%" y="389" width="25.7822%" height="15" fill="rgb(216,84,49)" fg:x="592" fg:w="206"/><text x="74.3426%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (206 samples, 25.78%)</title><rect x="74.0926%" y="373" width="25.7822%" height="15" fill="rgb(214,194,35)" fg:x="592" fg:w="206"/><text x="74.3426%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (206 samples, 25.78%)</title><rect x="74.0926%" y="357" width="25.7822%" height="15" fill="rgb(249,28,3)" fg:x="592" fg:w="206"/><text x="74.3426%" y="367.50">core::ops::function::impls::&lt;impl core::o..</text></g><g><title>std::rt::lang_start::{{closure}} (206 samples, 25.78%)</title><rect x="74.0926%" y="341" width="25.7822%" height="15" fill="rgb(222,56,52)" fg:x="592" fg:w="206"/><text x="74.3426%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (206 samples, 25.78%)</title><rect x="74.0926%" y="325" width="25.7822%" height="15" fill="rgb(245,217,50)" fg:x="592" fg:w="206"/><text x="74.3426%" y="335.50">std::sys::backtrace::__rust_begin_short_b..</text></g><g><title>core::ops::function::FnOnce::call_once (206 samples, 25.78%)</title><rect x="74.0926%" y="309" width="25.7822%" height="15" fill="rgb(213,201,24)" fg:x="592" fg:w="206"/><text x="74.3426%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (206 samples, 25.78%)</title><rect x="74.0926%" y="293" width="25.7822%" height="15" fill="rgb(248,116,28)" fg:x="592" fg:w="206"/><text x="74.3426%" y="303.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (206 samples, 25.78%)</title><rect x="74.0926%" y="277" width="25.7822%" height="15" fill="rgb(219,72,43)" fg:x="592" fg:w="206"/><text x="74.3426%" y="287.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (159 samples, 19.90%)</title><rect x="79.9750%" y="261" width="19.8999%" height="15" fill="rgb(209,138,14)" fg:x="639" fg:w="159"/><text x="80.2250%" y="271.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (101 samples, 12.64%)</title><rect x="87.2340%" y="245" width="12.6408%" height="15" fill="rgb(222,18,33)" fg:x="697" fg:w="101"/><text x="87.4840%" y="255.50">torpedo::renderer::..</text></g><g><title>torpedo::renderer::render_object (5 samples, 0.63%)</title><rect x="99.2491%" y="229" width="0.6258%" height="15" fill="rgb(213,199,7)" fg:x="793" fg:w="5"/><text x="99.4991%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (5 samples, 0.63%)</title><rect x="99.2491%" y="213" width="0.6258%" height="15" fill="rgb(250,110,10)" fg:x="793" fg:w="5"/><text x="99.4991%" y="223.50"></text></g><g><title>Unknown (5 samples, 0.63%)</title><rect x="99.2491%" y="197" width="0.6258%" height="15" fill="rgb(248,123,6)" fg:x="793" fg:w="5"/><text x="99.4991%" y="207.50"></text></g><g><title>Unknown (4 samples, 0.50%)</title><rect x="99.3742%" y="181" width="0.5006%" height="15" fill="rgb(206,91,31)" fg:x="794" fg:w="4"/><text x="99.6242%" y="191.50"></text></g><g><title>Unknown (4 samples, 0.50%)</title><rect x="99.3742%" y="165" width="0.5006%" height="15" fill="rgb(211,154,13)" fg:x="794" fg:w="4"/><text x="99.6242%" y="175.50"></text></g><g><title>Unknown (4 samples, 0.50%)</title><rect x="99.3742%" y="149" width="0.5006%" height="15" fill="rgb(225,148,7)" fg:x="794" fg:w="4"/><text x="99.6242%" y="159.50"></text></g><g><title>all (799 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(220,160,43)" fg:x="0" fg:w="799"/><text x="0.2500%" y="543.50"></text></g><g><title>8302233664 (235 samples, 29.41%)</title><rect x="70.5882%" y="517" width="29.4118%" height="15" fill="rgb(213,52,39)" fg:x="564" fg:w="235"/><text x="70.8382%" y="527.50">8302233664</text></g><g><title>_pthread_atfork (1 samples, 0.13%)</title><rect x="99.8748%" y="501" width="0.1252%" height="15" fill="rgb(243,137,7)" fg:x="798" fg:w="1"/><text x="100.1248%" y="511.50"></text></g><g><title>_pthread_atfork (1 samples, 0.13%)</title><rect x="99.8748%" y="485" width="0.1252%" height="15" fill="rgb(230,79,13)" fg:x="798" fg:w="1"/><text x="100.1248%" y="495.50"></text></g><g><title>_mig_get_special_reply_port (1 samples, 0.13%)</title><rect x="99.8748%" y="469" width="0.1252%" height="15" fill="rgb(247,105,23)" fg:x="798" fg:w="1"/><text x="100.1248%" y="479.50"></text></g></svg></svg>