<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="2927"><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="0.0683%" y="613" width="0.0342%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.3183%" y="623.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="0.0683%" y="597" width="0.0342%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3183%" y="607.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="0.0683%" y="581" width="0.0342%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3183%" y="591.50"></text></g><g><title>6088699904 (4 samples, 0.14%)</title><rect x="0.0000%" y="645" width="0.1367%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.07%)</title><rect x="0.0683%" y="629" width="0.0683%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.3183%" y="639.50"></text></g><g><title>_task_info (1 samples, 0.03%)</title><rect x="0.1025%" y="613" width="0.0342%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3525%" y="623.50"></text></g><g><title>6089273344 (2 samples, 0.07%)</title><rect x="0.1367%" y="645" width="0.0683%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="2"/><text x="0.3867%" y="655.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.07%)</title><rect x="0.1367%" y="629" width="0.0683%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="0.3867%" y="639.50"></text></g><g><title>___workq_open (4 samples, 0.14%)</title><rect x="0.2392%" y="613" width="0.1367%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="4"/><text x="0.4892%" y="623.50"></text></g><g><title>6089846784 (9 samples, 0.31%)</title><rect x="0.2050%" y="645" width="0.3075%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="9"/><text x="0.4550%" y="655.50"></text></g><g><title>__pthread_cond_wait (9 samples, 0.31%)</title><rect x="0.2050%" y="629" width="0.3075%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="9"/><text x="0.4550%" y="639.50"></text></g><g><title>_mach_continuous_time (4 samples, 0.14%)</title><rect x="0.3758%" y="613" width="0.1367%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="4"/><text x="0.6258%" y="623.50"></text></g><g><title>__kernelrpc_vm_read (4 samples, 0.14%)</title><rect x="0.3758%" y="597" width="0.1367%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="4"/><text x="0.6258%" y="607.50"></text></g><g><title>_proc_clear_dirty (4 samples, 0.14%)</title><rect x="0.3758%" y="581" width="0.1367%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="4"/><text x="0.6258%" y="591.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.03%)</title><rect x="0.6491%" y="613" width="0.0342%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="0.8991%" y="623.50"></text></g><g><title>6090420224 (6 samples, 0.20%)</title><rect x="0.5125%" y="645" width="0.2050%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="6"/><text x="0.7625%" y="655.50"></text></g><g><title>__pthread_wqthread_setup (5 samples, 0.17%)</title><rect x="0.5466%" y="629" width="0.1708%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="5"/><text x="0.7966%" y="639.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="0.6833%" y="613" width="0.0342%" height="15" fill="rgb(210,31,41)" fg:x="20" fg:w="1"/><text x="0.9333%" y="623.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="0.6833%" y="597" width="0.0342%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="1"/><text x="0.9333%" y="607.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="0.6833%" y="581" width="0.0342%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="0.9333%" y="591.50"></text></g><g><title>6090993664 (3 samples, 0.10%)</title><rect x="0.7175%" y="645" width="0.1025%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="3"/><text x="0.9675%" y="655.50"></text></g><g><title>__pthread_wqthread_setup (3 samples, 0.10%)</title><rect x="0.7175%" y="629" width="0.1025%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="3"/><text x="0.9675%" y="639.50"></text></g><g><title>_task_info (1 samples, 0.03%)</title><rect x="0.7858%" y="613" width="0.0342%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="1"/><text x="1.0358%" y="623.50"></text></g><g><title>6091567104 (1 samples, 0.03%)</title><rect x="0.8200%" y="645" width="0.0342%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="1"/><text x="1.0700%" y="655.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.03%)</title><rect x="0.8200%" y="629" width="0.0342%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="1"/><text x="1.0700%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.8541%" y="405" width="0.0342%" height="15" fill="rgb(249,31,29)" fg:x="25" fg:w="1"/><text x="1.1041%" y="415.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.8541%" y="389" width="0.0342%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="1"/><text x="1.1041%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="0.8541%" y="373" width="0.0342%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="1"/><text x="1.1041%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="0.8541%" y="357" width="0.0342%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="1"/><text x="1.1041%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="0.8541%" y="341" width="0.0342%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="1"/><text x="1.1041%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="0.8541%" y="325" width="0.0342%" height="15" fill="rgb(209,103,24)" fg:x="25" fg:w="1"/><text x="1.1041%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="0.8541%" y="309" width="0.0342%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="1"/><text x="1.1041%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="0.8541%" y="293" width="0.0342%" height="15" fill="rgb(213,181,19)" fg:x="25" fg:w="1"/><text x="1.1041%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="0.8883%" y="325" width="0.1025%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="3"/><text x="1.1383%" y="335.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="0.8883%" y="309" width="0.1025%" height="15" fill="rgb(241,83,37)" fg:x="26" fg:w="3"/><text x="1.1383%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="0.8883%" y="293" width="0.1025%" height="15" fill="rgb(233,36,39)" fg:x="26" fg:w="3"/><text x="1.1383%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.10%)</title><rect x="0.8883%" y="277" width="0.1025%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="3"/><text x="1.1383%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.10%)</title><rect x="0.8883%" y="261" width="0.1025%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="3"/><text x="1.1383%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.10%)</title><rect x="0.8883%" y="245" width="0.1025%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="3"/><text x="1.1383%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.10%)</title><rect x="0.8883%" y="229" width="0.1025%" height="15" fill="rgb(232,182,51)" fg:x="26" fg:w="3"/><text x="1.1383%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="0.8883%" y="213" width="0.1025%" height="15" fill="rgb(231,60,39)" fg:x="26" fg:w="3"/><text x="1.1383%" y="223.50"></text></g><g><title>6094286848 (5 samples, 0.17%)</title><rect x="0.8541%" y="645" width="0.1708%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="5"/><text x="1.1041%" y="655.50"></text></g><g><title>__pthread_cond_wait (5 samples, 0.17%)</title><rect x="0.8541%" y="629" width="0.1708%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="5"/><text x="1.1041%" y="639.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5 samples, 0.17%)</title><rect x="0.8541%" y="613" width="0.1708%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="5"/><text x="1.1041%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.17%)</title><rect x="0.8541%" y="597" width="0.1708%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="5"/><text x="1.1041%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.17%)</title><rect x="0.8541%" y="581" width="0.1708%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="5"/><text x="1.1041%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.17%)</title><rect x="0.8541%" y="565" width="0.1708%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="5"/><text x="1.1041%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (5 samples, 0.17%)</title><rect x="0.8541%" y="549" width="0.1708%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="5"/><text x="1.1041%" y="559.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.17%)</title><rect x="0.8541%" y="533" width="0.1708%" height="15" fill="rgb(239,60,40)" fg:x="25" fg:w="5"/><text x="1.1041%" y="543.50"></text></g><g><title>std::panicking::try (5 samples, 0.17%)</title><rect x="0.8541%" y="517" width="0.1708%" height="15" fill="rgb(206,27,48)" fg:x="25" fg:w="5"/><text x="1.1041%" y="527.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.17%)</title><rect x="0.8541%" y="501" width="0.1708%" height="15" fill="rgb(225,35,8)" fg:x="25" fg:w="5"/><text x="1.1041%" y="511.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.17%)</title><rect x="0.8541%" y="485" width="0.1708%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="5"/><text x="1.1041%" y="495.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (5 samples, 0.17%)</title><rect x="0.8541%" y="469" width="0.1708%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="5"/><text x="1.1041%" y="479.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5 samples, 0.17%)</title><rect x="0.8541%" y="453" width="0.1708%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="5"/><text x="1.1041%" y="463.50"></text></g><g><title>torpedo::level::level_loop::{{closure}} (5 samples, 0.17%)</title><rect x="0.8541%" y="437" width="0.1708%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="5"/><text x="1.1041%" y="447.50"></text></g><g><title>torpedo::physics::update (5 samples, 0.17%)</title><rect x="0.8541%" y="421" width="0.1708%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="5"/><text x="1.1041%" y="431.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (4 samples, 0.14%)</title><rect x="0.8883%" y="405" width="0.1367%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="4"/><text x="1.1383%" y="415.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (4 samples, 0.14%)</title><rect x="0.8883%" y="389" width="0.1367%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="4"/><text x="1.1383%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (4 samples, 0.14%)</title><rect x="0.8883%" y="373" width="0.1367%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="4"/><text x="1.1383%" y="383.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (4 samples, 0.14%)</title><rect x="0.8883%" y="357" width="0.1367%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="4"/><text x="1.1383%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (4 samples, 0.14%)</title><rect x="0.8883%" y="341" width="0.1367%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="4"/><text x="1.1383%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9908%" y="325" width="0.0342%" height="15" fill="rgb(221,10,30)" fg:x="29" fg:w="1"/><text x="1.2408%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.03%)</title><rect x="0.9908%" y="309" width="0.0342%" height="15" fill="rgb(210,229,1)" fg:x="29" fg:w="1"/><text x="1.2408%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9908%" y="293" width="0.0342%" height="15" fill="rgb(222,148,37)" fg:x="29" fg:w="1"/><text x="1.2408%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9908%" y="277" width="0.0342%" height="15" fill="rgb(234,67,33)" fg:x="29" fg:w="1"/><text x="1.2408%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.03%)</title><rect x="0.9908%" y="261" width="0.0342%" height="15" fill="rgb(247,98,35)" fg:x="29" fg:w="1"/><text x="1.2408%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.9908%" y="245" width="0.0342%" height="15" fill="rgb(247,138,52)" fg:x="29" fg:w="1"/><text x="1.2408%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (71 samples, 2.43%)</title><rect x="1.0249%" y="309" width="2.4257%" height="15" fill="rgb(213,79,30)" fg:x="30" fg:w="71"/><text x="1.2749%" y="319.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (71 samples, 2.43%)</title><rect x="1.0249%" y="293" width="2.4257%" height="15" fill="rgb(246,177,23)" fg:x="30" fg:w="71"/><text x="1.2749%" y="303.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (71 samples, 2.43%)</title><rect x="1.0249%" y="277" width="2.4257%" height="15" fill="rgb(230,62,27)" fg:x="30" fg:w="71"/><text x="1.2749%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (71 samples, 2.43%)</title><rect x="1.0249%" y="261" width="2.4257%" height="15" fill="rgb(216,154,8)" fg:x="30" fg:w="71"/><text x="1.2749%" y="271.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 2.43%)</title><rect x="1.0249%" y="245" width="2.4257%" height="15" fill="rgb(244,35,45)" fg:x="30" fg:w="71"/><text x="1.2749%" y="255.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 2.43%)</title><rect x="1.0249%" y="229" width="2.4257%" height="15" fill="rgb(251,115,12)" fg:x="30" fg:w="71"/><text x="1.2749%" y="239.50">al..</text></g><g><title>alloc::alloc::alloc (71 samples, 2.43%)</title><rect x="1.0249%" y="213" width="2.4257%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="71"/><text x="1.2749%" y="223.50">al..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 2.66%)</title><rect x="1.0249%" y="405" width="2.6648%" height="15" fill="rgb(233,84,52)" fg:x="30" fg:w="78"/><text x="1.2749%" y="415.50">&lt;c..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (78 samples, 2.66%)</title><rect x="1.0249%" y="389" width="2.6648%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="78"/><text x="1.2749%" y="399.50">&lt;t..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (78 samples, 2.66%)</title><rect x="1.0249%" y="373" width="2.6648%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="78"/><text x="1.2749%" y="383.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 2.66%)</title><rect x="1.0249%" y="357" width="2.6648%" height="15" fill="rgb(209,38,44)" fg:x="30" fg:w="78"/><text x="1.2749%" y="367.50">al..</text></g><g><title>alloc::slice::hack::to_vec (78 samples, 2.66%)</title><rect x="1.0249%" y="341" width="2.6648%" height="15" fill="rgb(236,212,23)" fg:x="30" fg:w="78"/><text x="1.2749%" y="351.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 2.66%)</title><rect x="1.0249%" y="325" width="2.6648%" height="15" fill="rgb(242,79,21)" fg:x="30" fg:w="78"/><text x="1.2749%" y="335.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.24%)</title><rect x="3.4506%" y="309" width="0.2392%" height="15" fill="rgb(211,96,35)" fg:x="101" fg:w="7"/><text x="3.7006%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.24%)</title><rect x="3.4506%" y="293" width="0.2392%" height="15" fill="rgb(253,215,40)" fg:x="101" fg:w="7"/><text x="3.7006%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.99%)</title><rect x="3.6898%" y="325" width="0.9908%" height="15" fill="rgb(211,81,21)" fg:x="108" fg:w="29"/><text x="3.9398%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.99%)</title><rect x="3.6898%" y="309" width="0.9908%" height="15" fill="rgb(208,190,38)" fg:x="108" fg:w="29"/><text x="3.9398%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29 samples, 0.99%)</title><rect x="3.6898%" y="293" width="0.9908%" height="15" fill="rgb(235,213,38)" fg:x="108" fg:w="29"/><text x="3.9398%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29 samples, 0.99%)</title><rect x="3.6898%" y="277" width="0.9908%" height="15" fill="rgb(237,122,38)" fg:x="108" fg:w="29"/><text x="3.9398%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.99%)</title><rect x="3.6898%" y="261" width="0.9908%" height="15" fill="rgb(244,218,35)" fg:x="108" fg:w="29"/><text x="3.9398%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.99%)</title><rect x="3.6898%" y="245" width="0.9908%" height="15" fill="rgb(240,68,47)" fg:x="108" fg:w="29"/><text x="3.9398%" y="255.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.99%)</title><rect x="3.6898%" y="229" width="0.9908%" height="15" fill="rgb(210,16,53)" fg:x="108" fg:w="29"/><text x="3.9398%" y="239.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (32 samples, 1.09%)</title><rect x="3.6898%" y="405" width="1.0933%" height="15" fill="rgb(235,124,12)" fg:x="108" fg:w="32"/><text x="3.9398%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (32 samples, 1.09%)</title><rect x="3.6898%" y="389" width="1.0933%" height="15" fill="rgb(224,169,11)" fg:x="108" fg:w="32"/><text x="3.9398%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 1.09%)</title><rect x="3.6898%" y="373" width="1.0933%" height="15" fill="rgb(250,166,2)" fg:x="108" fg:w="32"/><text x="3.9398%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 1.09%)</title><rect x="3.6898%" y="357" width="1.0933%" height="15" fill="rgb(242,216,29)" fg:x="108" fg:w="32"/><text x="3.9398%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 1.09%)</title><rect x="3.6898%" y="341" width="1.0933%" height="15" fill="rgb(230,116,27)" fg:x="108" fg:w="32"/><text x="3.9398%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.10%)</title><rect x="4.6806%" y="325" width="0.1025%" height="15" fill="rgb(228,99,48)" fg:x="137" fg:w="3"/><text x="4.9306%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="4.6806%" y="309" width="0.1025%" height="15" fill="rgb(253,11,6)" fg:x="137" fg:w="3"/><text x="4.9306%" y="319.50"></text></g><g><title>___workq_open (2 samples, 0.07%)</title><rect x="14.4175%" y="309" width="0.0683%" height="15" fill="rgb(247,143,39)" fg:x="422" fg:w="2"/><text x="14.6675%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (285 samples, 9.74%)</title><rect x="4.7831%" y="405" width="9.7369%" height="15" fill="rgb(236,97,10)" fg:x="140" fg:w="285"/><text x="5.0331%" y="415.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (285 samples, 9.74%)</title><rect x="4.7831%" y="389" width="9.7369%" height="15" fill="rgb(233,208,19)" fg:x="140" fg:w="285"/><text x="5.0331%" y="399.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (285 samples, 9.74%)</title><rect x="4.7831%" y="373" width="9.7369%" height="15" fill="rgb(216,164,2)" fg:x="140" fg:w="285"/><text x="5.0331%" y="383.50">core::ptr::dro..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (285 samples, 9.74%)</title><rect x="4.7831%" y="357" width="9.7369%" height="15" fill="rgb(220,129,5)" fg:x="140" fg:w="285"/><text x="5.0331%" y="367.50">&lt;alloc::boxed:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (285 samples, 9.74%)</title><rect x="4.7831%" y="341" width="9.7369%" height="15" fill="rgb(242,17,10)" fg:x="140" fg:w="285"/><text x="5.0331%" y="351.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::dealloc (285 samples, 9.74%)</title><rect x="4.7831%" y="325" width="9.7369%" height="15" fill="rgb(242,107,0)" fg:x="140" fg:w="285"/><text x="5.0331%" y="335.50">alloc::alloc::..</text></g><g><title>torpedo::physics::update (1 samples, 0.03%)</title><rect x="14.4858%" y="309" width="0.0342%" height="15" fill="rgb(251,28,31)" fg:x="424" fg:w="1"/><text x="14.7358%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (1 samples, 0.03%)</title><rect x="14.4858%" y="293" width="0.0342%" height="15" fill="rgb(233,223,10)" fg:x="424" fg:w="1"/><text x="14.7358%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.03%)</title><rect x="14.4858%" y="277" width="0.0342%" height="15" fill="rgb(215,21,27)" fg:x="424" fg:w="1"/><text x="14.7358%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.03%)</title><rect x="14.4858%" y="261" width="0.0342%" height="15" fill="rgb(232,23,21)" fg:x="424" fg:w="1"/><text x="14.7358%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="14.4858%" y="245" width="0.0342%" height="15" fill="rgb(244,5,23)" fg:x="424" fg:w="1"/><text x="14.7358%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="14.4858%" y="229" width="0.0342%" height="15" fill="rgb(226,81,46)" fg:x="424" fg:w="1"/><text x="14.7358%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="14.4858%" y="213" width="0.0342%" height="15" fill="rgb(247,70,30)" fg:x="424" fg:w="1"/><text x="14.7358%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (9 samples, 0.31%)</title><rect x="14.5200%" y="405" width="0.3075%" height="15" fill="rgb(212,68,19)" fg:x="425" fg:w="9"/><text x="14.7700%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (9 samples, 0.31%)</title><rect x="14.5200%" y="389" width="0.3075%" height="15" fill="rgb(240,187,13)" fg:x="425" fg:w="9"/><text x="14.7700%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (9 samples, 0.31%)</title><rect x="14.5200%" y="373" width="0.3075%" height="15" fill="rgb(223,113,26)" fg:x="425" fg:w="9"/><text x="14.7700%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (9 samples, 0.31%)</title><rect x="14.5200%" y="357" width="0.3075%" height="15" fill="rgb(206,192,2)" fg:x="425" fg:w="9"/><text x="14.7700%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (9 samples, 0.31%)</title><rect x="14.5200%" y="341" width="0.3075%" height="15" fill="rgb(241,108,4)" fg:x="425" fg:w="9"/><text x="14.7700%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.31%)</title><rect x="14.5200%" y="325" width="0.3075%" height="15" fill="rgb(247,173,49)" fg:x="425" fg:w="9"/><text x="14.7700%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (2 samples, 0.07%)</title><rect x="14.8275%" y="405" width="0.0683%" height="15" fill="rgb(224,114,35)" fg:x="434" fg:w="2"/><text x="15.0775%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (2 samples, 0.07%)</title><rect x="14.8275%" y="389" width="0.0683%" height="15" fill="rgb(245,159,27)" fg:x="434" fg:w="2"/><text x="15.0775%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="14.8275%" y="373" width="0.0683%" height="15" fill="rgb(245,172,44)" fg:x="434" fg:w="2"/><text x="15.0775%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="14.8275%" y="357" width="0.0683%" height="15" fill="rgb(236,23,11)" fg:x="434" fg:w="2"/><text x="15.0775%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="14.8275%" y="341" width="0.0683%" height="15" fill="rgb(205,117,38)" fg:x="434" fg:w="2"/><text x="15.0775%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (593 samples, 20.26%)</title><rect x="15.1008%" y="229" width="20.2597%" height="15" fill="rgb(237,72,25)" fg:x="442" fg:w="593"/><text x="15.3508%" y="239.50">alloc::vec::Vec&lt;T,A&gt;::with_capac..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (593 samples, 20.26%)</title><rect x="15.1008%" y="213" width="20.2597%" height="15" fill="rgb(244,70,9)" fg:x="442" fg:w="593"/><text x="15.3508%" y="223.50">alloc::raw_vec::RawVec&lt;T,A&gt;::wit..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (593 samples, 20.26%)</title><rect x="15.1008%" y="197" width="20.2597%" height="15" fill="rgb(217,125,39)" fg:x="442" fg:w="593"/><text x="15.3508%" y="207.50">alloc::raw_vec::RawVecInner&lt;A&gt;::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (593 samples, 20.26%)</title><rect x="15.1008%" y="181" width="20.2597%" height="15" fill="rgb(235,36,10)" fg:x="442" fg:w="593"/><text x="15.3508%" y="191.50">alloc::raw_vec::RawVecInner&lt;A&gt;::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (593 samples, 20.26%)</title><rect x="15.1008%" y="165" width="20.2597%" height="15" fill="rgb(251,123,47)" fg:x="442" fg:w="593"/><text x="15.3508%" y="175.50">&lt;alloc::alloc::Global as core::a..</text></g><g><title>alloc::alloc::Global::alloc_impl (593 samples, 20.26%)</title><rect x="15.1008%" y="149" width="20.2597%" height="15" fill="rgb(221,13,13)" fg:x="442" fg:w="593"/><text x="15.3508%" y="159.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (593 samples, 20.26%)</title><rect x="15.1008%" y="133" width="20.2597%" height="15" fill="rgb(238,131,9)" fg:x="442" fg:w="593"/><text x="15.3508%" y="143.50">alloc::alloc::alloc</text></g><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.03%)</title><rect x="35.3263%" y="117" width="0.0342%" height="15" fill="rgb(211,50,8)" fg:x="1034" fg:w="1"/><text x="35.5763%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (679 samples, 23.20%)</title><rect x="14.8958%" y="325" width="23.1978%" height="15" fill="rgb(245,182,24)" fg:x="436" fg:w="679"/><text x="15.1458%" y="335.50">&lt;core::option::Option&lt;T&gt; as core::clo..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (679 samples, 23.20%)</title><rect x="14.8958%" y="309" width="23.1978%" height="15" fill="rgb(242,14,37)" fg:x="436" fg:w="679"/><text x="15.1458%" y="319.50">&lt;torpedo::level::TransformComp as cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (673 samples, 22.99%)</title><rect x="15.1008%" y="293" width="22.9928%" height="15" fill="rgb(246,228,12)" fg:x="442" fg:w="673"/><text x="15.3508%" y="303.50">&lt;alloc::boxed::Box&lt;[T],A&gt; as core::c..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (673 samples, 22.99%)</title><rect x="15.1008%" y="277" width="22.9928%" height="15" fill="rgb(213,55,15)" fg:x="442" fg:w="673"/><text x="15.3508%" y="287.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (673 samples, 22.99%)</title><rect x="15.1008%" y="261" width="22.9928%" height="15" fill="rgb(209,9,3)" fg:x="442" fg:w="673"/><text x="15.3508%" y="271.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (673 samples, 22.99%)</title><rect x="15.1008%" y="245" width="22.9928%" height="15" fill="rgb(230,59,30)" fg:x="442" fg:w="673"/><text x="15.3508%" y="255.50">&lt;T as alloc::slice::hack::ConvertVec..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (80 samples, 2.73%)</title><rect x="35.3604%" y="229" width="2.7332%" height="15" fill="rgb(209,121,21)" fg:x="1035" fg:w="80"/><text x="35.6104%" y="239.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 2.73%)</title><rect x="35.3604%" y="213" width="2.7332%" height="15" fill="rgb(220,109,13)" fg:x="1035" fg:w="80"/><text x="35.6104%" y="223.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.10%)</title><rect x="38.0936%" y="293" width="0.1025%" height="15" fill="rgb(232,18,1)" fg:x="1115" fg:w="3"/><text x="38.3436%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (3 samples, 0.10%)</title><rect x="38.0936%" y="277" width="0.1025%" height="15" fill="rgb(215,41,42)" fg:x="1115" fg:w="3"/><text x="38.3436%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="38.0936%" y="261" width="0.1025%" height="15" fill="rgb(224,123,36)" fg:x="1115" fg:w="3"/><text x="38.3436%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (2 samples, 0.07%)</title><rect x="38.1278%" y="245" width="0.0683%" height="15" fill="rgb(240,125,3)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="255.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (2 samples, 0.07%)</title><rect x="38.1278%" y="229" width="0.0683%" height="15" fill="rgb(205,98,50)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (2 samples, 0.07%)</title><rect x="38.1278%" y="213" width="0.0683%" height="15" fill="rgb(205,185,37)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (2 samples, 0.07%)</title><rect x="38.1278%" y="197" width="0.0683%" height="15" fill="rgb(238,207,15)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.07%)</title><rect x="38.1278%" y="181" width="0.0683%" height="15" fill="rgb(213,199,42)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.07%)</title><rect x="38.1278%" y="165" width="0.0683%" height="15" fill="rgb(235,201,11)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.07%)</title><rect x="38.1278%" y="149" width="0.0683%" height="15" fill="rgb(207,46,11)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="38.1278%" y="133" width="0.0683%" height="15" fill="rgb(241,35,35)" fg:x="1116" fg:w="2"/><text x="38.3778%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (699 samples, 23.88%)</title><rect x="14.8958%" y="373" width="23.8811%" height="15" fill="rgb(243,32,47)" fg:x="436" fg:w="699"/><text x="15.1458%" y="383.50">core::slice::&lt;impl [T]&gt;::clone_from_sl..</text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (699 samples, 23.88%)</title><rect x="14.8958%" y="357" width="23.8811%" height="15" fill="rgb(247,202,23)" fg:x="436" fg:w="699"/><text x="15.1458%" y="367.50">&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (699 samples, 23.88%)</title><rect x="14.8958%" y="341" width="23.8811%" height="15" fill="rgb(219,102,11)" fg:x="436" fg:w="699"/><text x="15.1458%" y="351.50">&lt;core::option::Option&lt;T&gt; as core::clon..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (20 samples, 0.68%)</title><rect x="38.0936%" y="325" width="0.6833%" height="15" fill="rgb(243,110,44)" fg:x="1115" fg:w="20"/><text x="38.3436%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (20 samples, 0.68%)</title><rect x="38.0936%" y="309" width="0.6833%" height="15" fill="rgb(222,74,54)" fg:x="1115" fg:w="20"/><text x="38.3436%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (17 samples, 0.58%)</title><rect x="38.1961%" y="293" width="0.5808%" height="15" fill="rgb(216,99,12)" fg:x="1118" fg:w="17"/><text x="38.4461%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (17 samples, 0.58%)</title><rect x="38.1961%" y="277" width="0.5808%" height="15" fill="rgb(226,22,26)" fg:x="1118" fg:w="17"/><text x="38.4461%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (17 samples, 0.58%)</title><rect x="38.1961%" y="261" width="0.5808%" height="15" fill="rgb(217,163,10)" fg:x="1118" fg:w="17"/><text x="38.4461%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.58%)</title><rect x="38.1961%" y="245" width="0.5808%" height="15" fill="rgb(213,25,53)" fg:x="1118" fg:w="17"/><text x="38.4461%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (1 samples, 0.03%)</title><rect x="38.7427%" y="229" width="0.0342%" height="15" fill="rgb(252,105,26)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="239.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (1 samples, 0.03%)</title><rect x="38.7427%" y="213" width="0.0342%" height="15" fill="rgb(220,39,43)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (1 samples, 0.03%)</title><rect x="38.7427%" y="197" width="0.0342%" height="15" fill="rgb(229,68,48)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.03%)</title><rect x="38.7427%" y="181" width="0.0342%" height="15" fill="rgb(252,8,32)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.03%)</title><rect x="38.7427%" y="165" width="0.0342%" height="15" fill="rgb(223,20,43)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.03%)</title><rect x="38.7427%" y="149" width="0.0342%" height="15" fill="rgb(229,81,49)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.03%)</title><rect x="38.7427%" y="133" width="0.0342%" height="15" fill="rgb(236,28,36)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.03%)</title><rect x="38.7427%" y="117" width="0.0342%" height="15" fill="rgb(249,185,26)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="38.7427%" y="101" width="0.0342%" height="15" fill="rgb(249,174,33)" fg:x="1134" fg:w="1"/><text x="38.9927%" y="111.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (701 samples, 23.95%)</title><rect x="14.8958%" y="405" width="23.9494%" height="15" fill="rgb(233,201,37)" fg:x="436" fg:w="701"/><text x="15.1458%" y="415.50">torpedo::arena::Arena::alloc_array_no_..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (701 samples, 23.95%)</title><rect x="14.8958%" y="389" width="23.9494%" height="15" fill="rgb(221,78,26)" fg:x="436" fg:w="701"/><text x="15.1458%" y="399.50">torpedo::arena::ArenaInternal::alloc_a..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (2 samples, 0.07%)</title><rect x="38.7769%" y="373" width="0.0683%" height="15" fill="rgb(250,127,30)" fg:x="1135" fg:w="2"/><text x="39.0269%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,121 samples, 38.30%)</title><rect x="1.0249%" y="597" width="38.2986%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,121 samples, 38.30%)</title><rect x="1.0249%" y="581" width="38.2986%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,121 samples, 38.30%)</title><rect x="1.0249%" y="565" width="38.2986%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,121 samples, 38.30%)</title><rect x="1.0249%" y="549" width="38.2986%" height="15" fill="rgb(215,43,3)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="559.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,121 samples, 38.30%)</title><rect x="1.0249%" y="533" width="38.2986%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,121 samples, 38.30%)</title><rect x="1.0249%" y="517" width="38.2986%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,121 samples, 38.30%)</title><rect x="1.0249%" y="501" width="38.2986%" height="15" fill="rgb(233,0,4)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,121 samples, 38.30%)</title><rect x="1.0249%" y="485" width="38.2986%" height="15" fill="rgb(235,30,7)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::f..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,121 samples, 38.30%)</title><rect x="1.0249%" y="469" width="38.2986%" height="15" fill="rgb(250,79,13)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="479.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,121 samples, 38.30%)</title><rect x="1.0249%" y="453" width="38.2986%" height="15" fill="rgb(211,146,34)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::level::level_loop::{{closure}} (1,121 samples, 38.30%)</title><rect x="1.0249%" y="437" width="38.2986%" height="15" fill="rgb(228,22,38)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="447.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (1,121 samples, 38.30%)</title><rect x="1.0249%" y="421" width="38.2986%" height="15" fill="rgb(235,168,5)" fg:x="30" fg:w="1121"/><text x="1.2749%" y="431.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (14 samples, 0.48%)</title><rect x="38.8452%" y="405" width="0.4783%" height="15" fill="rgb(221,155,16)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="415.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (14 samples, 0.48%)</title><rect x="38.8452%" y="389" width="0.4783%" height="15" fill="rgb(215,215,53)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.48%)</title><rect x="38.8452%" y="373" width="0.4783%" height="15" fill="rgb(223,4,10)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.48%)</title><rect x="38.8452%" y="357" width="0.4783%" height="15" fill="rgb(234,103,6)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.48%)</title><rect x="38.8452%" y="341" width="0.4783%" height="15" fill="rgb(227,97,0)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.48%)</title><rect x="38.8452%" y="325" width="0.4783%" height="15" fill="rgb(234,150,53)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.48%)</title><rect x="38.8452%" y="309" width="0.4783%" height="15" fill="rgb(228,201,54)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.48%)</title><rect x="38.8452%" y="293" width="0.4783%" height="15" fill="rgb(222,22,37)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (14 samples, 0.48%)</title><rect x="38.8452%" y="277" width="0.4783%" height="15" fill="rgb(237,53,32)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (14 samples, 0.48%)</title><rect x="38.8452%" y="261" width="0.4783%" height="15" fill="rgb(233,25,53)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.48%)</title><rect x="38.8452%" y="245" width="0.4783%" height="15" fill="rgb(210,40,34)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.48%)</title><rect x="38.8452%" y="229" width="0.4783%" height="15" fill="rgb(241,220,44)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="239.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.48%)</title><rect x="38.8452%" y="213" width="0.4783%" height="15" fill="rgb(235,28,35)" fg:x="1137" fg:w="14"/><text x="39.0952%" y="223.50"></text></g><g><title>6126186496 (1,450 samples, 49.54%)</title><rect x="1.0249%" y="645" width="49.5388%" height="15" fill="rgb(210,56,17)" fg:x="30" fg:w="1450"/><text x="1.2749%" y="655.50">6126186496</text></g><g><title>__pthread_cond_wait (1,450 samples, 49.54%)</title><rect x="1.0249%" y="629" width="49.5388%" height="15" fill="rgb(224,130,29)" fg:x="30" fg:w="1450"/><text x="1.2749%" y="639.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,450 samples, 49.54%)</title><rect x="1.0249%" y="613" width="49.5388%" height="15" fill="rgb(235,212,8)" fg:x="30" fg:w="1450"/><text x="1.2749%" y="623.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (329 samples, 11.24%)</title><rect x="39.3235%" y="597" width="11.2402%" height="15" fill="rgb(223,33,50)" fg:x="1151" fg:w="329"/><text x="39.5735%" y="607.50">core::ptr::drop_i..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (329 samples, 11.24%)</title><rect x="39.3235%" y="581" width="11.2402%" height="15" fill="rgb(219,149,13)" fg:x="1151" fg:w="329"/><text x="39.5735%" y="591.50">&lt;std::sys::pal::u..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (329 samples, 11.24%)</title><rect x="39.3235%" y="565" width="11.2402%" height="15" fill="rgb(250,156,29)" fg:x="1151" fg:w="329"/><text x="39.5735%" y="575.50">std::sys::pal::un..</text></g><g><title>__pthread_wqthread (1 samples, 0.03%)</title><rect x="51.7936%" y="629" width="0.0342%" height="15" fill="rgb(216,193,19)" fg:x="1516" fg:w="1"/><text x="52.0436%" y="639.50"></text></g><g><title>__platform_strnlen (1 samples, 0.03%)</title><rect x="51.7936%" y="613" width="0.0342%" height="15" fill="rgb(216,135,14)" fg:x="1516" fg:w="1"/><text x="52.0436%" y="623.50"></text></g><g><title>__platform_strnlen (1 samples, 0.03%)</title><rect x="51.7936%" y="597" width="0.0342%" height="15" fill="rgb(241,47,5)" fg:x="1516" fg:w="1"/><text x="52.0436%" y="607.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.03%)</title><rect x="51.7936%" y="581" width="0.0342%" height="15" fill="rgb(233,42,35)" fg:x="1516" fg:w="1"/><text x="52.0436%" y="591.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="51.8278%" y="629" width="0.0342%" height="15" fill="rgb(231,13,6)" fg:x="1517" fg:w="1"/><text x="52.0778%" y="639.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="51.8278%" y="613" width="0.0342%" height="15" fill="rgb(207,181,40)" fg:x="1517" fg:w="1"/><text x="52.0778%" y="623.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="51.8278%" y="597" width="0.0342%" height="15" fill="rgb(254,173,49)" fg:x="1517" fg:w="1"/><text x="52.0778%" y="607.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="52.1011%" y="293" width="0.0342%" height="15" fill="rgb(221,1,38)" fg:x="1525" fg:w="1"/><text x="52.3511%" y="303.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="52.1011%" y="277" width="0.0342%" height="15" fill="rgb(206,124,46)" fg:x="1525" fg:w="1"/><text x="52.3511%" y="287.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="52.1011%" y="261" width="0.0342%" height="15" fill="rgb(249,21,11)" fg:x="1525" fg:w="1"/><text x="52.3511%" y="271.50"></text></g><g><title>Unknown (8 samples, 0.27%)</title><rect x="51.9303%" y="309" width="0.2733%" height="15" fill="rgb(222,201,40)" fg:x="1520" fg:w="8"/><text x="52.1803%" y="319.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.07%)</title><rect x="52.1353%" y="293" width="0.0683%" height="15" fill="rgb(235,61,29)" fg:x="1526" fg:w="2"/><text x="52.3853%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (11 samples, 0.38%)</title><rect x="51.8620%" y="389" width="0.3758%" height="15" fill="rgb(219,207,3)" fg:x="1518" fg:w="11"/><text x="52.1120%" y="399.50"></text></g><g><title>Unknown (11 samples, 0.38%)</title><rect x="51.8620%" y="373" width="0.3758%" height="15" fill="rgb(222,56,46)" fg:x="1518" fg:w="11"/><text x="52.1120%" y="383.50"></text></g><g><title>Unknown (11 samples, 0.38%)</title><rect x="51.8620%" y="357" width="0.3758%" height="15" fill="rgb(239,76,54)" fg:x="1518" fg:w="11"/><text x="52.1120%" y="367.50"></text></g><g><title>Unknown (11 samples, 0.38%)</title><rect x="51.8620%" y="341" width="0.3758%" height="15" fill="rgb(231,124,27)" fg:x="1518" fg:w="11"/><text x="52.1120%" y="351.50"></text></g><g><title>Unknown (11 samples, 0.38%)</title><rect x="51.8620%" y="325" width="0.3758%" height="15" fill="rgb(249,195,6)" fg:x="1518" fg:w="11"/><text x="52.1120%" y="335.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="52.2036%" y="309" width="0.0342%" height="15" fill="rgb(237,174,47)" fg:x="1528" fg:w="1"/><text x="52.4536%" y="319.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="52.2036%" y="293" width="0.0342%" height="15" fill="rgb(206,201,31)" fg:x="1528" fg:w="1"/><text x="52.4536%" y="303.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="52.2036%" y="277" width="0.0342%" height="15" fill="rgb(231,57,52)" fg:x="1528" fg:w="1"/><text x="52.4536%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.1261%" y="261" width="0.0342%" height="15" fill="rgb(248,177,22)" fg:x="1555" fg:w="1"/><text x="53.3761%" y="271.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="53.1602%" y="261" width="0.0342%" height="15" fill="rgb(215,211,37)" fg:x="1556" fg:w="1"/><text x="53.4102%" y="271.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="53.1602%" y="245" width="0.0342%" height="15" fill="rgb(241,128,51)" fg:x="1556" fg:w="1"/><text x="53.4102%" y="255.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="53.1602%" y="229" width="0.0342%" height="15" fill="rgb(227,165,31)" fg:x="1556" fg:w="1"/><text x="53.4102%" y="239.50"></text></g><g><title>Unknown (12 samples, 0.41%)</title><rect x="52.8186%" y="277" width="0.4100%" height="15" fill="rgb(228,167,24)" fg:x="1546" fg:w="12"/><text x="53.0686%" y="287.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.03%)</title><rect x="53.1944%" y="261" width="0.0342%" height="15" fill="rgb(228,143,12)" fg:x="1557" fg:w="1"/><text x="53.4444%" y="271.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.07%)</title><rect x="53.2286%" y="277" width="0.0683%" height="15" fill="rgb(249,149,8)" fg:x="1558" fg:w="2"/><text x="53.4786%" y="287.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="53.2969%" y="277" width="0.0342%" height="15" fill="rgb(243,35,44)" fg:x="1560" fg:w="1"/><text x="53.5469%" y="287.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="53.2969%" y="261" width="0.0342%" height="15" fill="rgb(246,89,9)" fg:x="1560" fg:w="1"/><text x="53.5469%" y="271.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="53.2969%" y="245" width="0.0342%" height="15" fill="rgb(233,213,13)" fg:x="1560" fg:w="1"/><text x="53.5469%" y="255.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.03%)</title><rect x="53.3311%" y="277" width="0.0342%" height="15" fill="rgb(233,141,41)" fg:x="1561" fg:w="1"/><text x="53.5811%" y="287.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.07%)</title><rect x="53.3652%" y="277" width="0.0683%" height="15" fill="rgb(239,167,4)" fg:x="1562" fg:w="2"/><text x="53.6152%" y="287.50"></text></g><g><title>Unknown (28 samples, 0.96%)</title><rect x="52.5111%" y="293" width="0.9566%" height="15" fill="rgb(209,217,16)" fg:x="1537" fg:w="28"/><text x="52.7611%" y="303.50"></text></g><g><title>_vm_copy (1 samples, 0.03%)</title><rect x="53.4335%" y="277" width="0.0342%" height="15" fill="rgb(219,88,35)" fg:x="1564" fg:w="1"/><text x="53.6835%" y="287.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="53.4335%" y="261" width="0.0342%" height="15" fill="rgb(220,193,23)" fg:x="1564" fg:w="1"/><text x="53.6835%" y="271.50"></text></g><g><title>_host_get_special_port (2 samples, 0.07%)</title><rect x="53.4677%" y="293" width="0.0683%" height="15" fill="rgb(230,90,52)" fg:x="1565" fg:w="2"/><text x="53.7177%" y="303.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.03%)</title><rect x="53.5360%" y="293" width="0.0342%" height="15" fill="rgb(252,106,19)" fg:x="1567" fg:w="1"/><text x="53.7860%" y="303.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.03%)</title><rect x="53.5360%" y="277" width="0.0342%" height="15" fill="rgb(206,74,20)" fg:x="1567" fg:w="1"/><text x="53.7860%" y="287.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="53.5360%" y="261" width="0.0342%" height="15" fill="rgb(230,138,44)" fg:x="1567" fg:w="1"/><text x="53.7860%" y="271.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.03%)</title><rect x="53.5702%" y="293" width="0.0342%" height="15" fill="rgb(235,182,43)" fg:x="1568" fg:w="1"/><text x="53.8202%" y="303.50"></text></g><g><title>raylib::core::RaylibBuilder::build (41 samples, 1.40%)</title><rect x="52.2378%" y="389" width="1.4008%" height="15" fill="rgb(242,16,51)" fg:x="1529" fg:w="41"/><text x="52.4878%" y="399.50"></text></g><g><title>raylib::core::init_window (41 samples, 1.40%)</title><rect x="52.2378%" y="373" width="1.4008%" height="15" fill="rgb(248,9,4)" fg:x="1529" fg:w="41"/><text x="52.4878%" y="383.50"></text></g><g><title>Unknown (41 samples, 1.40%)</title><rect x="52.2378%" y="357" width="1.4008%" height="15" fill="rgb(210,31,22)" fg:x="1529" fg:w="41"/><text x="52.4878%" y="367.50"></text></g><g><title>Unknown (41 samples, 1.40%)</title><rect x="52.2378%" y="341" width="1.4008%" height="15" fill="rgb(239,54,39)" fg:x="1529" fg:w="41"/><text x="52.4878%" y="351.50"></text></g><g><title>Unknown (40 samples, 1.37%)</title><rect x="52.2720%" y="325" width="1.3666%" height="15" fill="rgb(230,99,41)" fg:x="1530" fg:w="40"/><text x="52.5220%" y="335.50"></text></g><g><title>Unknown (40 samples, 1.37%)</title><rect x="52.2720%" y="309" width="1.3666%" height="15" fill="rgb(253,106,12)" fg:x="1530" fg:w="40"/><text x="52.5220%" y="319.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.03%)</title><rect x="53.6044%" y="293" width="0.0342%" height="15" fill="rgb(213,46,41)" fg:x="1569" fg:w="1"/><text x="53.8544%" y="303.50"></text></g><g><title>torpedo::game::star::create_stars (1 samples, 0.03%)</title><rect x="53.6385%" y="341" width="0.0342%" height="15" fill="rgb(215,133,35)" fg:x="1570" fg:w="1"/><text x="53.8885%" y="351.50"></text></g><g><title>torpedo::game::star::create_star (1 samples, 0.03%)</title><rect x="53.6385%" y="325" width="0.0342%" height="15" fill="rgb(213,28,5)" fg:x="1570" fg:w="1"/><text x="53.8885%" y="335.50"></text></g><g><title>torpedo::level::TransformComp::new (1 samples, 0.03%)</title><rect x="53.6385%" y="309" width="0.0342%" height="15" fill="rgb(215,77,49)" fg:x="1570" fg:w="1"/><text x="53.8885%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.03%)</title><rect x="53.6385%" y="293" width="0.0342%" height="15" fill="rgb(248,100,22)" fg:x="1570" fg:w="1"/><text x="53.8885%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.03%)</title><rect x="53.6385%" y="277" width="0.0342%" height="15" fill="rgb(208,67,9)" fg:x="1570" fg:w="1"/><text x="53.8885%" y="287.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_sphere (1 samples, 0.03%)</title><rect x="53.6727%" y="325" width="0.0342%" height="15" fill="rgb(219,133,21)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="335.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="309" width="0.0342%" height="15" fill="rgb(246,46,29)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="319.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="293" width="0.0342%" height="15" fill="rgb(246,185,52)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="303.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="277" width="0.0342%" height="15" fill="rgb(252,136,11)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="261" width="0.0342%" height="15" fill="rgb(219,138,53)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="245" width="0.0342%" height="15" fill="rgb(211,51,23)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.6727%" y="229" width="0.0342%" height="15" fill="rgb(247,221,28)" fg:x="1571" fg:w="1"/><text x="53.9227%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (3 samples, 0.10%)</title><rect x="53.6385%" y="373" width="0.1025%" height="15" fill="rgb(251,222,45)" fg:x="1570" fg:w="3"/><text x="53.8885%" y="383.50"></text></g><g><title>torpedo::game::game_create_level (3 samples, 0.10%)</title><rect x="53.6385%" y="357" width="0.1025%" height="15" fill="rgb(217,162,53)" fg:x="1570" fg:w="3"/><text x="53.8885%" y="367.50"></text></g><g><title>torpedo::level::default_setup (2 samples, 0.07%)</title><rect x="53.6727%" y="341" width="0.0683%" height="15" fill="rgb(229,93,14)" fg:x="1571" fg:w="2"/><text x="53.9227%" y="351.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_torus (1 samples, 0.03%)</title><rect x="53.7069%" y="325" width="0.0342%" height="15" fill="rgb(209,67,49)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="335.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="309" width="0.0342%" height="15" fill="rgb(213,87,29)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="319.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="293" width="0.0342%" height="15" fill="rgb(205,151,52)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="303.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="277" width="0.0342%" height="15" fill="rgb(253,215,39)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="287.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="261" width="0.0342%" height="15" fill="rgb(221,220,41)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="245" width="0.0342%" height="15" fill="rgb(218,133,21)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="53.7069%" y="229" width="0.0342%" height="15" fill="rgb(221,193,43)" fg:x="1572" fg:w="1"/><text x="53.9569%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="373" width="0.0342%" height="15" fill="rgb(240,128,52)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="357" width="0.0342%" height="15" fill="rgb(253,114,12)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::ComponentList&lt;torpedo::game::ship::ShipComp&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="341" width="0.0342%" height="15" fill="rgb(215,223,47)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="325" width="0.0342%" height="15" fill="rgb(248,225,23)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="309" width="0.0342%" height="15" fill="rgb(250,108,0)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="293" width="0.0342%" height="15" fill="rgb(228,208,7)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;torpedo::game::ship::ShipComp&gt;]&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="277" width="0.0342%" height="15" fill="rgb(244,45,10)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::game::ship::ShipComp&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="261" width="0.0342%" height="15" fill="rgb(207,125,25)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::game::ship::ShipComp&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="245" width="0.0342%" height="15" fill="rgb(210,195,18)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::level::Entity&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="229" width="0.0342%" height="15" fill="rgb(249,80,12)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::level::Entity&gt;&gt; (1 samples, 0.03%)</title><rect x="53.7410%" y="213" width="0.0342%" height="15" fill="rgb(221,65,9)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="53.7410%" y="197" width="0.0342%" height="15" fill="rgb(235,49,36)" fg:x="1573" fg:w="1"/><text x="53.9910%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.03%)</title><rect x="57.9775%" y="293" width="0.0342%" height="15" fill="rgb(225,32,20)" fg:x="1697" fg:w="1"/><text x="58.2275%" y="303.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.03%)</title><rect x="58.0116%" y="293" width="0.0342%" height="15" fill="rgb(215,141,46)" fg:x="1698" fg:w="1"/><text x="58.2616%" y="303.50"></text></g><g><title>_geteuid (2 samples, 0.07%)</title><rect x="58.0458%" y="293" width="0.0683%" height="15" fill="rgb(250,160,47)" fg:x="1699" fg:w="2"/><text x="58.2958%" y="303.50"></text></g><g><title>_host_get_special_port (2 samples, 0.07%)</title><rect x="58.1141%" y="293" width="0.0683%" height="15" fill="rgb(216,222,40)" fg:x="1701" fg:w="2"/><text x="58.3641%" y="303.50"></text></g><g><title>_mach_continuous_time (18 samples, 0.61%)</title><rect x="58.1824%" y="293" width="0.6150%" height="15" fill="rgb(234,217,39)" fg:x="1703" fg:w="18"/><text x="58.4324%" y="303.50"></text></g><g><title>__kernelrpc_vm_read (18 samples, 0.61%)</title><rect x="58.1824%" y="277" width="0.6150%" height="15" fill="rgb(207,178,40)" fg:x="1703" fg:w="18"/><text x="58.4324%" y="287.50"></text></g><g><title>_proc_clear_dirty (18 samples, 0.61%)</title><rect x="58.1824%" y="261" width="0.6150%" height="15" fill="rgb(221,136,13)" fg:x="1703" fg:w="18"/><text x="58.4324%" y="271.50"></text></g><g><title>_proc_clear_dirty (717 samples, 24.50%)</title><rect x="58.7974%" y="293" width="24.4961%" height="15" fill="rgb(249,199,10)" fg:x="1721" fg:w="717"/><text x="59.0474%" y="303.50">_proc_clear_dirty</text></g><g><title>_proc_setpcontrol (40 samples, 1.37%)</title><rect x="83.2935%" y="293" width="1.3666%" height="15" fill="rgb(249,222,13)" fg:x="2438" fg:w="40"/><text x="83.5435%" y="303.50"></text></g><g><title>_vm_copy (1 samples, 0.03%)</title><rect x="84.6601%" y="293" width="0.0342%" height="15" fill="rgb(244,185,38)" fg:x="2478" fg:w="1"/><text x="84.9101%" y="303.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="84.6601%" y="277" width="0.0342%" height="15" fill="rgb(236,202,9)" fg:x="2478" fg:w="1"/><text x="84.9101%" y="287.50"></text></g><g><title>Unknown (896 samples, 30.61%)</title><rect x="54.1852%" y="309" width="30.6115%" height="15" fill="rgb(250,229,37)" fg:x="1586" fg:w="896"/><text x="54.4352%" y="319.50">Unknown</text></g><g><title>_vm_remap (3 samples, 0.10%)</title><rect x="84.6942%" y="293" width="0.1025%" height="15" fill="rgb(206,174,23)" fg:x="2479" fg:w="3"/><text x="84.9442%" y="303.50"></text></g><g><title>_vm_remap (3 samples, 0.10%)</title><rect x="84.6942%" y="277" width="0.1025%" height="15" fill="rgb(211,33,43)" fg:x="2479" fg:w="3"/><text x="84.9442%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (910 samples, 31.09%)</title><rect x="53.7752%" y="373" width="31.0899%" height="15" fill="rgb(245,58,50)" fg:x="1574" fg:w="910"/><text x="54.0252%" y="383.50">core::ptr::drop_in_place&lt;raylib::core::drawing::Ra..</text></g><g><title>Unknown (910 samples, 31.09%)</title><rect x="53.7752%" y="357" width="31.0899%" height="15" fill="rgb(244,68,36)" fg:x="1574" fg:w="910"/><text x="54.0252%" y="367.50">Unknown</text></g><g><title>Unknown (910 samples, 31.09%)</title><rect x="53.7752%" y="341" width="31.0899%" height="15" fill="rgb(232,229,15)" fg:x="1574" fg:w="910"/><text x="54.0252%" y="351.50">Unknown</text></g><g><title>Unknown (909 samples, 31.06%)</title><rect x="53.8094%" y="325" width="31.0557%" height="15" fill="rgb(254,30,23)" fg:x="1575" fg:w="909"/><text x="54.0594%" y="335.50">Unknown</text></g><g><title>_proc_clear_dirty (2 samples, 0.07%)</title><rect x="84.7967%" y="309" width="0.0683%" height="15" fill="rgb(235,160,14)" fg:x="2482" fg:w="2"/><text x="85.0467%" y="319.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (13 samples, 0.44%)</title><rect x="84.8650%" y="373" width="0.4441%" height="15" fill="rgb(212,155,44)" fg:x="2484" fg:w="13"/><text x="85.1150%" y="383.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (13 samples, 0.44%)</title><rect x="84.8650%" y="357" width="0.4441%" height="15" fill="rgb(226,2,50)" fg:x="2484" fg:w="13"/><text x="85.1150%" y="367.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (13 samples, 0.44%)</title><rect x="84.8650%" y="341" width="0.4441%" height="15" fill="rgb(234,177,6)" fg:x="2484" fg:w="13"/><text x="85.1150%" y="351.50"></text></g><g><title>_pthread_mutex_setprioceiling (13 samples, 0.44%)</title><rect x="84.8650%" y="325" width="0.4441%" height="15" fill="rgb(217,24,9)" fg:x="2484" fg:w="13"/><text x="85.1150%" y="335.50"></text></g><g><title>__pthread_cond_wait (1 samples, 0.03%)</title><rect x="85.2750%" y="309" width="0.0342%" height="15" fill="rgb(220,13,46)" fg:x="2496" fg:w="1"/><text x="85.5250%" y="319.50"></text></g><g><title>___workq_open (1 samples, 0.03%)</title><rect x="85.2750%" y="293" width="0.0342%" height="15" fill="rgb(239,221,27)" fg:x="2496" fg:w="1"/><text x="85.5250%" y="303.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (3 samples, 0.10%)</title><rect x="85.3092%" y="293" width="0.1025%" height="15" fill="rgb(222,198,25)" fg:x="2497" fg:w="3"/><text x="85.5592%" y="303.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (1 samples, 0.03%)</title><rect x="85.4117%" y="293" width="0.0342%" height="15" fill="rgb(211,99,13)" fg:x="2500" fg:w="1"/><text x="85.6617%" y="303.50"></text></g><g><title>_kpersona_get (1 samples, 0.03%)</title><rect x="85.4117%" y="277" width="0.0342%" height="15" fill="rgb(232,111,31)" fg:x="2500" fg:w="1"/><text x="85.6617%" y="287.50"></text></g><g><title>std::thread::spawn (28 samples, 0.96%)</title><rect x="85.3092%" y="373" width="0.9566%" height="15" fill="rgb(245,82,37)" fg:x="2497" fg:w="28"/><text x="85.5592%" y="383.50"></text></g><g><title>std::thread::Builder::spawn (28 samples, 0.96%)</title><rect x="85.3092%" y="357" width="0.9566%" height="15" fill="rgb(227,149,46)" fg:x="2497" fg:w="28"/><text x="85.5592%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (28 samples, 0.96%)</title><rect x="85.3092%" y="341" width="0.9566%" height="15" fill="rgb(218,36,50)" fg:x="2497" fg:w="28"/><text x="85.5592%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (28 samples, 0.96%)</title><rect x="85.3092%" y="325" width="0.9566%" height="15" fill="rgb(226,80,48)" fg:x="2497" fg:w="28"/><text x="85.5592%" y="335.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (28 samples, 0.96%)</title><rect x="85.3092%" y="309" width="0.9566%" height="15" fill="rgb(238,224,15)" fg:x="2497" fg:w="28"/><text x="85.5592%" y="319.50"></text></g><g><title>_pthread_workqueue_addthreads_np (24 samples, 0.82%)</title><rect x="85.4458%" y="293" width="0.8200%" height="15" fill="rgb(241,136,10)" fg:x="2501" fg:w="24"/><text x="85.6958%" y="303.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (24 samples, 0.82%)</title><rect x="85.4458%" y="277" width="0.8200%" height="15" fill="rgb(208,32,45)" fg:x="2501" fg:w="24"/><text x="85.6958%" y="287.50"></text></g><g><title>torpedo::draw_call::run_draw_calls (13 samples, 0.44%)</title><rect x="86.3000%" y="357" width="0.4441%" height="15" fill="rgb(207,135,9)" fg:x="2526" fg:w="13"/><text x="86.5500%" y="367.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_text (13 samples, 0.44%)</title><rect x="86.3000%" y="341" width="0.4441%" height="15" fill="rgb(206,86,44)" fg:x="2526" fg:w="13"/><text x="86.5500%" y="351.50"></text></g><g><title>Unknown (13 samples, 0.44%)</title><rect x="86.3000%" y="325" width="0.4441%" height="15" fill="rgb(245,177,15)" fg:x="2526" fg:w="13"/><text x="86.5500%" y="335.50"></text></g><g><title>Unknown (13 samples, 0.44%)</title><rect x="86.3000%" y="309" width="0.4441%" height="15" fill="rgb(206,64,50)" fg:x="2526" fg:w="13"/><text x="86.5500%" y="319.50"></text></g><g><title>Unknown (12 samples, 0.41%)</title><rect x="86.3341%" y="293" width="0.4100%" height="15" fill="rgb(234,36,40)" fg:x="2527" fg:w="12"/><text x="86.5841%" y="303.50"></text></g><g><title>Unknown (6 samples, 0.20%)</title><rect x="86.5391%" y="277" width="0.2050%" height="15" fill="rgb(213,64,8)" fg:x="2533" fg:w="6"/><text x="86.7891%" y="287.50"></text></g><g><title>Unknown (2 samples, 0.07%)</title><rect x="86.6758%" y="261" width="0.0683%" height="15" fill="rgb(210,75,36)" fg:x="2537" fg:w="2"/><text x="86.9258%" y="271.50"></text></g><g><title>Unknown (2 samples, 0.07%)</title><rect x="86.6758%" y="245" width="0.0683%" height="15" fill="rgb(229,88,21)" fg:x="2537" fg:w="2"/><text x="86.9258%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.03%)</title><rect x="86.8466%" y="341" width="0.0342%" height="15" fill="rgb(252,204,47)" fg:x="2542" fg:w="1"/><text x="87.0966%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.03%)</title><rect x="86.8466%" y="325" width="0.0342%" height="15" fill="rgb(208,77,27)" fg:x="2542" fg:w="1"/><text x="87.0966%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.03%)</title><rect x="86.8466%" y="309" width="0.0342%" height="15" fill="rgb(221,76,26)" fg:x="2542" fg:w="1"/><text x="87.0966%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="86.8466%" y="293" width="0.0342%" height="15" fill="rgb(225,139,18)" fg:x="2542" fg:w="1"/><text x="87.0966%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="86.8466%" y="277" width="0.0342%" height="15" fill="rgb(230,137,11)" fg:x="2542" fg:w="1"/><text x="87.0966%" y="287.50"></text></g><g><title>Unknown (3 samples, 0.10%)</title><rect x="99.4534%" y="261" width="0.1025%" height="15" fill="rgb(212,28,1)" fg:x="2911" fg:w="3"/><text x="99.7034%" y="271.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (373 samples, 12.74%)</title><rect x="86.8808%" y="341" width="12.7434%" height="15" fill="rgb(248,164,17)" fg:x="2543" fg:w="373"/><text x="87.1308%" y="351.50">raylib::core::drawi..</text></g><g><title>Unknown (373 samples, 12.74%)</title><rect x="86.8808%" y="325" width="12.7434%" height="15" fill="rgb(222,171,42)" fg:x="2543" fg:w="373"/><text x="87.1308%" y="335.50">Unknown</text></g><g><title>Unknown (373 samples, 12.74%)</title><rect x="86.8808%" y="309" width="12.7434%" height="15" fill="rgb(243,84,45)" fg:x="2543" fg:w="373"/><text x="87.1308%" y="319.50">Unknown</text></g><g><title>Unknown (363 samples, 12.40%)</title><rect x="87.2224%" y="293" width="12.4018%" height="15" fill="rgb(252,49,23)" fg:x="2553" fg:w="363"/><text x="87.4724%" y="303.50">Unknown</text></g><g><title>Unknown (335 samples, 11.45%)</title><rect x="88.1790%" y="277" width="11.4452%" height="15" fill="rgb(215,19,7)" fg:x="2581" fg:w="335"/><text x="88.4290%" y="287.50">Unknown</text></g><g><title>_proc_clear_dirty (2 samples, 0.07%)</title><rect x="99.5559%" y="261" width="0.0683%" height="15" fill="rgb(238,81,41)" fg:x="2914" fg:w="2"/><text x="99.8059%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.14%)</title><rect x="99.6242%" y="293" width="0.1367%" height="15" fill="rgb(210,199,37)" fg:x="2916" fg:w="4"/><text x="99.8742%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="99.7267%" y="277" width="0.0342%" height="15" fill="rgb(244,192,49)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="261" width="0.0342%" height="15" fill="rgb(226,211,11)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="245" width="0.0342%" height="15" fill="rgb(236,162,54)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="229" width="0.0342%" height="15" fill="rgb(220,229,9)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="213" width="0.0342%" height="15" fill="rgb(250,87,22)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="197" width="0.0342%" height="15" fill="rgb(239,43,17)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="181" width="0.0342%" height="15" fill="rgb(231,177,25)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.03%)</title><rect x="99.7267%" y="165" width="0.0342%" height="15" fill="rgb(219,179,1)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="99.7267%" y="149" width="0.0342%" height="15" fill="rgb(238,219,53)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="133" width="0.0342%" height="15" fill="rgb(232,167,36)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="117" width="0.0342%" height="15" fill="rgb(244,19,51)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.03%)</title><rect x="99.7267%" y="101" width="0.0342%" height="15" fill="rgb(224,6,22)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="85" width="0.0342%" height="15" fill="rgb(224,145,5)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="69" width="0.0342%" height="15" fill="rgb(234,130,49)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.03%)</title><rect x="99.7267%" y="53" width="0.0342%" height="15" fill="rgb(254,6,2)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="63.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.03%)</title><rect x="99.7267%" y="37" width="0.0342%" height="15" fill="rgb(208,96,46)" fg:x="2919" fg:w="1"/><text x="99.9767%" y="47.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.17%)</title><rect x="99.6242%" y="341" width="0.1708%" height="15" fill="rgb(239,3,39)" fg:x="2916" fg:w="5"/><text x="99.8742%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.17%)</title><rect x="99.6242%" y="325" width="0.1708%" height="15" fill="rgb(233,210,1)" fg:x="2916" fg:w="5"/><text x="99.8742%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.17%)</title><rect x="99.6242%" y="309" width="0.1708%" height="15" fill="rgb(244,137,37)" fg:x="2916" fg:w="5"/><text x="99.8742%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="99.7608%" y="293" width="0.0342%" height="15" fill="rgb(240,136,2)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="99.7608%" y="277" width="0.0342%" height="15" fill="rgb(239,18,37)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="99.7608%" y="261" width="0.0342%" height="15" fill="rgb(218,185,22)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="99.7608%" y="245" width="0.0342%" height="15" fill="rgb(225,218,4)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="99.7608%" y="229" width="0.0342%" height="15" fill="rgb(230,182,32)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="99.7608%" y="213" width="0.0342%" height="15" fill="rgb(242,56,43)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="99.7608%" y="197" width="0.0342%" height="15" fill="rgb(233,99,24)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="99.7608%" y="181" width="0.0342%" height="15" fill="rgb(234,209,42)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="191.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.03%)</title><rect x="99.7608%" y="165" width="0.0342%" height="15" fill="rgb(227,7,12)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.03%)</title><rect x="99.7608%" y="149" width="0.0342%" height="15" fill="rgb(245,203,43)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="99.7608%" y="133" width="0.0342%" height="15" fill="rgb(238,205,33)" fg:x="2920" fg:w="1"/><text x="100.0108%" y="143.50"></text></g><g><title>torpedo::level::get_transform_comp (2 samples, 0.07%)</title><rect x="99.7950%" y="341" width="0.0683%" height="15" fill="rgb(231,56,7)" fg:x="2921" fg:w="2"/><text x="100.0450%" y="351.50"></text></g><g><title>torpedo::level::get_transform_comp (1 samples, 0.03%)</title><rect x="99.8292%" y="325" width="0.0342%" height="15" fill="rgb(244,186,29)" fg:x="2922" fg:w="1"/><text x="100.0792%" y="335.50"></text></g><g><title>_main (1,407 samples, 48.07%)</title><rect x="51.8620%" y="629" width="48.0697%" height="15" fill="rgb(234,111,31)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="639.50">_main</text></g><g><title>std::rt::lang_start_internal (1,407 samples, 48.07%)</title><rect x="51.8620%" y="613" width="48.0697%" height="15" fill="rgb(241,149,10)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,407 samples, 48.07%)</title><rect x="51.8620%" y="597" width="48.0697%" height="15" fill="rgb(249,206,44)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,407 samples, 48.07%)</title><rect x="51.8620%" y="581" width="48.0697%" height="15" fill="rgb(251,153,30)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,407 samples, 48.07%)</title><rect x="51.8620%" y="565" width="48.0697%" height="15" fill="rgb(239,152,38)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,407 samples, 48.07%)</title><rect x="51.8620%" y="549" width="48.0697%" height="15" fill="rgb(249,139,47)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,407 samples, 48.07%)</title><rect x="51.8620%" y="533" width="48.0697%" height="15" fill="rgb(244,64,35)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,407 samples, 48.07%)</title><rect x="51.8620%" y="517" width="48.0697%" height="15" fill="rgb(216,46,15)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,407 samples, 48.07%)</title><rect x="51.8620%" y="501" width="48.0697%" height="15" fill="rgb(250,74,19)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,407 samples, 48.07%)</title><rect x="51.8620%" y="485" width="48.0697%" height="15" fill="rgb(249,42,33)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_..</text></g><g><title>std::rt::lang_start::{{closure}} (1,407 samples, 48.07%)</title><rect x="51.8620%" y="469" width="48.0697%" height="15" fill="rgb(242,149,17)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,407 samples, 48.07%)</title><rect x="51.8620%" y="453" width="48.0697%" height="15" fill="rgb(244,29,21)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,407 samples, 48.07%)</title><rect x="51.8620%" y="437" width="48.0697%" height="15" fill="rgb(220,130,37)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (1,407 samples, 48.07%)</title><rect x="51.8620%" y="421" width="48.0697%" height="15" fill="rgb(211,67,2)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="431.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (1,407 samples, 48.07%)</title><rect x="51.8620%" y="405" width="48.0697%" height="15" fill="rgb(235,68,52)" fg:x="1518" fg:w="1407"/><text x="52.1120%" y="415.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (1,355 samples, 46.29%)</title><rect x="53.6385%" y="389" width="46.2931%" height="15" fill="rgb(246,142,3)" fg:x="1570" fg:w="1355"/><text x="53.8885%" y="399.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (400 samples, 13.67%)</title><rect x="86.2658%" y="373" width="13.6659%" height="15" fill="rgb(241,25,7)" fg:x="2525" fg:w="400"/><text x="86.5158%" y="383.50">torpedo::renderer::re..</text></g><g><title>torpedo::renderer::render_object (386 samples, 13.19%)</title><rect x="86.7441%" y="357" width="13.1876%" height="15" fill="rgb(242,119,39)" fg:x="2539" fg:w="386"/><text x="86.9941%" y="367.50">torpedo::renderer::r..</text></g><g><title>torpedo::math::Vector4::to_matrix (2 samples, 0.07%)</title><rect x="99.8633%" y="341" width="0.0683%" height="15" fill="rgb(241,98,45)" fg:x="2923" fg:w="2"/><text x="100.1133%" y="351.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.03%)</title><rect x="99.9317%" y="629" width="0.0342%" height="15" fill="rgb(254,28,30)" fg:x="2925" fg:w="1"/><text x="100.1817%" y="639.50"></text></g><g><title>all (2,927 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="2927"/><text x="0.2500%" y="671.50"></text></g><g><title>8336018560 (1,447 samples, 49.44%)</title><rect x="50.5637%" y="645" width="49.4363%" height="15" fill="rgb(222,85,15)" fg:x="1480" fg:w="1447"/><text x="50.8137%" y="655.50">8336018560</text></g><g><title>_vm_copy (1 samples, 0.03%)</title><rect x="99.9658%" y="629" width="0.0342%" height="15" fill="rgb(210,85,47)" fg:x="2926" fg:w="1"/><text x="100.2158%" y="639.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.03%)</title><rect x="99.9658%" y="613" width="0.0342%" height="15" fill="rgb(224,206,25)" fg:x="2926" fg:w="1"/><text x="100.2158%" y="623.50"></text></g></svg></svg>