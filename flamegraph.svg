<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="1619"><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.06%)</title><rect x="0.1853%" y="501" width="0.0618%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.4353%" y="511.50"></text></g><g><title>6160281600 (5 samples, 0.31%)</title><rect x="0.0000%" y="533" width="0.3088%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>__pthread_wqthread_setup (5 samples, 0.31%)</title><rect x="0.0000%" y="517" width="0.3088%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.06%)</title><rect x="0.2471%" y="501" width="0.0618%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.4971%" y="511.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.06%)</title><rect x="0.4324%" y="517" width="0.0618%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.6824%" y="527.50"></text></g><g><title>6160855040 (4 samples, 0.25%)</title><rect x="0.3088%" y="533" width="0.2471%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="4"/><text x="0.5588%" y="543.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.06%)</title><rect x="0.4941%" y="517" width="0.0618%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.7441%" y="527.50"></text></g><g><title>___workq_open (1 samples, 0.06%)</title><rect x="0.4941%" y="501" width="0.0618%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.7441%" y="511.50"></text></g><g><title>___workq_open (22 samples, 1.36%)</title><rect x="0.8647%" y="501" width="1.3589%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="22"/><text x="1.1147%" y="511.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.06%)</title><rect x="2.2236%" y="501" width="0.0618%" height="15" fill="rgb(220,122,19)" fg:x="36" fg:w="1"/><text x="2.4736%" y="511.50"></text></g><g><title>__kernelrpc_thread_policy (3 samples, 0.19%)</title><rect x="2.2854%" y="501" width="0.1853%" height="15" fill="rgb(250,228,42)" fg:x="37" fg:w="3"/><text x="2.5354%" y="511.50"></text></g><g><title>_proc_clear_dirty (3 samples, 0.19%)</title><rect x="2.2854%" y="485" width="0.1853%" height="15" fill="rgb(240,193,28)" fg:x="37" fg:w="3"/><text x="2.5354%" y="495.50"></text></g><g><title>__pthread_mutex_droplock (7 samples, 0.43%)</title><rect x="2.4707%" y="501" width="0.4324%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="7"/><text x="2.7207%" y="511.50"></text></g><g><title>6161428480 (66 samples, 4.08%)</title><rect x="0.5559%" y="533" width="4.0766%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="66"/><text x="0.8059%" y="543.50">6161..</text></g><g><title>__pthread_cond_wait (66 samples, 4.08%)</title><rect x="0.5559%" y="517" width="4.0766%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="66"/><text x="0.8059%" y="527.50">__pt..</text></g><g><title>_mach_continuous_time (28 samples, 1.73%)</title><rect x="2.9030%" y="501" width="1.7295%" height="15" fill="rgb(231,73,38)" fg:x="47" fg:w="28"/><text x="3.1530%" y="511.50"></text></g><g><title>__kernelrpc_vm_read (28 samples, 1.73%)</title><rect x="2.9030%" y="485" width="1.7295%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="28"/><text x="3.1530%" y="495.50"></text></g><g><title>_proc_clear_dirty (28 samples, 1.73%)</title><rect x="2.9030%" y="469" width="1.7295%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="28"/><text x="3.1530%" y="479.50"></text></g><g><title>__pthread_wqthread_setup (8 samples, 0.49%)</title><rect x="4.6325%" y="517" width="0.4941%" height="15" fill="rgb(221,200,47)" fg:x="75" fg:w="8"/><text x="4.8825%" y="527.50"></text></g><g><title>_mach_continuous_time (6 samples, 0.37%)</title><rect x="4.7560%" y="501" width="0.3706%" height="15" fill="rgb(226,26,5)" fg:x="77" fg:w="6"/><text x="5.0060%" y="511.50"></text></g><g><title>__kernelrpc_vm_read (6 samples, 0.37%)</title><rect x="4.7560%" y="485" width="0.3706%" height="15" fill="rgb(249,33,26)" fg:x="77" fg:w="6"/><text x="5.0060%" y="495.50"></text></g><g><title>_proc_clear_dirty (6 samples, 0.37%)</title><rect x="4.7560%" y="469" width="0.3706%" height="15" fill="rgb(235,183,28)" fg:x="77" fg:w="6"/><text x="5.0060%" y="479.50"></text></g><g><title>6162001920 (10 samples, 0.62%)</title><rect x="4.6325%" y="533" width="0.6177%" height="15" fill="rgb(221,5,38)" fg:x="75" fg:w="10"/><text x="4.8825%" y="543.50"></text></g><g><title>_pthread_rwlock_rdlock (2 samples, 0.12%)</title><rect x="5.1266%" y="517" width="0.1235%" height="15" fill="rgb(247,18,42)" fg:x="83" fg:w="2"/><text x="5.3766%" y="527.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.12%)</title><rect x="5.1266%" y="501" width="0.1235%" height="15" fill="rgb(241,131,45)" fg:x="83" fg:w="2"/><text x="5.3766%" y="511.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.12%)</title><rect x="5.1266%" y="485" width="0.1235%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="2"/><text x="5.3766%" y="495.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.12%)</title><rect x="5.1266%" y="469" width="0.1235%" height="15" fill="rgb(225,111,53)" fg:x="83" fg:w="2"/><text x="5.3766%" y="479.50"></text></g><g><title>6162575360 (9 samples, 0.56%)</title><rect x="5.2502%" y="533" width="0.5559%" height="15" fill="rgb(238,160,17)" fg:x="85" fg:w="9"/><text x="5.5002%" y="543.50"></text></g><g><title>__pthread_wqthread_setup (8 samples, 0.49%)</title><rect x="5.3119%" y="517" width="0.4941%" height="15" fill="rgb(214,148,48)" fg:x="86" fg:w="8"/><text x="5.5619%" y="527.50"></text></g><g><title>_mach_continuous_time (6 samples, 0.37%)</title><rect x="5.4355%" y="501" width="0.3706%" height="15" fill="rgb(232,36,49)" fg:x="88" fg:w="6"/><text x="5.6855%" y="511.50"></text></g><g><title>__kernelrpc_vm_read (6 samples, 0.37%)</title><rect x="5.4355%" y="485" width="0.3706%" height="15" fill="rgb(209,103,24)" fg:x="88" fg:w="6"/><text x="5.6855%" y="495.50"></text></g><g><title>_proc_clear_dirty (6 samples, 0.37%)</title><rect x="5.4355%" y="469" width="0.3706%" height="15" fill="rgb(229,88,8)" fg:x="88" fg:w="6"/><text x="5.6855%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="5.9914%" y="197" width="0.0618%" height="15" fill="rgb(213,181,19)" fg:x="97" fg:w="1"/><text x="6.2414%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="5.9914%" y="181" width="0.0618%" height="15" fill="rgb(254,191,54)" fg:x="97" fg:w="1"/><text x="6.2414%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="5.9914%" y="165" width="0.0618%" height="15" fill="rgb(241,83,37)" fg:x="97" fg:w="1"/><text x="6.2414%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="5.9914%" y="149" width="0.0618%" height="15" fill="rgb(233,36,39)" fg:x="97" fg:w="1"/><text x="6.2414%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="5.9914%" y="133" width="0.0618%" height="15" fill="rgb(226,3,54)" fg:x="97" fg:w="1"/><text x="6.2414%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="5.9914%" y="117" width="0.0618%" height="15" fill="rgb(245,192,40)" fg:x="97" fg:w="1"/><text x="6.2414%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="5.9914%" y="101" width="0.0618%" height="15" fill="rgb(238,167,29)" fg:x="97" fg:w="1"/><text x="6.2414%" y="111.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="5.9914%" y="293" width="0.1853%" height="15" fill="rgb(232,182,51)" fg:x="97" fg:w="3"/><text x="6.2414%" y="303.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="5.9914%" y="277" width="0.1853%" height="15" fill="rgb(231,60,39)" fg:x="97" fg:w="3"/><text x="6.2414%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="5.9914%" y="261" width="0.1853%" height="15" fill="rgb(208,69,12)" fg:x="97" fg:w="3"/><text x="6.2414%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.19%)</title><rect x="5.9914%" y="245" width="0.1853%" height="15" fill="rgb(235,93,37)" fg:x="97" fg:w="3"/><text x="6.2414%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.19%)</title><rect x="5.9914%" y="229" width="0.1853%" height="15" fill="rgb(213,116,39)" fg:x="97" fg:w="3"/><text x="6.2414%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.19%)</title><rect x="5.9914%" y="213" width="0.1853%" height="15" fill="rgb(222,207,29)" fg:x="97" fg:w="3"/><text x="6.2414%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.12%)</title><rect x="6.0531%" y="197" width="0.1235%" height="15" fill="rgb(206,96,30)" fg:x="98" fg:w="2"/><text x="6.3031%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.12%)</title><rect x="6.0531%" y="181" width="0.1235%" height="15" fill="rgb(218,138,4)" fg:x="98" fg:w="2"/><text x="6.3031%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.12%)</title><rect x="6.1767%" y="213" width="0.1235%" height="15" fill="rgb(250,191,14)" fg:x="100" fg:w="2"/><text x="6.4267%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.12%)</title><rect x="6.1767%" y="197" width="0.1235%" height="15" fill="rgb(239,60,40)" fg:x="100" fg:w="2"/><text x="6.4267%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.12%)</title><rect x="6.1767%" y="181" width="0.1235%" height="15" fill="rgb(206,27,48)" fg:x="100" fg:w="2"/><text x="6.4267%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.12%)</title><rect x="6.1767%" y="165" width="0.1235%" height="15" fill="rgb(225,35,8)" fg:x="100" fg:w="2"/><text x="6.4267%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.12%)</title><rect x="6.1767%" y="149" width="0.1235%" height="15" fill="rgb(250,213,24)" fg:x="100" fg:w="2"/><text x="6.4267%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.12%)</title><rect x="6.1767%" y="133" width="0.1235%" height="15" fill="rgb(247,123,22)" fg:x="100" fg:w="2"/><text x="6.4267%" y="143.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.12%)</title><rect x="6.1767%" y="117" width="0.1235%" height="15" fill="rgb(231,138,38)" fg:x="100" fg:w="2"/><text x="6.4267%" y="127.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="6.1767%" y="293" width="0.1853%" height="15" fill="rgb(231,145,46)" fg:x="100" fg:w="3"/><text x="6.4267%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="6.1767%" y="277" width="0.1853%" height="15" fill="rgb(251,118,11)" fg:x="100" fg:w="3"/><text x="6.4267%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.19%)</title><rect x="6.1767%" y="261" width="0.1853%" height="15" fill="rgb(217,147,25)" fg:x="100" fg:w="3"/><text x="6.4267%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.19%)</title><rect x="6.1767%" y="245" width="0.1853%" height="15" fill="rgb(247,81,37)" fg:x="100" fg:w="3"/><text x="6.4267%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.19%)</title><rect x="6.1767%" y="229" width="0.1853%" height="15" fill="rgb(209,12,38)" fg:x="100" fg:w="3"/><text x="6.4267%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.06%)</title><rect x="6.3002%" y="213" width="0.0618%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="1"/><text x="6.5502%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="6.3002%" y="197" width="0.0618%" height="15" fill="rgb(248,47,43)" fg:x="102" fg:w="1"/><text x="6.5502%" y="207.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="6.3620%" y="293" width="0.0618%" height="15" fill="rgb(221,10,30)" fg:x="103" fg:w="1"/><text x="6.6120%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (31 samples, 1.91%)</title><rect x="6.4237%" y="293" width="1.9148%" height="15" fill="rgb(210,229,1)" fg:x="104" fg:w="31"/><text x="6.6737%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (31 samples, 1.91%)</title><rect x="6.4237%" y="277" width="1.9148%" height="15" fill="rgb(222,148,37)" fg:x="104" fg:w="31"/><text x="6.6737%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (31 samples, 1.91%)</title><rect x="6.4237%" y="261" width="1.9148%" height="15" fill="rgb(234,67,33)" fg:x="104" fg:w="31"/><text x="6.6737%" y="271.50">c..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 1.91%)</title><rect x="6.4237%" y="245" width="1.9148%" height="15" fill="rgb(247,98,35)" fg:x="104" fg:w="31"/><text x="6.6737%" y="255.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 1.91%)</title><rect x="6.4237%" y="229" width="1.9148%" height="15" fill="rgb(247,138,52)" fg:x="104" fg:w="31"/><text x="6.6737%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (31 samples, 1.91%)</title><rect x="6.4237%" y="213" width="1.9148%" height="15" fill="rgb(213,79,30)" fg:x="104" fg:w="31"/><text x="6.6737%" y="223.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (30 samples, 1.85%)</title><rect x="8.3385%" y="293" width="1.8530%" height="15" fill="rgb(246,177,23)" fg:x="135" fg:w="30"/><text x="8.5885%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (30 samples, 1.85%)</title><rect x="8.3385%" y="277" width="1.8530%" height="15" fill="rgb(230,62,27)" fg:x="135" fg:w="30"/><text x="8.5885%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (30 samples, 1.85%)</title><rect x="8.3385%" y="261" width="1.8530%" height="15" fill="rgb(216,154,8)" fg:x="135" fg:w="30"/><text x="8.5885%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (30 samples, 1.85%)</title><rect x="8.3385%" y="245" width="1.8530%" height="15" fill="rgb(244,35,45)" fg:x="135" fg:w="30"/><text x="8.5885%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (30 samples, 1.85%)</title><rect x="8.3385%" y="229" width="1.8530%" height="15" fill="rgb(251,115,12)" fg:x="135" fg:w="30"/><text x="8.5885%" y="239.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.85%)</title><rect x="8.3385%" y="213" width="1.8530%" height="15" fill="rgb(240,54,50)" fg:x="135" fg:w="30"/><text x="8.5885%" y="223.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (12 samples, 0.74%)</title><rect x="10.1915%" y="293" width="0.7412%" height="15" fill="rgb(233,84,52)" fg:x="165" fg:w="12"/><text x="10.4415%" y="303.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.74%)</title><rect x="10.1915%" y="277" width="0.7412%" height="15" fill="rgb(207,117,47)" fg:x="165" fg:w="12"/><text x="10.4415%" y="287.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (12 samples, 0.74%)</title><rect x="10.1915%" y="261" width="0.7412%" height="15" fill="rgb(249,43,39)" fg:x="165" fg:w="12"/><text x="10.4415%" y="271.50"></text></g><g><title>_pthread_cond_broadcast (12 samples, 0.74%)</title><rect x="10.1915%" y="245" width="0.7412%" height="15" fill="rgb(209,38,44)" fg:x="165" fg:w="12"/><text x="10.4415%" y="255.50"></text></g><g><title>_pthread_rwlock_init (12 samples, 0.74%)</title><rect x="10.1915%" y="229" width="0.7412%" height="15" fill="rgb(236,212,23)" fg:x="165" fg:w="12"/><text x="10.4415%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (22 samples, 1.36%)</title><rect x="10.9327%" y="293" width="1.3589%" height="15" fill="rgb(242,79,21)" fg:x="177" fg:w="22"/><text x="11.1827%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (22 samples, 1.36%)</title><rect x="10.9327%" y="277" width="1.3589%" height="15" fill="rgb(211,96,35)" fg:x="177" fg:w="22"/><text x="11.1827%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.36%)</title><rect x="10.9327%" y="261" width="1.3589%" height="15" fill="rgb(253,215,40)" fg:x="177" fg:w="22"/><text x="11.1827%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 1.36%)</title><rect x="10.9327%" y="245" width="1.3589%" height="15" fill="rgb(211,81,21)" fg:x="177" fg:w="22"/><text x="11.1827%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 1.36%)</title><rect x="10.9327%" y="229" width="1.3589%" height="15" fill="rgb(208,190,38)" fg:x="177" fg:w="22"/><text x="11.1827%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.06%)</title><rect x="12.2915%" y="293" width="0.0618%" height="15" fill="rgb(235,213,38)" fg:x="199" fg:w="1"/><text x="12.5415%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.06%)</title><rect x="12.2915%" y="277" width="0.0618%" height="15" fill="rgb(237,122,38)" fg:x="199" fg:w="1"/><text x="12.5415%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.06%)</title><rect x="12.2915%" y="261" width="0.0618%" height="15" fill="rgb(244,218,35)" fg:x="199" fg:w="1"/><text x="12.5415%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.06%)</title><rect x="12.2915%" y="245" width="0.0618%" height="15" fill="rgb(240,68,47)" fg:x="199" fg:w="1"/><text x="12.5415%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="12.2915%" y="229" width="0.0618%" height="15" fill="rgb(210,16,53)" fg:x="199" fg:w="1"/><text x="12.5415%" y="239.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (14 samples, 0.86%)</title><rect x="12.3533%" y="293" width="0.8647%" height="15" fill="rgb(235,124,12)" fg:x="200" fg:w="14"/><text x="12.6033%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (14 samples, 0.86%)</title><rect x="12.3533%" y="277" width="0.8647%" height="15" fill="rgb(224,169,11)" fg:x="200" fg:w="14"/><text x="12.6033%" y="287.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (14 samples, 0.86%)</title><rect x="12.3533%" y="261" width="0.8647%" height="15" fill="rgb(250,166,2)" fg:x="200" fg:w="14"/><text x="12.6033%" y="271.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (14 samples, 0.86%)</title><rect x="12.3533%" y="245" width="0.8647%" height="15" fill="rgb(242,216,29)" fg:x="200" fg:w="14"/><text x="12.6033%" y="255.50"></text></g><g><title>_pthread_rwlock_init (14 samples, 0.86%)</title><rect x="12.3533%" y="229" width="0.8647%" height="15" fill="rgb(230,116,27)" fg:x="200" fg:w="14"/><text x="12.6033%" y="239.50"></text></g><g><title>_mach_continuous_time (93 samples, 5.74%)</title><rect x="13.4033%" y="165" width="5.7443%" height="15" fill="rgb(228,99,48)" fg:x="217" fg:w="93"/><text x="13.6533%" y="175.50">_mach_c..</text></g><g><title>_geteuid (93 samples, 5.74%)</title><rect x="13.4033%" y="149" width="5.7443%" height="15" fill="rgb(253,11,6)" fg:x="217" fg:w="93"/><text x="13.6533%" y="159.50">_geteuid</text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (105 samples, 6.49%)</title><rect x="13.2180%" y="293" width="6.4855%" height="15" fill="rgb(247,143,39)" fg:x="214" fg:w="105"/><text x="13.4680%" y="303.50">std::syn..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (105 samples, 6.49%)</title><rect x="13.2180%" y="277" width="6.4855%" height="15" fill="rgb(236,97,10)" fg:x="214" fg:w="105"/><text x="13.4680%" y="287.50">std::sys..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (104 samples, 6.42%)</title><rect x="13.2798%" y="261" width="6.4237%" height="15" fill="rgb(233,208,19)" fg:x="215" fg:w="104"/><text x="13.5298%" y="271.50">std::sys..</text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (104 samples, 6.42%)</title><rect x="13.2798%" y="245" width="6.4237%" height="15" fill="rgb(216,164,2)" fg:x="215" fg:w="104"/><text x="13.5298%" y="255.50">std::sys..</text></g><g><title>std::thread::Thread::park (104 samples, 6.42%)</title><rect x="13.2798%" y="229" width="6.4237%" height="15" fill="rgb(220,129,5)" fg:x="215" fg:w="104"/><text x="13.5298%" y="239.50">std::thr..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (104 samples, 6.42%)</title><rect x="13.2798%" y="213" width="6.4237%" height="15" fill="rgb(242,17,10)" fg:x="215" fg:w="104"/><text x="13.5298%" y="223.50">std::sys..</text></g><g><title>___platform_sigaction (102 samples, 6.30%)</title><rect x="13.4033%" y="197" width="6.3002%" height="15" fill="rgb(242,107,0)" fg:x="217" fg:w="102"/><text x="13.6533%" y="207.50">___platf..</text></g><g><title>_semaphore_destroy (102 samples, 6.30%)</title><rect x="13.4033%" y="181" width="6.3002%" height="15" fill="rgb(251,28,31)" fg:x="217" fg:w="102"/><text x="13.6533%" y="191.50">_semapho..</text></g><g><title>_proc_clear_dirty (9 samples, 0.56%)</title><rect x="19.1476%" y="165" width="0.5559%" height="15" fill="rgb(233,223,10)" fg:x="310" fg:w="9"/><text x="19.3976%" y="175.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (64 samples, 3.95%)</title><rect x="19.7653%" y="245" width="3.9531%" height="15" fill="rgb(215,21,27)" fg:x="320" fg:w="64"/><text x="20.0153%" y="255.50">&lt;tor..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.19%)</title><rect x="23.5330%" y="229" width="0.1853%" height="15" fill="rgb(232,23,21)" fg:x="381" fg:w="3"/><text x="23.7830%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.19%)</title><rect x="23.5330%" y="213" width="0.1853%" height="15" fill="rgb(244,5,23)" fg:x="381" fg:w="3"/><text x="23.7830%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.19%)</title><rect x="23.5330%" y="197" width="0.1853%" height="15" fill="rgb(226,81,46)" fg:x="381" fg:w="3"/><text x="23.7830%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.19%)</title><rect x="23.5330%" y="181" width="0.1853%" height="15" fill="rgb(247,70,30)" fg:x="381" fg:w="3"/><text x="23.7830%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.19%)</title><rect x="23.5330%" y="165" width="0.1853%" height="15" fill="rgb(212,68,19)" fg:x="381" fg:w="3"/><text x="23.7830%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.19%)</title><rect x="23.5330%" y="149" width="0.1853%" height="15" fill="rgb(240,187,13)" fg:x="381" fg:w="3"/><text x="23.7830%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="23.7183%" y="229" width="0.0618%" height="15" fill="rgb(223,113,26)" fg:x="384" fg:w="1"/><text x="23.9683%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="23.7183%" y="213" width="0.0618%" height="15" fill="rgb(206,192,2)" fg:x="384" fg:w="1"/><text x="23.9683%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="23.7183%" y="197" width="0.0618%" height="15" fill="rgb(241,108,4)" fg:x="384" fg:w="1"/><text x="23.9683%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="23.7183%" y="181" width="0.0618%" height="15" fill="rgb(247,173,49)" fg:x="384" fg:w="1"/><text x="23.9683%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="23.7183%" y="165" width="0.0618%" height="15" fill="rgb(224,114,35)" fg:x="384" fg:w="1"/><text x="23.9683%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="23.7183%" y="149" width="0.0618%" height="15" fill="rgb(245,159,27)" fg:x="384" fg:w="1"/><text x="23.9683%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="23.7183%" y="133" width="0.0618%" height="15" fill="rgb(245,172,44)" fg:x="384" fg:w="1"/><text x="23.9683%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="23.7183%" y="117" width="0.0618%" height="15" fill="rgb(236,23,11)" fg:x="384" fg:w="1"/><text x="23.9683%" y="127.50"></text></g><g><title>alloc::raw_vec::layout_array (1 samples, 0.06%)</title><rect x="23.7183%" y="101" width="0.0618%" height="15" fill="rgb(205,117,38)" fg:x="384" fg:w="1"/><text x="23.9683%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.06%)</title><rect x="23.7183%" y="85" width="0.0618%" height="15" fill="rgb(237,72,25)" fg:x="384" fg:w="1"/><text x="23.9683%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1 samples, 0.06%)</title><rect x="23.7183%" y="69" width="0.0618%" height="15" fill="rgb(244,70,9)" fg:x="384" fg:w="1"/><text x="23.9683%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.06%)</title><rect x="23.7183%" y="53" width="0.0618%" height="15" fill="rgb(217,125,39)" fg:x="384" fg:w="1"/><text x="23.9683%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="23.7183%" y="37" width="0.0618%" height="15" fill="rgb(235,36,10)" fg:x="384" fg:w="1"/><text x="23.9683%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (66 samples, 4.08%)</title><rect x="19.7653%" y="261" width="4.0766%" height="15" fill="rgb(251,123,47)" fg:x="320" fg:w="66"/><text x="20.0153%" y="271.50">&lt;cor..</text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (2 samples, 0.12%)</title><rect x="23.7183%" y="245" width="0.1235%" height="15" fill="rgb(221,13,13)" fg:x="384" fg:w="2"/><text x="23.9683%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (1 samples, 0.06%)</title><rect x="23.7801%" y="229" width="0.0618%" height="15" fill="rgb(238,131,9)" fg:x="385" fg:w="1"/><text x="24.0301%" y="239.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (1 samples, 0.06%)</title><rect x="23.7801%" y="213" width="0.0618%" height="15" fill="rgb(211,50,8)" fg:x="385" fg:w="1"/><text x="24.0301%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="23.7801%" y="197" width="0.0618%" height="15" fill="rgb(245,182,24)" fg:x="385" fg:w="1"/><text x="24.0301%" y="207.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="23.7801%" y="181" width="0.0618%" height="15" fill="rgb(242,14,37)" fg:x="385" fg:w="1"/><text x="24.0301%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (17 samples, 1.05%)</title><rect x="23.8419%" y="229" width="1.0500%" height="15" fill="rgb(246,228,12)" fg:x="386" fg:w="17"/><text x="24.0919%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (17 samples, 1.05%)</title><rect x="23.8419%" y="213" width="1.0500%" height="15" fill="rgb(213,55,15)" fg:x="386" fg:w="17"/><text x="24.0919%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.05%)</title><rect x="23.8419%" y="197" width="1.0500%" height="15" fill="rgb(209,9,3)" fg:x="386" fg:w="17"/><text x="24.0919%" y="207.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (8 samples, 0.49%)</title><rect x="24.3978%" y="181" width="0.4941%" height="15" fill="rgb(230,59,30)" fg:x="395" fg:w="8"/><text x="24.6478%" y="191.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (8 samples, 0.49%)</title><rect x="24.3978%" y="165" width="0.4941%" height="15" fill="rgb(209,121,21)" fg:x="395" fg:w="8"/><text x="24.6478%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (8 samples, 0.49%)</title><rect x="24.3978%" y="149" width="0.4941%" height="15" fill="rgb(220,109,13)" fg:x="395" fg:w="8"/><text x="24.6478%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (8 samples, 0.49%)</title><rect x="24.3978%" y="133" width="0.4941%" height="15" fill="rgb(232,18,1)" fg:x="395" fg:w="8"/><text x="24.6478%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (8 samples, 0.49%)</title><rect x="24.3978%" y="117" width="0.4941%" height="15" fill="rgb(215,41,42)" fg:x="395" fg:w="8"/><text x="24.6478%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (8 samples, 0.49%)</title><rect x="24.3978%" y="101" width="0.4941%" height="15" fill="rgb(224,123,36)" fg:x="395" fg:w="8"/><text x="24.6478%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.49%)</title><rect x="24.3978%" y="85" width="0.4941%" height="15" fill="rgb(240,125,3)" fg:x="395" fg:w="8"/><text x="24.6478%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (108 samples, 6.67%)</title><rect x="23.8419%" y="261" width="6.6708%" height="15" fill="rgb(205,98,50)" fg:x="386" fg:w="108"/><text x="24.0919%" y="271.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (108 samples, 6.67%)</title><rect x="23.8419%" y="245" width="6.6708%" height="15" fill="rgb(205,185,37)" fg:x="386" fg:w="108"/><text x="24.0919%" y="255.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (91 samples, 5.62%)</title><rect x="24.8919%" y="229" width="5.6208%" height="15" fill="rgb(238,207,15)" fg:x="403" fg:w="91"/><text x="25.1419%" y="239.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (91 samples, 5.62%)</title><rect x="24.8919%" y="213" width="5.6208%" height="15" fill="rgb(213,199,42)" fg:x="403" fg:w="91"/><text x="25.1419%" y="223.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (91 samples, 5.62%)</title><rect x="24.8919%" y="197" width="5.6208%" height="15" fill="rgb(235,201,11)" fg:x="403" fg:w="91"/><text x="25.1419%" y="207.50">core::p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 5.62%)</title><rect x="24.8919%" y="181" width="5.6208%" height="15" fill="rgb(207,46,11)" fg:x="403" fg:w="91"/><text x="25.1419%" y="191.50">&lt;hashbr..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (7 samples, 0.43%)</title><rect x="30.0803%" y="165" width="0.4324%" height="15" fill="rgb(241,35,35)" fg:x="487" fg:w="7"/><text x="30.3303%" y="175.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (7 samples, 0.43%)</title><rect x="30.0803%" y="149" width="0.4324%" height="15" fill="rgb(243,32,47)" fg:x="487" fg:w="7"/><text x="30.3303%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (7 samples, 0.43%)</title><rect x="30.0803%" y="133" width="0.4324%" height="15" fill="rgb(247,202,23)" fg:x="487" fg:w="7"/><text x="30.3303%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (7 samples, 0.43%)</title><rect x="30.0803%" y="117" width="0.4324%" height="15" fill="rgb(219,102,11)" fg:x="487" fg:w="7"/><text x="30.3303%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (7 samples, 0.43%)</title><rect x="30.0803%" y="101" width="0.4324%" height="15" fill="rgb(243,110,44)" fg:x="487" fg:w="7"/><text x="30.3303%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (7 samples, 0.43%)</title><rect x="30.0803%" y="85" width="0.4324%" height="15" fill="rgb(222,74,54)" fg:x="487" fg:w="7"/><text x="30.3303%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (7 samples, 0.43%)</title><rect x="30.0803%" y="69" width="0.4324%" height="15" fill="rgb(216,99,12)" fg:x="487" fg:w="7"/><text x="30.3303%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.43%)</title><rect x="30.0803%" y="53" width="0.4324%" height="15" fill="rgb(226,22,26)" fg:x="487" fg:w="7"/><text x="30.3303%" y="63.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (188 samples, 11.61%)</title><rect x="19.7035%" y="293" width="11.6121%" height="15" fill="rgb(217,163,10)" fg:x="319" fg:w="188"/><text x="19.9535%" y="303.50">torpedo::arena::A..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (188 samples, 11.61%)</title><rect x="19.7035%" y="277" width="11.6121%" height="15" fill="rgb(213,25,53)" fg:x="319" fg:w="188"/><text x="19.9535%" y="287.50">torpedo::arena::A..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (13 samples, 0.80%)</title><rect x="30.5127%" y="261" width="0.8030%" height="15" fill="rgb(252,105,26)" fg:x="494" fg:w="13"/><text x="30.7627%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="31.3156%" y="197" width="0.0618%" height="15" fill="rgb(220,39,43)" fg:x="507" fg:w="1"/><text x="31.5656%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="31.3156%" y="181" width="0.0618%" height="15" fill="rgb(229,68,48)" fg:x="507" fg:w="1"/><text x="31.5656%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="31.3156%" y="165" width="0.0618%" height="15" fill="rgb(252,8,32)" fg:x="507" fg:w="1"/><text x="31.5656%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="31.3156%" y="149" width="0.0618%" height="15" fill="rgb(223,20,43)" fg:x="507" fg:w="1"/><text x="31.5656%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="31.3156%" y="133" width="0.0618%" height="15" fill="rgb(229,81,49)" fg:x="507" fg:w="1"/><text x="31.5656%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="31.3156%" y="117" width="0.0618%" height="15" fill="rgb(236,28,36)" fg:x="507" fg:w="1"/><text x="31.5656%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="31.3156%" y="101" width="0.0618%" height="15" fill="rgb(249,185,26)" fg:x="507" fg:w="1"/><text x="31.5656%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (415 samples, 25.63%)</title><rect x="5.9914%" y="485" width="25.6331%" height="15" fill="rgb(249,174,33)" fg:x="97" fg:w="415"/><text x="6.2414%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (415 samples, 25.63%)</title><rect x="5.9914%" y="469" width="25.6331%" height="15" fill="rgb(233,201,37)" fg:x="97" fg:w="415"/><text x="6.2414%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (415 samples, 25.63%)</title><rect x="5.9914%" y="453" width="25.6331%" height="15" fill="rgb(221,78,26)" fg:x="97" fg:w="415"/><text x="6.2414%" y="463.50">core::ops::function::FnOnce::call_once{{v..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (415 samples, 25.63%)</title><rect x="5.9914%" y="437" width="25.6331%" height="15" fill="rgb(250,127,30)" fg:x="97" fg:w="415"/><text x="6.2414%" y="447.50">std::thread::Builder::spawn_unchecked_::{..</text></g><g><title>std::panic::catch_unwind (415 samples, 25.63%)</title><rect x="5.9914%" y="421" width="25.6331%" height="15" fill="rgb(230,49,44)" fg:x="97" fg:w="415"/><text x="6.2414%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (415 samples, 25.63%)</title><rect x="5.9914%" y="405" width="25.6331%" height="15" fill="rgb(229,67,23)" fg:x="97" fg:w="415"/><text x="6.2414%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (415 samples, 25.63%)</title><rect x="5.9914%" y="389" width="25.6331%" height="15" fill="rgb(249,83,47)" fg:x="97" fg:w="415"/><text x="6.2414%" y="399.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (415 samples, 25.63%)</title><rect x="5.9914%" y="373" width="25.6331%" height="15" fill="rgb(215,43,3)" fg:x="97" fg:w="415"/><text x="6.2414%" y="383.50">&lt;core::panic::unwind_safe::AssertUnwindSa..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (415 samples, 25.63%)</title><rect x="5.9914%" y="357" width="25.6331%" height="15" fill="rgb(238,154,13)" fg:x="97" fg:w="415"/><text x="6.2414%" y="367.50">std::thread::Builder::spawn_unchecked_::{..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (415 samples, 25.63%)</title><rect x="5.9914%" y="341" width="25.6331%" height="15" fill="rgb(219,56,2)" fg:x="97" fg:w="415"/><text x="6.2414%" y="351.50">std::sys::backtrace::__rust_begin_short_b..</text></g><g><title>torpedo::level::level_loop::{{closure}} (415 samples, 25.63%)</title><rect x="5.9914%" y="325" width="25.6331%" height="15" fill="rgb(233,0,4)" fg:x="97" fg:w="415"/><text x="6.2414%" y="335.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (415 samples, 25.63%)</title><rect x="5.9914%" y="309" width="25.6331%" height="15" fill="rgb(235,30,7)" fg:x="97" fg:w="415"/><text x="6.2414%" y="319.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (5 samples, 0.31%)</title><rect x="31.3156%" y="293" width="0.3088%" height="15" fill="rgb(250,79,13)" fg:x="507" fg:w="5"/><text x="31.5656%" y="303.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (5 samples, 0.31%)</title><rect x="31.3156%" y="277" width="0.3088%" height="15" fill="rgb(211,146,34)" fg:x="507" fg:w="5"/><text x="31.5656%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.31%)</title><rect x="31.3156%" y="261" width="0.3088%" height="15" fill="rgb(228,22,38)" fg:x="507" fg:w="5"/><text x="31.5656%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.31%)</title><rect x="31.3156%" y="245" width="0.3088%" height="15" fill="rgb(235,168,5)" fg:x="507" fg:w="5"/><text x="31.5656%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.31%)</title><rect x="31.3156%" y="229" width="0.3088%" height="15" fill="rgb(221,155,16)" fg:x="507" fg:w="5"/><text x="31.5656%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.31%)</title><rect x="31.3156%" y="213" width="0.3088%" height="15" fill="rgb(215,215,53)" fg:x="507" fg:w="5"/><text x="31.5656%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.25%)</title><rect x="31.3774%" y="197" width="0.2471%" height="15" fill="rgb(223,4,10)" fg:x="508" fg:w="4"/><text x="31.6274%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.25%)</title><rect x="31.3774%" y="181" width="0.2471%" height="15" fill="rgb(234,103,6)" fg:x="508" fg:w="4"/><text x="31.6274%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (108 samples, 6.67%)</title><rect x="31.6245%" y="485" width="6.6708%" height="15" fill="rgb(227,97,0)" fg:x="512" fg:w="108"/><text x="31.8745%" y="495.50">core::ptr..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (108 samples, 6.67%)</title><rect x="31.6245%" y="469" width="6.6708%" height="15" fill="rgb(234,150,53)" fg:x="512" fg:w="108"/><text x="31.8745%" y="479.50">&lt;std::sys..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (108 samples, 6.67%)</title><rect x="31.6245%" y="453" width="6.6708%" height="15" fill="rgb(228,201,54)" fg:x="512" fg:w="108"/><text x="31.8745%" y="463.50">std::sys:..</text></g><g><title>6165295104 (531 samples, 32.80%)</title><rect x="5.8061%" y="533" width="32.7980%" height="15" fill="rgb(222,22,37)" fg:x="94" fg:w="531"/><text x="6.0561%" y="543.50">6165295104</text></g><g><title>__pthread_cond_wait (531 samples, 32.80%)</title><rect x="5.8061%" y="517" width="32.7980%" height="15" fill="rgb(237,53,32)" fg:x="94" fg:w="531"/><text x="6.0561%" y="527.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (528 samples, 32.61%)</title><rect x="5.9914%" y="501" width="32.6127%" height="15" fill="rgb(233,25,53)" fg:x="97" fg:w="528"/><text x="6.2414%" y="511.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (5 samples, 0.31%)</title><rect x="38.2952%" y="485" width="0.3088%" height="15" fill="rgb(210,40,34)" fg:x="620" fg:w="5"/><text x="38.5452%" y="495.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (5 samples, 0.31%)</title><rect x="38.2952%" y="469" width="0.3088%" height="15" fill="rgb(241,220,44)" fg:x="620" fg:w="5"/><text x="38.5452%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (4 samples, 0.25%)</title><rect x="38.3570%" y="453" width="0.2471%" height="15" fill="rgb(235,28,35)" fg:x="621" fg:w="4"/><text x="38.6070%" y="463.50"></text></g><g><title>_host_get_special_port (2 samples, 0.12%)</title><rect x="38.4805%" y="437" width="0.1235%" height="15" fill="rgb(210,56,17)" fg:x="623" fg:w="2"/><text x="38.7305%" y="447.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.06%)</title><rect x="40.2100%" y="517" width="0.0618%" height="15" fill="rgb(224,130,29)" fg:x="651" fg:w="1"/><text x="40.4600%" y="527.50"></text></g><g><title>__platform_strnlen (1 samples, 0.06%)</title><rect x="40.2100%" y="501" width="0.0618%" height="15" fill="rgb(235,212,8)" fg:x="651" fg:w="1"/><text x="40.4600%" y="511.50"></text></g><g><title>__platform_strnlen (1 samples, 0.06%)</title><rect x="40.2100%" y="485" width="0.0618%" height="15" fill="rgb(223,33,50)" fg:x="651" fg:w="1"/><text x="40.4600%" y="495.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.06%)</title><rect x="40.2100%" y="469" width="0.0618%" height="15" fill="rgb(219,149,13)" fg:x="651" fg:w="1"/><text x="40.4600%" y="479.50"></text></g><g><title>___workq_open (1 samples, 0.06%)</title><rect x="40.2100%" y="453" width="0.0618%" height="15" fill="rgb(250,156,29)" fg:x="651" fg:w="1"/><text x="40.4600%" y="463.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="41.0130%" y="181" width="0.0618%" height="15" fill="rgb(216,193,19)" fg:x="664" fg:w="1"/><text x="41.2630%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="41.0130%" y="165" width="0.0618%" height="15" fill="rgb(216,135,14)" fg:x="664" fg:w="1"/><text x="41.2630%" y="175.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.06%)</title><rect x="41.0747%" y="181" width="0.0618%" height="15" fill="rgb(241,47,5)" fg:x="665" fg:w="1"/><text x="41.3247%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.06%)</title><rect x="41.0747%" y="165" width="0.0618%" height="15" fill="rgb(233,42,35)" fg:x="665" fg:w="1"/><text x="41.3247%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="41.0747%" y="149" width="0.0618%" height="15" fill="rgb(231,13,6)" fg:x="665" fg:w="1"/><text x="41.3247%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="41.1365%" y="181" width="0.0618%" height="15" fill="rgb(207,181,40)" fg:x="666" fg:w="1"/><text x="41.3865%" y="191.50"></text></g><g><title>Unknown (12 samples, 0.74%)</title><rect x="40.5188%" y="197" width="0.7412%" height="15" fill="rgb(254,173,49)" fg:x="656" fg:w="12"/><text x="40.7688%" y="207.50"></text></g><g><title>_task_info (1 samples, 0.06%)</title><rect x="41.1983%" y="181" width="0.0618%" height="15" fill="rgb(221,1,38)" fg:x="667" fg:w="1"/><text x="41.4483%" y="191.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.06%)</title><rect x="41.2600%" y="197" width="0.0618%" height="15" fill="rgb(206,124,46)" fg:x="668" fg:w="1"/><text x="41.5100%" y="207.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.06%)</title><rect x="41.2600%" y="181" width="0.0618%" height="15" fill="rgb(249,21,11)" fg:x="668" fg:w="1"/><text x="41.5100%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="41.2600%" y="165" width="0.0618%" height="15" fill="rgb(222,201,40)" fg:x="668" fg:w="1"/><text x="41.5100%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (18 samples, 1.11%)</title><rect x="40.2718%" y="277" width="1.1118%" height="15" fill="rgb(235,61,29)" fg:x="652" fg:w="18"/><text x="40.5218%" y="287.50"></text></g><g><title>Unknown (18 samples, 1.11%)</title><rect x="40.2718%" y="261" width="1.1118%" height="15" fill="rgb(219,207,3)" fg:x="652" fg:w="18"/><text x="40.5218%" y="271.50"></text></g><g><title>Unknown (18 samples, 1.11%)</title><rect x="40.2718%" y="245" width="1.1118%" height="15" fill="rgb(222,56,46)" fg:x="652" fg:w="18"/><text x="40.5218%" y="255.50"></text></g><g><title>Unknown (18 samples, 1.11%)</title><rect x="40.2718%" y="229" width="1.1118%" height="15" fill="rgb(239,76,54)" fg:x="652" fg:w="18"/><text x="40.5218%" y="239.50"></text></g><g><title>Unknown (17 samples, 1.05%)</title><rect x="40.3335%" y="213" width="1.0500%" height="15" fill="rgb(231,124,27)" fg:x="653" fg:w="17"/><text x="40.5835%" y="223.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="41.3218%" y="197" width="0.0618%" height="15" fill="rgb(249,195,6)" fg:x="669" fg:w="1"/><text x="41.5718%" y="207.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.06%)</title><rect x="43.2366%" y="149" width="0.0618%" height="15" fill="rgb(237,174,47)" fg:x="700" fg:w="1"/><text x="43.4866%" y="159.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.06%)</title><rect x="43.2983%" y="149" width="0.0618%" height="15" fill="rgb(206,201,31)" fg:x="701" fg:w="1"/><text x="43.5483%" y="159.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.06%)</title><rect x="43.2983%" y="133" width="0.0618%" height="15" fill="rgb(231,57,52)" fg:x="701" fg:w="1"/><text x="43.5483%" y="143.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="43.2983%" y="117" width="0.0618%" height="15" fill="rgb(248,177,22)" fg:x="701" fg:w="1"/><text x="43.5483%" y="127.50"></text></g><g><title>_posix_spawnattr_set_qos_clamp_np (1 samples, 0.06%)</title><rect x="43.3601%" y="149" width="0.0618%" height="15" fill="rgb(215,211,37)" fg:x="702" fg:w="1"/><text x="43.6101%" y="159.50"></text></g><g><title>Unknown (14 samples, 0.86%)</title><rect x="42.6189%" y="165" width="0.8647%" height="15" fill="rgb(241,128,51)" fg:x="690" fg:w="14"/><text x="42.8689%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="43.4219%" y="149" width="0.0618%" height="15" fill="rgb(227,165,31)" fg:x="703" fg:w="1"/><text x="43.6719%" y="159.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.06%)</title><rect x="43.4836%" y="165" width="0.0618%" height="15" fill="rgb(228,167,24)" fg:x="704" fg:w="1"/><text x="43.7336%" y="175.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.06%)</title><rect x="43.4836%" y="149" width="0.0618%" height="15" fill="rgb(228,143,12)" fg:x="704" fg:w="1"/><text x="43.7336%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="43.4836%" y="133" width="0.0618%" height="15" fill="rgb(249,149,8)" fg:x="704" fg:w="1"/><text x="43.7336%" y="143.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.12%)</title><rect x="43.5454%" y="165" width="0.1235%" height="15" fill="rgb(243,35,44)" fg:x="705" fg:w="2"/><text x="43.7954%" y="175.50"></text></g><g><title>Unknown (33 samples, 2.04%)</title><rect x="41.6924%" y="181" width="2.0383%" height="15" fill="rgb(246,89,9)" fg:x="675" fg:w="33"/><text x="41.9424%" y="191.50">U..</text></g><g><title>_vm_copy (1 samples, 0.06%)</title><rect x="43.6689%" y="165" width="0.0618%" height="15" fill="rgb(233,213,13)" fg:x="707" fg:w="1"/><text x="43.9189%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="43.6689%" y="149" width="0.0618%" height="15" fill="rgb(233,141,41)" fg:x="707" fg:w="1"/><text x="43.9189%" y="159.50"></text></g><g><title>_host_get_special_port (1 samples, 0.06%)</title><rect x="43.7307%" y="181" width="0.0618%" height="15" fill="rgb(239,167,4)" fg:x="708" fg:w="1"/><text x="43.9807%" y="191.50"></text></g><g><title>_mach_continuous_time (2 samples, 0.12%)</title><rect x="43.7925%" y="181" width="0.1235%" height="15" fill="rgb(209,217,16)" fg:x="709" fg:w="2"/><text x="44.0425%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (2 samples, 0.12%)</title><rect x="43.7925%" y="165" width="0.1235%" height="15" fill="rgb(219,88,35)" fg:x="709" fg:w="2"/><text x="44.0425%" y="175.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.12%)</title><rect x="43.7925%" y="149" width="0.1235%" height="15" fill="rgb(220,193,23)" fg:x="709" fg:w="2"/><text x="44.0425%" y="159.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.06%)</title><rect x="43.9160%" y="181" width="0.0618%" height="15" fill="rgb(230,90,52)" fg:x="711" fg:w="1"/><text x="44.1660%" y="191.50"></text></g><g><title>Unknown (44 samples, 2.72%)</title><rect x="41.4453%" y="197" width="2.7177%" height="15" fill="rgb(252,106,19)" fg:x="671" fg:w="44"/><text x="41.6953%" y="207.50">Un..</text></g><g><title>_proc_clear_dirty (3 samples, 0.19%)</title><rect x="43.9778%" y="181" width="0.1853%" height="15" fill="rgb(206,74,20)" fg:x="712" fg:w="3"/><text x="44.2278%" y="191.50"></text></g><g><title>raylib::core::RaylibBuilder::build (46 samples, 2.84%)</title><rect x="41.3836%" y="277" width="2.8413%" height="15" fill="rgb(230,138,44)" fg:x="670" fg:w="46"/><text x="41.6336%" y="287.50">ra..</text></g><g><title>raylib::core::init_window (46 samples, 2.84%)</title><rect x="41.3836%" y="261" width="2.8413%" height="15" fill="rgb(235,182,43)" fg:x="670" fg:w="46"/><text x="41.6336%" y="271.50">ra..</text></g><g><title>Unknown (46 samples, 2.84%)</title><rect x="41.3836%" y="245" width="2.8413%" height="15" fill="rgb(242,16,51)" fg:x="670" fg:w="46"/><text x="41.6336%" y="255.50">Un..</text></g><g><title>Unknown (46 samples, 2.84%)</title><rect x="41.3836%" y="229" width="2.8413%" height="15" fill="rgb(248,9,4)" fg:x="670" fg:w="46"/><text x="41.6336%" y="239.50">Un..</text></g><g><title>Unknown (46 samples, 2.84%)</title><rect x="41.3836%" y="213" width="2.8413%" height="15" fill="rgb(210,31,22)" fg:x="670" fg:w="46"/><text x="41.6336%" y="223.50">Un..</text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="44.1631%" y="197" width="0.0618%" height="15" fill="rgb(239,54,39)" fg:x="715" fg:w="1"/><text x="44.4131%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.06%)</title><rect x="44.2248%" y="261" width="0.0618%" height="15" fill="rgb(230,99,41)" fg:x="716" fg:w="1"/><text x="44.4748%" y="271.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.06%)</title><rect x="44.2248%" y="245" width="0.0618%" height="15" fill="rgb(253,106,12)" fg:x="716" fg:w="1"/><text x="44.4748%" y="255.50"></text></g><g><title>torpedo::game::game_create_level (1 samples, 0.06%)</title><rect x="44.2248%" y="229" width="0.0618%" height="15" fill="rgb(213,46,41)" fg:x="716" fg:w="1"/><text x="44.4748%" y="239.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.06%)</title><rect x="44.2248%" y="213" width="0.0618%" height="15" fill="rgb(215,133,35)" fg:x="716" fg:w="1"/><text x="44.4748%" y="223.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.06%)</title><rect x="44.2248%" y="197" width="0.0618%" height="15" fill="rgb(213,28,5)" fg:x="716" fg:w="1"/><text x="44.4748%" y="207.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.06%)</title><rect x="44.2248%" y="181" width="0.0618%" height="15" fill="rgb(215,77,49)" fg:x="716" fg:w="1"/><text x="44.4748%" y="191.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.06%)</title><rect x="44.2248%" y="165" width="0.0618%" height="15" fill="rgb(248,100,22)" fg:x="716" fg:w="1"/><text x="44.4748%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.06%)</title><rect x="44.2248%" y="149" width="0.0618%" height="15" fill="rgb(208,67,9)" fg:x="716" fg:w="1"/><text x="44.4748%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.06%)</title><rect x="44.2248%" y="133" width="0.0618%" height="15" fill="rgb(219,133,21)" fg:x="716" fg:w="1"/><text x="44.4748%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.06%)</title><rect x="44.2866%" y="261" width="0.0618%" height="15" fill="rgb(246,46,29)" fg:x="717" fg:w="1"/><text x="44.5366%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.06%)</title><rect x="44.2866%" y="245" width="0.0618%" height="15" fill="rgb(246,185,52)" fg:x="717" fg:w="1"/><text x="44.5366%" y="255.50"></text></g><g><title>Unknown (2 samples, 0.12%)</title><rect x="59.6665%" y="181" width="0.1235%" height="15" fill="rgb(252,136,11)" fg:x="966" fg:w="2"/><text x="59.9165%" y="191.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.06%)</title><rect x="59.7282%" y="165" width="0.0618%" height="15" fill="rgb(219,138,53)" fg:x="967" fg:w="1"/><text x="59.9782%" y="175.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.06%)</title><rect x="59.7282%" y="149" width="0.0618%" height="15" fill="rgb(211,51,23)" fg:x="967" fg:w="1"/><text x="59.9782%" y="159.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.06%)</title><rect x="59.7282%" y="133" width="0.0618%" height="15" fill="rgb(247,221,28)" fg:x="967" fg:w="1"/><text x="59.9782%" y="143.50"></text></g><g><title>___workq_open (2 samples, 0.12%)</title><rect x="59.7900%" y="181" width="0.1235%" height="15" fill="rgb(251,222,45)" fg:x="968" fg:w="2"/><text x="60.0400%" y="191.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.06%)</title><rect x="59.9135%" y="181" width="0.0618%" height="15" fill="rgb(217,162,53)" fg:x="970" fg:w="1"/><text x="60.1635%" y="191.50"></text></g><g><title>__kernelrpc_thread_policy (4 samples, 0.25%)</title><rect x="59.9753%" y="181" width="0.2471%" height="15" fill="rgb(229,93,14)" fg:x="971" fg:w="4"/><text x="60.2253%" y="191.50"></text></g><g><title>_proc_clear_dirty (4 samples, 0.25%)</title><rect x="59.9753%" y="165" width="0.2471%" height="15" fill="rgb(209,67,49)" fg:x="971" fg:w="4"/><text x="60.2253%" y="175.50"></text></g><g><title>__kernelrpc_vm_remap (1 samples, 0.06%)</title><rect x="60.2224%" y="181" width="0.0618%" height="15" fill="rgb(213,87,29)" fg:x="975" fg:w="1"/><text x="60.4724%" y="191.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.06%)</title><rect x="60.2841%" y="181" width="0.0618%" height="15" fill="rgb(205,151,52)" fg:x="976" fg:w="1"/><text x="60.5341%" y="191.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.06%)</title><rect x="60.3459%" y="181" width="0.0618%" height="15" fill="rgb(253,215,39)" fg:x="977" fg:w="1"/><text x="60.5959%" y="191.50"></text></g><g><title>_host_get_special_port (1 samples, 0.06%)</title><rect x="60.4077%" y="181" width="0.0618%" height="15" fill="rgb(221,220,41)" fg:x="978" fg:w="1"/><text x="60.6577%" y="191.50"></text></g><g><title>_host_request_notification (1 samples, 0.06%)</title><rect x="60.4694%" y="181" width="0.0618%" height="15" fill="rgb(218,133,21)" fg:x="979" fg:w="1"/><text x="60.7194%" y="191.50"></text></g><g><title>_mach_continuous_time (61 samples, 3.77%)</title><rect x="60.5312%" y="181" width="3.7678%" height="15" fill="rgb(221,193,43)" fg:x="980" fg:w="61"/><text x="60.7812%" y="191.50">_mac..</text></g><g><title>__kernelrpc_vm_read (61 samples, 3.77%)</title><rect x="60.5312%" y="165" width="3.7678%" height="15" fill="rgb(240,128,52)" fg:x="980" fg:w="61"/><text x="60.7812%" y="175.50">__ke..</text></g><g><title>_proc_clear_dirty (61 samples, 3.77%)</title><rect x="60.5312%" y="149" width="3.7678%" height="15" fill="rgb(253,114,12)" fg:x="980" fg:w="61"/><text x="60.7812%" y="159.50">_pro..</text></g><g><title>_proc_clear_dirty (146 samples, 9.02%)</title><rect x="64.2989%" y="181" width="9.0179%" height="15" fill="rgb(215,223,47)" fg:x="1041" fg:w="146"/><text x="64.5489%" y="191.50">_proc_clear_d..</text></g><g><title>_proc_setpcontrol (57 samples, 3.52%)</title><rect x="73.3169%" y="181" width="3.5207%" height="15" fill="rgb(248,225,23)" fg:x="1187" fg:w="57"/><text x="73.5669%" y="191.50">_pr..</text></g><g><title>_pthread_cond_broadcast (1 samples, 0.06%)</title><rect x="76.8376%" y="181" width="0.0618%" height="15" fill="rgb(250,108,0)" fg:x="1244" fg:w="1"/><text x="77.0876%" y="191.50"></text></g><g><title>_pthread_rwlock_init (1 samples, 0.06%)</title><rect x="76.8376%" y="165" width="0.0618%" height="15" fill="rgb(228,208,7)" fg:x="1244" fg:w="1"/><text x="77.0876%" y="175.50"></text></g><g><title>_setxattr (1 samples, 0.06%)</title><rect x="76.8993%" y="181" width="0.0618%" height="15" fill="rgb(244,45,10)" fg:x="1245" fg:w="1"/><text x="77.1493%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (529 samples, 32.67%)</title><rect x="44.3484%" y="261" width="32.6745%" height="15" fill="rgb(207,125,25)" fg:x="718" fg:w="529"/><text x="44.5984%" y="271.50">core::ptr::drop_in_place&lt;raylib::core::drawing::Rayli..</text></g><g><title>Unknown (529 samples, 32.67%)</title><rect x="44.3484%" y="245" width="32.6745%" height="15" fill="rgb(210,195,18)" fg:x="718" fg:w="529"/><text x="44.5984%" y="255.50">Unknown</text></g><g><title>Unknown (529 samples, 32.67%)</title><rect x="44.3484%" y="229" width="32.6745%" height="15" fill="rgb(249,80,12)" fg:x="718" fg:w="529"/><text x="44.5984%" y="239.50">Unknown</text></g><g><title>Unknown (521 samples, 32.18%)</title><rect x="44.8425%" y="213" width="32.1804%" height="15" fill="rgb(221,65,9)" fg:x="726" fg:w="521"/><text x="45.0925%" y="223.50">Unknown</text></g><g><title>Unknown (516 samples, 31.87%)</title><rect x="45.1513%" y="197" width="31.8715%" height="15" fill="rgb(235,49,36)" fg:x="731" fg:w="516"/><text x="45.4013%" y="207.50">Unknown</text></g><g><title>_vm_remap (1 samples, 0.06%)</title><rect x="76.9611%" y="181" width="0.0618%" height="15" fill="rgb(225,32,20)" fg:x="1246" fg:w="1"/><text x="77.2111%" y="191.50"></text></g><g><title>_vm_remap (1 samples, 0.06%)</title><rect x="76.9611%" y="165" width="0.0618%" height="15" fill="rgb(215,141,46)" fg:x="1246" fg:w="1"/><text x="77.2111%" y="175.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (5 samples, 0.31%)</title><rect x="77.0229%" y="261" width="0.3088%" height="15" fill="rgb(250,160,47)" fg:x="1247" fg:w="5"/><text x="77.2729%" y="271.50"></text></g><g><title>Unknown (5 samples, 0.31%)</title><rect x="77.0229%" y="245" width="0.3088%" height="15" fill="rgb(216,222,40)" fg:x="1247" fg:w="5"/><text x="77.2729%" y="255.50"></text></g><g><title>Unknown (5 samples, 0.31%)</title><rect x="77.0229%" y="229" width="0.3088%" height="15" fill="rgb(234,217,39)" fg:x="1247" fg:w="5"/><text x="77.2729%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="229" width="0.8030%" height="15" fill="rgb(207,178,40)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Inner&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="213" width="0.8030%" height="15" fill="rgb(221,136,13)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt;&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="197" width="0.8030%" height="15" fill="rgb(249,199,10)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="181" width="0.8030%" height="15" fill="rgb(249,222,13)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.80%)</title><rect x="77.3317%" y="165" width="0.8030%" height="15" fill="rgb(244,185,38)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (13 samples, 0.80%)</title><rect x="77.3317%" y="149" width="0.8030%" height="15" fill="rgb(236,202,9)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::OtherInner&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="133" width="0.8030%" height="15" fill="rgb(250,229,37)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::sync::thread_parking::darwin::Parker&gt; (13 samples, 0.80%)</title><rect x="77.3317%" y="117" width="0.8030%" height="15" fill="rgb(206,174,23)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="127.50"></text></g><g><title>&lt;std::sys::sync::thread_parking::darwin::Parker as core::ops::drop::Drop&gt;::drop (13 samples, 0.80%)</title><rect x="77.3317%" y="101" width="0.8030%" height="15" fill="rgb(211,33,43)" fg:x="1252" fg:w="13"/><text x="77.5817%" y="111.50"></text></g><g><title>__os_once_gate_wait (11 samples, 0.68%)</title><rect x="77.4552%" y="85" width="0.6794%" height="15" fill="rgb(245,58,50)" fg:x="1254" fg:w="11"/><text x="77.7052%" y="95.50"></text></g><g><title>_sigprocmask (11 samples, 0.68%)</title><rect x="77.4552%" y="69" width="0.6794%" height="15" fill="rgb(244,68,36)" fg:x="1254" fg:w="11"/><text x="77.7052%" y="79.50"></text></g><g><title>_proc_clear_dirty (11 samples, 0.68%)</title><rect x="77.4552%" y="53" width="0.6794%" height="15" fill="rgb(232,229,15)" fg:x="1254" fg:w="11"/><text x="77.7052%" y="63.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (45 samples, 2.78%)</title><rect x="77.3317%" y="261" width="2.7795%" height="15" fill="rgb(254,30,23)" fg:x="1252" fg:w="45"/><text x="77.5817%" y="271.50">st..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (45 samples, 2.78%)</title><rect x="77.3317%" y="245" width="2.7795%" height="15" fill="rgb(235,160,14)" fg:x="1252" fg:w="45"/><text x="77.5817%" y="255.50">st..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (32 samples, 1.98%)</title><rect x="78.1347%" y="229" width="1.9765%" height="15" fill="rgb(212,155,44)" fg:x="1265" fg:w="32"/><text x="78.3847%" y="239.50">s..</text></g><g><title>_pthread_mutex_setprioceiling (32 samples, 1.98%)</title><rect x="78.1347%" y="213" width="1.9765%" height="15" fill="rgb(226,2,50)" fg:x="1265" fg:w="32"/><text x="78.3847%" y="223.50">_..</text></g><g><title>__pthread_cond_wait (8 samples, 0.49%)</title><rect x="79.6170%" y="197" width="0.4941%" height="15" fill="rgb(234,177,6)" fg:x="1289" fg:w="8"/><text x="79.8670%" y="207.50"></text></g><g><title>___workq_open (8 samples, 0.49%)</title><rect x="79.6170%" y="181" width="0.4941%" height="15" fill="rgb(217,24,9)" fg:x="1289" fg:w="8"/><text x="79.8670%" y="191.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (13 samples, 0.80%)</title><rect x="80.1112%" y="181" width="0.8030%" height="15" fill="rgb(220,13,46)" fg:x="1297" fg:w="13"/><text x="80.3612%" y="191.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (1 samples, 0.06%)</title><rect x="80.9141%" y="181" width="0.0618%" height="15" fill="rgb(239,221,27)" fg:x="1310" fg:w="1"/><text x="81.1641%" y="191.50"></text></g><g><title>_kpersona_get (1 samples, 0.06%)</title><rect x="80.9141%" y="165" width="0.0618%" height="15" fill="rgb(222,198,25)" fg:x="1310" fg:w="1"/><text x="81.1641%" y="175.50"></text></g><g><title>std::thread::spawn (20 samples, 1.24%)</title><rect x="80.1112%" y="261" width="1.2353%" height="15" fill="rgb(211,99,13)" fg:x="1297" fg:w="20"/><text x="80.3612%" y="271.50"></text></g><g><title>std::thread::Builder::spawn (20 samples, 1.24%)</title><rect x="80.1112%" y="245" width="1.2353%" height="15" fill="rgb(232,111,31)" fg:x="1297" fg:w="20"/><text x="80.3612%" y="255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (20 samples, 1.24%)</title><rect x="80.1112%" y="229" width="1.2353%" height="15" fill="rgb(245,82,37)" fg:x="1297" fg:w="20"/><text x="80.3612%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (20 samples, 1.24%)</title><rect x="80.1112%" y="213" width="1.2353%" height="15" fill="rgb(227,149,46)" fg:x="1297" fg:w="20"/><text x="80.3612%" y="223.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (20 samples, 1.24%)</title><rect x="80.1112%" y="197" width="1.2353%" height="15" fill="rgb(218,36,50)" fg:x="1297" fg:w="20"/><text x="80.3612%" y="207.50"></text></g><g><title>_pthread_workqueue_addthreads_np (6 samples, 0.37%)</title><rect x="80.9759%" y="181" width="0.3706%" height="15" fill="rgb(226,80,48)" fg:x="1311" fg:w="6"/><text x="81.2259%" y="191.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (6 samples, 0.37%)</title><rect x="80.9759%" y="165" width="0.3706%" height="15" fill="rgb(238,224,15)" fg:x="1311" fg:w="6"/><text x="81.2259%" y="175.50"></text></g><g><title>_pthread_cond_broadcast (21 samples, 1.30%)</title><rect x="83.1377%" y="245" width="1.2971%" height="15" fill="rgb(241,136,10)" fg:x="1346" fg:w="21"/><text x="83.3877%" y="255.50"></text></g><g><title>_pthread_rwlock_init (21 samples, 1.30%)</title><rect x="83.1377%" y="229" width="1.2971%" height="15" fill="rgb(208,32,45)" fg:x="1346" fg:w="21"/><text x="83.3877%" y="239.50"></text></g><g><title>core::mem::drop (1 samples, 0.06%)</title><rect x="84.4348%" y="245" width="0.0618%" height="15" fill="rgb(207,135,9)" fg:x="1367" fg:w="1"/><text x="84.6848%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibMode3D&lt;raylib::core::drawing::RaylibDrawHandle&gt;&gt; (1 samples, 0.06%)</title><rect x="84.4348%" y="229" width="0.0618%" height="15" fill="rgb(206,86,44)" fg:x="1367" fg:w="1"/><text x="84.6848%" y="239.50"></text></g><g><title>&lt;raylib::core::drawing::RaylibMode3D&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="84.4348%" y="213" width="0.0618%" height="15" fill="rgb(245,177,15)" fg:x="1367" fg:w="1"/><text x="84.6848%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="84.4348%" y="197" width="0.0618%" height="15" fill="rgb(206,64,50)" fg:x="1367" fg:w="1"/><text x="84.6848%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="84.4348%" y="181" width="0.0618%" height="15" fill="rgb(234,36,40)" fg:x="1367" fg:w="1"/><text x="84.6848%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (38 samples, 2.35%)</title><rect x="84.4966%" y="245" width="2.3471%" height="15" fill="rgb(213,64,8)" fg:x="1368" fg:w="38"/><text x="84.7466%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (38 samples, 2.35%)</title><rect x="84.4966%" y="229" width="2.3471%" height="15" fill="rgb(210,75,36)" fg:x="1368" fg:w="38"/><text x="84.7466%" y="239.50">c..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 2.35%)</title><rect x="84.4966%" y="213" width="2.3471%" height="15" fill="rgb(229,88,21)" fg:x="1368" fg:w="38"/><text x="84.7466%" y="223.50">&lt;..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (38 samples, 2.35%)</title><rect x="84.4966%" y="197" width="2.3471%" height="15" fill="rgb(252,204,47)" fg:x="1368" fg:w="38"/><text x="84.7466%" y="207.50">s..</text></g><g><title>_pthread_cond_broadcast (22 samples, 1.36%)</title><rect x="85.4849%" y="181" width="1.3589%" height="15" fill="rgb(208,77,27)" fg:x="1384" fg:w="22"/><text x="85.7349%" y="191.50"></text></g><g><title>_pthread_rwlock_init (22 samples, 1.36%)</title><rect x="85.4849%" y="165" width="1.3589%" height="15" fill="rgb(221,76,26)" fg:x="1384" fg:w="22"/><text x="85.7349%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (132 samples, 8.15%)</title><rect x="86.8437%" y="245" width="8.1532%" height="15" fill="rgb(225,139,18)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="255.50">core::ptr::..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 8.15%)</title><rect x="86.8437%" y="229" width="8.1532%" height="15" fill="rgb(230,137,11)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="239.50">&lt;std::sync:..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (132 samples, 8.15%)</title><rect x="86.8437%" y="213" width="8.1532%" height="15" fill="rgb(212,28,1)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="223.50">std::sys::s..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (132 samples, 8.15%)</title><rect x="86.8437%" y="197" width="8.1532%" height="15" fill="rgb(248,164,17)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="207.50">std::sys::s..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (132 samples, 8.15%)</title><rect x="86.8437%" y="181" width="8.1532%" height="15" fill="rgb(222,171,42)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="191.50">std::sys::s..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (132 samples, 8.15%)</title><rect x="86.8437%" y="165" width="8.1532%" height="15" fill="rgb(243,84,45)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="175.50">std::sys::s..</text></g><g><title>std::thread::Thread::unpark (132 samples, 8.15%)</title><rect x="86.8437%" y="149" width="8.1532%" height="15" fill="rgb(252,49,23)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="159.50">std::thread..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (132 samples, 8.15%)</title><rect x="86.8437%" y="133" width="8.1532%" height="15" fill="rgb(215,19,7)" fg:x="1406" fg:w="132"/><text x="87.0937%" y="143.50">std::sys::s..</text></g><g><title>raylib::core::camera::&lt;impl raylib::core::RaylibHandle&gt;::update_camera (1 samples, 0.06%)</title><rect x="94.9969%" y="245" width="0.0618%" height="15" fill="rgb(238,81,41)" fg:x="1538" fg:w="1"/><text x="95.2469%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="94.9969%" y="229" width="0.0618%" height="15" fill="rgb(210,199,37)" fg:x="1538" fg:w="1"/><text x="95.2469%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_fps (2 samples, 0.12%)</title><rect x="95.0587%" y="245" width="0.1235%" height="15" fill="rgb(244,192,49)" fg:x="1539" fg:w="2"/><text x="95.3087%" y="255.50"></text></g><g><title>Unknown (2 samples, 0.12%)</title><rect x="95.0587%" y="229" width="0.1235%" height="15" fill="rgb(226,211,11)" fg:x="1539" fg:w="2"/><text x="95.3087%" y="239.50"></text></g><g><title>Unknown (2 samples, 0.12%)</title><rect x="95.0587%" y="213" width="0.1235%" height="15" fill="rgb(236,162,54)" fg:x="1539" fg:w="2"/><text x="95.3087%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="95.1204%" y="197" width="0.0618%" height="15" fill="rgb(220,229,9)" fg:x="1540" fg:w="1"/><text x="95.3704%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="95.1204%" y="181" width="0.0618%" height="15" fill="rgb(250,87,22)" fg:x="1540" fg:w="1"/><text x="95.3704%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="95.1204%" y="165" width="0.0618%" height="15" fill="rgb(239,43,17)" fg:x="1540" fg:w="1"/><text x="95.3704%" y="175.50"></text></g><g><title>raylib::core::drawing::RaylibMode3DExt::begin_mode3D (2 samples, 0.12%)</title><rect x="95.1822%" y="245" width="0.1235%" height="15" fill="rgb(231,177,25)" fg:x="1541" fg:w="2"/><text x="95.4322%" y="255.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.74%)</title><rect x="95.3057%" y="245" width="0.7412%" height="15" fill="rgb(219,179,1)" fg:x="1543" fg:w="12"/><text x="95.5557%" y="255.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (12 samples, 0.74%)</title><rect x="95.3057%" y="229" width="0.7412%" height="15" fill="rgb(238,219,53)" fg:x="1543" fg:w="12"/><text x="95.5557%" y="239.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (8 samples, 0.49%)</title><rect x="95.5528%" y="213" width="0.4941%" height="15" fill="rgb(232,167,36)" fg:x="1547" fg:w="8"/><text x="95.8028%" y="223.50"></text></g><g><title>__pthread_mutex_firstfit_unlock_slow (6 samples, 0.37%)</title><rect x="95.6763%" y="197" width="0.3706%" height="15" fill="rgb(244,19,51)" fg:x="1549" fg:w="6"/><text x="95.9263%" y="207.50"></text></g><g><title>_pthread_rwlock_init (6 samples, 0.37%)</title><rect x="95.6763%" y="181" width="0.3706%" height="15" fill="rgb(224,6,22)" fg:x="1549" fg:w="6"/><text x="95.9263%" y="191.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (21 samples, 1.30%)</title><rect x="96.0469%" y="245" width="1.2971%" height="15" fill="rgb(224,145,5)" fg:x="1555" fg:w="21"/><text x="96.2969%" y="255.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (21 samples, 1.30%)</title><rect x="96.0469%" y="229" width="1.2971%" height="15" fill="rgb(234,130,49)" fg:x="1555" fg:w="21"/><text x="96.2969%" y="239.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::try_lock (6 samples, 0.37%)</title><rect x="96.9734%" y="213" width="0.3706%" height="15" fill="rgb(254,6,2)" fg:x="1570" fg:w="6"/><text x="97.2234%" y="223.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (42 samples, 2.59%)</title><rect x="97.3440%" y="229" width="2.5942%" height="15" fill="rgb(208,96,46)" fg:x="1576" fg:w="42"/><text x="97.5940%" y="239.50">ra..</text></g><g><title>Unknown (42 samples, 2.59%)</title><rect x="97.3440%" y="213" width="2.5942%" height="15" fill="rgb(239,3,39)" fg:x="1576" fg:w="42"/><text x="97.5940%" y="223.50">Un..</text></g><g><title>Unknown (42 samples, 2.59%)</title><rect x="97.3440%" y="197" width="2.5942%" height="15" fill="rgb(233,210,1)" fg:x="1576" fg:w="42"/><text x="97.5940%" y="207.50">Un..</text></g><g><title>Unknown (42 samples, 2.59%)</title><rect x="97.3440%" y="181" width="2.5942%" height="15" fill="rgb(244,137,37)" fg:x="1576" fg:w="42"/><text x="97.5940%" y="191.50">Un..</text></g><g><title>Unknown (42 samples, 2.59%)</title><rect x="97.3440%" y="165" width="2.5942%" height="15" fill="rgb(240,136,2)" fg:x="1576" fg:w="42"/><text x="97.5940%" y="175.50">Un..</text></g><g><title>all (1,619 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1619"/><text x="0.2500%" y="559.50"></text></g><g><title>8707296384 (994 samples, 61.40%)</title><rect x="38.6041%" y="533" width="61.3959%" height="15" fill="rgb(218,185,22)" fg:x="625" fg:w="994"/><text x="38.8541%" y="543.50">8707296384</text></g><g><title>_main (967 samples, 59.73%)</title><rect x="40.2718%" y="517" width="59.7282%" height="15" fill="rgb(225,218,4)" fg:x="652" fg:w="967"/><text x="40.5218%" y="527.50">_main</text></g><g><title>std::rt::lang_start_internal (967 samples, 59.73%)</title><rect x="40.2718%" y="501" width="59.7282%" height="15" fill="rgb(230,182,32)" fg:x="652" fg:w="967"/><text x="40.5218%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (967 samples, 59.73%)</title><rect x="40.2718%" y="485" width="59.7282%" height="15" fill="rgb(242,56,43)" fg:x="652" fg:w="967"/><text x="40.5218%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (967 samples, 59.73%)</title><rect x="40.2718%" y="469" width="59.7282%" height="15" fill="rgb(233,99,24)" fg:x="652" fg:w="967"/><text x="40.5218%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (967 samples, 59.73%)</title><rect x="40.2718%" y="453" width="59.7282%" height="15" fill="rgb(234,209,42)" fg:x="652" fg:w="967"/><text x="40.5218%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (967 samples, 59.73%)</title><rect x="40.2718%" y="437" width="59.7282%" height="15" fill="rgb(227,7,12)" fg:x="652" fg:w="967"/><text x="40.5218%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (967 samples, 59.73%)</title><rect x="40.2718%" y="421" width="59.7282%" height="15" fill="rgb(245,203,43)" fg:x="652" fg:w="967"/><text x="40.5218%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (967 samples, 59.73%)</title><rect x="40.2718%" y="405" width="59.7282%" height="15" fill="rgb(238,205,33)" fg:x="652" fg:w="967"/><text x="40.5218%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (967 samples, 59.73%)</title><rect x="40.2718%" y="389" width="59.7282%" height="15" fill="rgb(231,56,7)" fg:x="652" fg:w="967"/><text x="40.5218%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (967 samples, 59.73%)</title><rect x="40.2718%" y="373" width="59.7282%" height="15" fill="rgb(244,186,29)" fg:x="652" fg:w="967"/><text x="40.5218%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (967 samples, 59.73%)</title><rect x="40.2718%" y="357" width="59.7282%" height="15" fill="rgb(234,111,31)" fg:x="652" fg:w="967"/><text x="40.5218%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (967 samples, 59.73%)</title><rect x="40.2718%" y="341" width="59.7282%" height="15" fill="rgb(241,149,10)" fg:x="652" fg:w="967"/><text x="40.5218%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (967 samples, 59.73%)</title><rect x="40.2718%" y="325" width="59.7282%" height="15" fill="rgb(249,206,44)" fg:x="652" fg:w="967"/><text x="40.5218%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (967 samples, 59.73%)</title><rect x="40.2718%" y="309" width="59.7282%" height="15" fill="rgb(251,153,30)" fg:x="652" fg:w="967"/><text x="40.5218%" y="319.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (967 samples, 59.73%)</title><rect x="40.2718%" y="293" width="59.7282%" height="15" fill="rgb(239,152,38)" fg:x="652" fg:w="967"/><text x="40.5218%" y="303.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (903 samples, 55.78%)</title><rect x="44.2248%" y="277" width="55.7752%" height="15" fill="rgb(249,139,47)" fg:x="716" fg:w="903"/><text x="44.4748%" y="287.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (302 samples, 18.65%)</title><rect x="81.3465%" y="261" width="18.6535%" height="15" fill="rgb(244,64,35)" fg:x="1317" fg:w="302"/><text x="81.5965%" y="271.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (43 samples, 2.66%)</title><rect x="97.3440%" y="245" width="2.6560%" height="15" fill="rgb(216,46,15)" fg:x="1576" fg:w="43"/><text x="97.5940%" y="255.50">to..</text></g><g><title>torpedo::level::get_transform_comp (1 samples, 0.06%)</title><rect x="99.9382%" y="229" width="0.0618%" height="15" fill="rgb(250,74,19)" fg:x="1618" fg:w="1"/><text x="100.1882%" y="239.50"></text></g></svg></svg>