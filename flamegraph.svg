<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="451"><g><title>6136852480 (2 samples, 0.44%)</title><rect x="0.0000%" y="517" width="0.4435%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.22%)</title><rect x="0.2217%" y="501" width="0.2217%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4717%" y="511.50"></text></g><g><title>_task_restartable_ranges_synchronize (1 samples, 0.22%)</title><rect x="0.2217%" y="485" width="0.2217%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4717%" y="495.50"></text></g><g><title>6137425920 (1 samples, 0.22%)</title><rect x="0.4435%" y="517" width="0.2217%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.6935%" y="527.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.22%)</title><rect x="0.4435%" y="501" width="0.2217%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.6935%" y="511.50"></text></g><g><title>_mach_reply_port (1 samples, 0.22%)</title><rect x="0.4435%" y="485" width="0.2217%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.6935%" y="495.50"></text></g><g><title>_thread_get_state (1 samples, 0.22%)</title><rect x="0.4435%" y="469" width="0.2217%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.6935%" y="479.50"></text></g><g><title>_proc_regionfilename (1 samples, 0.22%)</title><rect x="0.4435%" y="453" width="0.2217%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.6935%" y="463.50"></text></g><g><title>6137999360 (1 samples, 0.22%)</title><rect x="0.6652%" y="517" width="0.2217%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.9152%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.22%)</title><rect x="0.6652%" y="501" width="0.2217%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.9152%" y="511.50"></text></g><g><title>6138572800 (2 samples, 0.44%)</title><rect x="0.8869%" y="517" width="0.4435%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="1.1369%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (2 samples, 0.44%)</title><rect x="0.8869%" y="501" width="0.4435%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="2"/><text x="1.1369%" y="511.50"></text></g><g><title>_proc_udata_info (1 samples, 0.22%)</title><rect x="1.1086%" y="485" width="0.2217%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="1.3586%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="1.3304%" y="277" width="0.2217%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.5804%" y="287.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="1.3304%" y="261" width="0.2217%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.5804%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="1.3304%" y="245" width="0.2217%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.5804%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.22%)</title><rect x="1.3304%" y="229" width="0.2217%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="1.5804%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.22%)</title><rect x="1.3304%" y="213" width="0.2217%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="1.5804%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.22%)</title><rect x="1.3304%" y="197" width="0.2217%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="1.5804%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.22%)</title><rect x="1.3304%" y="181" width="0.2217%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="1.5804%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="1.3304%" y="165" width="0.2217%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="1.5804%" y="175.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="1.5521%" y="277" width="0.2217%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="1.8021%" y="287.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.22%)</title><rect x="1.5521%" y="261" width="0.2217%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="1.8021%" y="271.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="1.5521%" y="245" width="0.2217%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="1.8021%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.44%)</title><rect x="1.7738%" y="261" width="0.4435%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="2"/><text x="2.0238%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.44%)</title><rect x="1.7738%" y="245" width="0.4435%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="2"/><text x="2.0238%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.44%)</title><rect x="1.7738%" y="229" width="0.4435%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="2"/><text x="2.0238%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.44%)</title><rect x="1.7738%" y="213" width="0.4435%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="2"/><text x="2.0238%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="1.7738%" y="197" width="0.4435%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="2"/><text x="2.0238%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="1.7738%" y="181" width="0.4435%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="2"/><text x="2.0238%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="1.7738%" y="165" width="0.4435%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="2"/><text x="2.0238%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.44%)</title><rect x="1.7738%" y="149" width="0.4435%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="2"/><text x="2.0238%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.44%)</title><rect x="1.7738%" y="133" width="0.4435%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="2"/><text x="2.0238%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.44%)</title><rect x="1.7738%" y="117" width="0.4435%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="2"/><text x="2.0238%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.44%)</title><rect x="1.7738%" y="101" width="0.4435%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="2"/><text x="2.0238%" y="111.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (4 samples, 0.89%)</title><rect x="1.7738%" y="277" width="0.8869%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="4"/><text x="2.0238%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.44%)</title><rect x="2.2173%" y="261" width="0.4435%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="2"/><text x="2.4673%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.44%)</title><rect x="2.2173%" y="245" width="0.4435%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="2"/><text x="2.4673%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.89%)</title><rect x="2.6608%" y="277" width="0.8869%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="4"/><text x="2.9108%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.89%)</title><rect x="2.6608%" y="261" width="0.8869%" height="15" fill="rgb(232,182,51)" fg:x="12" fg:w="4"/><text x="2.9108%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.89%)</title><rect x="2.6608%" y="245" width="0.8869%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="4"/><text x="2.9108%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.89%)</title><rect x="2.6608%" y="229" width="0.8869%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="4"/><text x="2.9108%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.89%)</title><rect x="2.6608%" y="213" width="0.8869%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="4"/><text x="2.9108%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.89%)</title><rect x="2.6608%" y="197" width="0.8869%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="4"/><text x="2.9108%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.89%)</title><rect x="2.6608%" y="181" width="0.8869%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="4"/><text x="2.9108%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.89%)</title><rect x="2.6608%" y="165" width="0.8869%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="4"/><text x="2.9108%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4 samples, 0.89%)</title><rect x="2.6608%" y="149" width="0.8869%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="4"/><text x="2.9108%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.67%)</title><rect x="2.8825%" y="133" width="0.6652%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="3"/><text x="3.1325%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.67%)</title><rect x="2.8825%" y="117" width="0.6652%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="3"/><text x="3.1325%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.67%)</title><rect x="2.8825%" y="101" width="0.6652%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="3"/><text x="3.1325%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;usize&gt;&gt; (1 samples, 0.22%)</title><rect x="3.5477%" y="277" width="0.2217%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="1"/><text x="3.7977%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="3.5477%" y="261" width="0.2217%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="1"/><text x="3.7977%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.22%)</title><rect x="3.5477%" y="245" width="0.2217%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="1"/><text x="3.7977%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="3.5477%" y="229" width="0.2217%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="1"/><text x="3.7977%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;usize&gt;&gt; (1 samples, 0.22%)</title><rect x="3.5477%" y="213" width="0.2217%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="1"/><text x="3.7977%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="3.5477%" y="197" width="0.2217%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="3.7977%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (3 samples, 0.67%)</title><rect x="3.7694%" y="277" width="0.6652%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="3"/><text x="4.0194%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (3 samples, 0.67%)</title><rect x="3.7694%" y="261" width="0.6652%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="3"/><text x="4.0194%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (3 samples, 0.67%)</title><rect x="3.7694%" y="245" width="0.6652%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="3"/><text x="4.0194%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.67%)</title><rect x="3.7694%" y="229" width="0.6652%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="3"/><text x="4.0194%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.67%)</title><rect x="3.7694%" y="213" width="0.6652%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="3"/><text x="4.0194%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.67%)</title><rect x="3.7694%" y="197" width="0.6652%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="3"/><text x="4.0194%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.22%)</title><rect x="4.4346%" y="245" width="0.2217%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="1"/><text x="4.6846%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.22%)</title><rect x="4.4346%" y="229" width="0.2217%" height="15" fill="rgb(222,148,37)" fg:x="20" fg:w="1"/><text x="4.6846%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="4.4346%" y="213" width="0.2217%" height="15" fill="rgb(234,67,33)" fg:x="20" fg:w="1"/><text x="4.6846%" y="223.50"></text></g><g><title>__platform_strcpy (1 samples, 0.22%)</title><rect x="4.4346%" y="197" width="0.2217%" height="15" fill="rgb(247,98,35)" fg:x="20" fg:w="1"/><text x="4.6846%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (4 samples, 0.89%)</title><rect x="4.4346%" y="277" width="0.8869%" height="15" fill="rgb(247,138,52)" fg:x="20" fg:w="4"/><text x="4.6846%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (4 samples, 0.89%)</title><rect x="4.4346%" y="261" width="0.8869%" height="15" fill="rgb(213,79,30)" fg:x="20" fg:w="4"/><text x="4.6846%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (3 samples, 0.67%)</title><rect x="4.6563%" y="245" width="0.6652%" height="15" fill="rgb(246,177,23)" fg:x="21" fg:w="3"/><text x="4.9063%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (3 samples, 0.67%)</title><rect x="4.6563%" y="229" width="0.6652%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="3"/><text x="4.9063%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (3 samples, 0.67%)</title><rect x="4.6563%" y="213" width="0.6652%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="3"/><text x="4.9063%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.67%)</title><rect x="4.6563%" y="197" width="0.6652%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="3"/><text x="4.9063%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.22%)</title><rect x="5.3215%" y="277" width="0.2217%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="1"/><text x="5.5715%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.22%)</title><rect x="5.3215%" y="261" width="0.2217%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="1"/><text x="5.5715%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="5.3215%" y="245" width="0.2217%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="5.5715%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.22%)</title><rect x="5.3215%" y="229" width="0.2217%" height="15" fill="rgb(207,117,47)" fg:x="24" fg:w="1"/><text x="5.5715%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.22%)</title><rect x="5.3215%" y="213" width="0.2217%" height="15" fill="rgb(249,43,39)" fg:x="24" fg:w="1"/><text x="5.5715%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.22%)</title><rect x="5.5432%" y="261" width="0.2217%" height="15" fill="rgb(209,38,44)" fg:x="25" fg:w="1"/><text x="5.7932%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.22%)</title><rect x="5.5432%" y="245" width="0.2217%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="1"/><text x="5.7932%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="5.5432%" y="229" width="0.2217%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="1"/><text x="5.7932%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (3 samples, 0.67%)</title><rect x="5.5432%" y="277" width="0.6652%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="3"/><text x="5.7932%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.44%)</title><rect x="5.7650%" y="261" width="0.4435%" height="15" fill="rgb(253,215,40)" fg:x="26" fg:w="2"/><text x="6.0150%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.44%)</title><rect x="5.7650%" y="245" width="0.4435%" height="15" fill="rgb(211,81,21)" fg:x="26" fg:w="2"/><text x="6.0150%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.44%)</title><rect x="5.7650%" y="229" width="0.4435%" height="15" fill="rgb(208,190,38)" fg:x="26" fg:w="2"/><text x="6.0150%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="5.7650%" y="213" width="0.4435%" height="15" fill="rgb(235,213,38)" fg:x="26" fg:w="2"/><text x="6.0150%" y="223.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (55 samples, 12.20%)</title><rect x="6.2084%" y="277" width="12.1951%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="55"/><text x="6.4584%" y="287.50">std::sync::poison:..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (55 samples, 12.20%)</title><rect x="6.2084%" y="261" width="12.1951%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="55"/><text x="6.4584%" y="271.50">std::sys::sync::mu..</text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (54 samples, 11.97%)</title><rect x="6.4302%" y="245" width="11.9734%" height="15" fill="rgb(240,68,47)" fg:x="29" fg:w="54"/><text x="6.6802%" y="255.50">std::sys::pal::uni..</text></g><g><title>__pthread_main_thread_init (54 samples, 11.97%)</title><rect x="6.4302%" y="229" width="11.9734%" height="15" fill="rgb(210,16,53)" fg:x="29" fg:w="54"/><text x="6.6802%" y="239.50">__pthread_main_thr..</text></g><g><title>_pthread_rwlock_wrlock (54 samples, 11.97%)</title><rect x="6.4302%" y="213" width="11.9734%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="54"/><text x="6.6802%" y="223.50">_pthread_rwlock_wr..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="18.4035%" y="229" width="0.2217%" height="15" fill="rgb(224,169,11)" fg:x="83" fg:w="1"/><text x="18.6535%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.22%)</title><rect x="18.4035%" y="213" width="0.2217%" height="15" fill="rgb(250,166,2)" fg:x="83" fg:w="1"/><text x="18.6535%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.22%)</title><rect x="18.4035%" y="197" width="0.2217%" height="15" fill="rgb(242,216,29)" fg:x="83" fg:w="1"/><text x="18.6535%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.22%)</title><rect x="18.4035%" y="181" width="0.2217%" height="15" fill="rgb(230,116,27)" fg:x="83" fg:w="1"/><text x="18.6535%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.22%)</title><rect x="18.4035%" y="165" width="0.2217%" height="15" fill="rgb(228,99,48)" fg:x="83" fg:w="1"/><text x="18.6535%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.22%)</title><rect x="18.4035%" y="149" width="0.2217%" height="15" fill="rgb(253,11,6)" fg:x="83" fg:w="1"/><text x="18.6535%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="18.4035%" y="133" width="0.2217%" height="15" fill="rgb(247,143,39)" fg:x="83" fg:w="1"/><text x="18.6535%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.67%)</title><rect x="18.4035%" y="245" width="0.6652%" height="15" fill="rgb(236,97,10)" fg:x="83" fg:w="3"/><text x="18.6535%" y="255.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (2 samples, 0.44%)</title><rect x="18.6253%" y="229" width="0.4435%" height="15" fill="rgb(233,208,19)" fg:x="84" fg:w="2"/><text x="18.8753%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.44%)</title><rect x="18.6253%" y="213" width="0.4435%" height="15" fill="rgb(216,164,2)" fg:x="84" fg:w="2"/><text x="18.8753%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.44%)</title><rect x="18.6253%" y="197" width="0.4435%" height="15" fill="rgb(220,129,5)" fg:x="84" fg:w="2"/><text x="18.8753%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.44%)</title><rect x="18.6253%" y="181" width="0.4435%" height="15" fill="rgb(242,17,10)" fg:x="84" fg:w="2"/><text x="18.8753%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.44%)</title><rect x="18.6253%" y="165" width="0.4435%" height="15" fill="rgb(242,107,0)" fg:x="84" fg:w="2"/><text x="18.8753%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="18.6253%" y="149" width="0.4435%" height="15" fill="rgb(251,28,31)" fg:x="84" fg:w="2"/><text x="18.8753%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="18.6253%" y="133" width="0.4435%" height="15" fill="rgb(233,223,10)" fg:x="84" fg:w="2"/><text x="18.8753%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.44%)</title><rect x="18.6253%" y="117" width="0.4435%" height="15" fill="rgb(215,21,27)" fg:x="84" fg:w="2"/><text x="18.8753%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.44%)</title><rect x="18.6253%" y="101" width="0.4435%" height="15" fill="rgb(232,23,21)" fg:x="84" fg:w="2"/><text x="18.8753%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.44%)</title><rect x="18.6253%" y="85" width="0.4435%" height="15" fill="rgb(244,5,23)" fg:x="84" fg:w="2"/><text x="18.8753%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.44%)</title><rect x="18.6253%" y="69" width="0.4435%" height="15" fill="rgb(226,81,46)" fg:x="84" fg:w="2"/><text x="18.8753%" y="79.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.44%)</title><rect x="18.6253%" y="53" width="0.4435%" height="15" fill="rgb(247,70,30)" fg:x="84" fg:w="2"/><text x="18.8753%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="213" width="0.4435%" height="15" fill="rgb(212,68,19)" fg:x="86" fg:w="2"/><text x="19.3187%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="197" width="0.4435%" height="15" fill="rgb(240,187,13)" fg:x="86" fg:w="2"/><text x="19.3187%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="19.0687%" y="181" width="0.4435%" height="15" fill="rgb(223,113,26)" fg:x="86" fg:w="2"/><text x="19.3187%" y="191.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (2 samples, 0.44%)</title><rect x="19.0687%" y="165" width="0.4435%" height="15" fill="rgb(206,192,2)" fg:x="86" fg:w="2"/><text x="19.3187%" y="175.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (2 samples, 0.44%)</title><rect x="19.0687%" y="149" width="0.4435%" height="15" fill="rgb(241,108,4)" fg:x="86" fg:w="2"/><text x="19.3187%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="133" width="0.4435%" height="15" fill="rgb(247,173,49)" fg:x="86" fg:w="2"/><text x="19.3187%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="117" width="0.4435%" height="15" fill="rgb(224,114,35)" fg:x="86" fg:w="2"/><text x="19.3187%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="101" width="0.4435%" height="15" fill="rgb(245,159,27)" fg:x="86" fg:w="2"/><text x="19.3187%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (2 samples, 0.44%)</title><rect x="19.0687%" y="85" width="0.4435%" height="15" fill="rgb(245,172,44)" fg:x="86" fg:w="2"/><text x="19.3187%" y="95.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="19.0687%" y="69" width="0.4435%" height="15" fill="rgb(236,23,11)" fg:x="86" fg:w="2"/><text x="19.3187%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (3 samples, 0.67%)</title><rect x="19.0687%" y="245" width="0.6652%" height="15" fill="rgb(205,117,38)" fg:x="86" fg:w="3"/><text x="19.3187%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (3 samples, 0.67%)</title><rect x="19.0687%" y="229" width="0.6652%" height="15" fill="rgb(237,72,25)" fg:x="86" fg:w="3"/><text x="19.3187%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="213" width="0.2217%" height="15" fill="rgb(244,70,9)" fg:x="88" fg:w="1"/><text x="19.7622%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="197" width="0.2217%" height="15" fill="rgb(217,125,39)" fg:x="88" fg:w="1"/><text x="19.7622%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="181" width="0.2217%" height="15" fill="rgb(235,36,10)" fg:x="88" fg:w="1"/><text x="19.7622%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="19.5122%" y="165" width="0.2217%" height="15" fill="rgb(251,123,47)" fg:x="88" fg:w="1"/><text x="19.7622%" y="175.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (1 samples, 0.22%)</title><rect x="19.5122%" y="149" width="0.2217%" height="15" fill="rgb(221,13,13)" fg:x="88" fg:w="1"/><text x="19.7622%" y="159.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (1 samples, 0.22%)</title><rect x="19.5122%" y="133" width="0.2217%" height="15" fill="rgb(238,131,9)" fg:x="88" fg:w="1"/><text x="19.7622%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="117" width="0.2217%" height="15" fill="rgb(211,50,8)" fg:x="88" fg:w="1"/><text x="19.7622%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="101" width="0.2217%" height="15" fill="rgb(245,182,24)" fg:x="88" fg:w="1"/><text x="19.7622%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="85" width="0.2217%" height="15" fill="rgb(242,14,37)" fg:x="88" fg:w="1"/><text x="19.7622%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="69" width="0.2217%" height="15" fill="rgb(246,228,12)" fg:x="88" fg:w="1"/><text x="19.7622%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.22%)</title><rect x="19.5122%" y="53" width="0.2217%" height="15" fill="rgb(213,55,15)" fg:x="88" fg:w="1"/><text x="19.7622%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="19.5122%" y="37" width="0.2217%" height="15" fill="rgb(209,9,3)" fg:x="88" fg:w="1"/><text x="19.7622%" y="47.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (7 samples, 1.55%)</title><rect x="18.4035%" y="277" width="1.5521%" height="15" fill="rgb(230,59,30)" fg:x="83" fg:w="7"/><text x="18.6535%" y="287.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (7 samples, 1.55%)</title><rect x="18.4035%" y="261" width="1.5521%" height="15" fill="rgb(209,121,21)" fg:x="83" fg:w="7"/><text x="18.6535%" y="271.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (1 samples, 0.22%)</title><rect x="19.7339%" y="245" width="0.2217%" height="15" fill="rgb(220,109,13)" fg:x="89" fg:w="1"/><text x="19.9839%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.44%)</title><rect x="19.9557%" y="261" width="0.4435%" height="15" fill="rgb(232,18,1)" fg:x="90" fg:w="2"/><text x="20.2057%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.44%)</title><rect x="19.9557%" y="245" width="0.4435%" height="15" fill="rgb(215,41,42)" fg:x="90" fg:w="2"/><text x="20.2057%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.44%)</title><rect x="19.9557%" y="229" width="0.4435%" height="15" fill="rgb(224,123,36)" fg:x="90" fg:w="2"/><text x="20.2057%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.22%)</title><rect x="20.1774%" y="213" width="0.2217%" height="15" fill="rgb(240,125,3)" fg:x="91" fg:w="1"/><text x="20.4274%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.22%)</title><rect x="20.1774%" y="197" width="0.2217%" height="15" fill="rgb(205,98,50)" fg:x="91" fg:w="1"/><text x="20.4274%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="20.1774%" y="181" width="0.2217%" height="15" fill="rgb(205,185,37)" fg:x="91" fg:w="1"/><text x="20.4274%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.44%)</title><rect x="20.3991%" y="245" width="0.4435%" height="15" fill="rgb(238,207,15)" fg:x="92" fg:w="2"/><text x="20.6491%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.44%)</title><rect x="20.3991%" y="229" width="0.4435%" height="15" fill="rgb(213,199,42)" fg:x="92" fg:w="2"/><text x="20.6491%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2 samples, 0.44%)</title><rect x="20.3991%" y="213" width="0.4435%" height="15" fill="rgb(235,201,11)" fg:x="92" fg:w="2"/><text x="20.6491%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.44%)</title><rect x="20.3991%" y="197" width="0.4435%" height="15" fill="rgb(207,46,11)" fg:x="92" fg:w="2"/><text x="20.6491%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.44%)</title><rect x="20.3991%" y="181" width="0.4435%" height="15" fill="rgb(241,35,35)" fg:x="92" fg:w="2"/><text x="20.6491%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.44%)</title><rect x="20.3991%" y="165" width="0.4435%" height="15" fill="rgb(243,32,47)" fg:x="92" fg:w="2"/><text x="20.6491%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.44%)</title><rect x="20.8426%" y="149" width="0.4435%" height="15" fill="rgb(247,202,23)" fg:x="94" fg:w="2"/><text x="21.0926%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.67%)</title><rect x="20.8426%" y="229" width="0.6652%" height="15" fill="rgb(219,102,11)" fg:x="94" fg:w="3"/><text x="21.0926%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.67%)</title><rect x="20.8426%" y="213" width="0.6652%" height="15" fill="rgb(243,110,44)" fg:x="94" fg:w="3"/><text x="21.0926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3 samples, 0.67%)</title><rect x="20.8426%" y="197" width="0.6652%" height="15" fill="rgb(222,74,54)" fg:x="94" fg:w="3"/><text x="21.0926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.67%)</title><rect x="20.8426%" y="181" width="0.6652%" height="15" fill="rgb(216,99,12)" fg:x="94" fg:w="3"/><text x="21.0926%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.67%)</title><rect x="20.8426%" y="165" width="0.6652%" height="15" fill="rgb(226,22,26)" fg:x="94" fg:w="3"/><text x="21.0926%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="21.2860%" y="149" width="0.2217%" height="15" fill="rgb(217,163,10)" fg:x="96" fg:w="1"/><text x="21.5360%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (2 samples, 0.44%)</title><rect x="21.5078%" y="229" width="0.4435%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="2"/><text x="21.7578%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="21.5078%" y="213" width="0.4435%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="2"/><text x="21.7578%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (2 samples, 0.44%)</title><rect x="21.5078%" y="197" width="0.4435%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="2"/><text x="21.7578%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="21.5078%" y="181" width="0.4435%" height="15" fill="rgb(229,68,48)" fg:x="97" fg:w="2"/><text x="21.7578%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (2 samples, 0.44%)</title><rect x="21.5078%" y="165" width="0.4435%" height="15" fill="rgb(252,8,32)" fg:x="97" fg:w="2"/><text x="21.7578%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="21.5078%" y="149" width="0.4435%" height="15" fill="rgb(223,20,43)" fg:x="97" fg:w="2"/><text x="21.7578%" y="159.50"></text></g><g><title>torpedo::physics::Octree::query_box (13 samples, 2.88%)</title><rect x="19.9557%" y="277" width="2.8825%" height="15" fill="rgb(229,81,49)" fg:x="90" fg:w="13"/><text x="20.2057%" y="287.50">to..</text></g><g><title>torpedo::physics::Octree::query_box (11 samples, 2.44%)</title><rect x="20.3991%" y="261" width="2.4390%" height="15" fill="rgb(236,28,36)" fg:x="92" fg:w="11"/><text x="20.6491%" y="271.50">to..</text></g><g><title>torpedo::physics::Octree::query_box (9 samples, 2.00%)</title><rect x="20.8426%" y="245" width="1.9956%" height="15" fill="rgb(249,185,26)" fg:x="94" fg:w="9"/><text x="21.0926%" y="255.50">t..</text></g><g><title>torpedo::physics::Octree::query_box (4 samples, 0.89%)</title><rect x="21.9512%" y="229" width="0.8869%" height="15" fill="rgb(249,174,33)" fg:x="99" fg:w="4"/><text x="22.2012%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.67%)</title><rect x="22.1729%" y="213" width="0.6652%" height="15" fill="rgb(233,201,37)" fg:x="100" fg:w="3"/><text x="22.4229%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.67%)</title><rect x="22.1729%" y="197" width="0.6652%" height="15" fill="rgb(221,78,26)" fg:x="100" fg:w="3"/><text x="22.4229%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.67%)</title><rect x="22.1729%" y="181" width="0.6652%" height="15" fill="rgb(250,127,30)" fg:x="100" fg:w="3"/><text x="22.4229%" y="191.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.67%)</title><rect x="22.1729%" y="165" width="0.6652%" height="15" fill="rgb(230,49,44)" fg:x="100" fg:w="3"/><text x="22.4229%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.89%)</title><rect x="22.8381%" y="181" width="0.8869%" height="15" fill="rgb(229,67,23)" fg:x="103" fg:w="4"/><text x="23.0881%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.89%)</title><rect x="22.8381%" y="165" width="0.8869%" height="15" fill="rgb(249,83,47)" fg:x="103" fg:w="4"/><text x="23.0881%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.89%)</title><rect x="22.8381%" y="149" width="0.8869%" height="15" fill="rgb(215,43,3)" fg:x="103" fg:w="4"/><text x="23.0881%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4 samples, 0.89%)</title><rect x="22.8381%" y="133" width="0.8869%" height="15" fill="rgb(238,154,13)" fg:x="103" fg:w="4"/><text x="23.0881%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.89%)</title><rect x="22.8381%" y="117" width="0.8869%" height="15" fill="rgb(219,56,2)" fg:x="103" fg:w="4"/><text x="23.0881%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.89%)</title><rect x="22.8381%" y="101" width="0.8869%" height="15" fill="rgb(233,0,4)" fg:x="103" fg:w="4"/><text x="23.0881%" y="111.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.89%)</title><rect x="22.8381%" y="85" width="0.8869%" height="15" fill="rgb(235,30,7)" fg:x="103" fg:w="4"/><text x="23.0881%" y="95.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (51 samples, 11.31%)</title><rect x="22.8381%" y="261" width="11.3082%" height="15" fill="rgb(250,79,13)" fg:x="103" fg:w="51"/><text x="23.0881%" y="271.50">&lt;torpedo::level::..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (51 samples, 11.31%)</title><rect x="22.8381%" y="245" width="11.3082%" height="15" fill="rgb(211,146,34)" fg:x="103" fg:w="51"/><text x="23.0881%" y="255.50">&lt;alloc::boxed::Bo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51 samples, 11.31%)</title><rect x="22.8381%" y="229" width="11.3082%" height="15" fill="rgb(228,22,38)" fg:x="103" fg:w="51"/><text x="23.0881%" y="239.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (51 samples, 11.31%)</title><rect x="22.8381%" y="213" width="11.3082%" height="15" fill="rgb(235,168,5)" fg:x="103" fg:w="51"/><text x="23.0881%" y="223.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (51 samples, 11.31%)</title><rect x="22.8381%" y="197" width="11.3082%" height="15" fill="rgb(221,155,16)" fg:x="103" fg:w="51"/><text x="23.0881%" y="207.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (47 samples, 10.42%)</title><rect x="23.7251%" y="181" width="10.4213%" height="15" fill="rgb(215,215,53)" fg:x="107" fg:w="47"/><text x="23.9751%" y="191.50">core::ptr::cons..</text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 10.42%)</title><rect x="23.7251%" y="165" width="10.4213%" height="15" fill="rgb(223,4,10)" fg:x="107" fg:w="47"/><text x="23.9751%" y="175.50">core::intrinsic..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.22%)</title><rect x="34.1463%" y="245" width="0.2217%" height="15" fill="rgb(234,103,6)" fg:x="154" fg:w="1"/><text x="34.3963%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.22%)</title><rect x="34.1463%" y="229" width="0.2217%" height="15" fill="rgb(227,97,0)" fg:x="154" fg:w="1"/><text x="34.3963%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="34.1463%" y="213" width="0.2217%" height="15" fill="rgb(234,150,53)" fg:x="154" fg:w="1"/><text x="34.3963%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.22%)</title><rect x="34.1463%" y="197" width="0.2217%" height="15" fill="rgb(228,201,54)" fg:x="154" fg:w="1"/><text x="34.3963%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.22%)</title><rect x="34.1463%" y="181" width="0.2217%" height="15" fill="rgb(222,22,37)" fg:x="154" fg:w="1"/><text x="34.3963%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.22%)</title><rect x="34.1463%" y="165" width="0.2217%" height="15" fill="rgb(237,53,32)" fg:x="154" fg:w="1"/><text x="34.3963%" y="175.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (5 samples, 1.11%)</title><rect x="34.3681%" y="245" width="1.1086%" height="15" fill="rgb(233,25,53)" fg:x="155" fg:w="5"/><text x="34.6181%" y="255.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (5 samples, 1.11%)</title><rect x="34.3681%" y="229" width="1.1086%" height="15" fill="rgb(210,40,34)" fg:x="155" fg:w="5"/><text x="34.6181%" y="239.50"></text></g><g><title>torpedo::physics::check_collision_comps (61 samples, 13.53%)</title><rect x="22.8381%" y="277" width="13.5255%" height="15" fill="rgb(241,220,44)" fg:x="103" fg:w="61"/><text x="23.0881%" y="287.50">torpedo::physics::ch..</text></g><g><title>torpedo::physics::col::check_collision (10 samples, 2.22%)</title><rect x="34.1463%" y="261" width="2.2173%" height="15" fill="rgb(235,28,35)" fg:x="154" fg:w="10"/><text x="34.3963%" y="271.50">t..</text></g><g><title>torpedo::math::Vector4::to_matrix (4 samples, 0.89%)</title><rect x="35.4767%" y="245" width="0.8869%" height="15" fill="rgb(210,56,17)" fg:x="160" fg:w="4"/><text x="35.7267%" y="255.50"></text></g><g><title>__pthread_create (2 samples, 0.44%)</title><rect x="36.3636%" y="85" width="0.4435%" height="15" fill="rgb(224,130,29)" fg:x="164" fg:w="2"/><text x="36.6136%" y="95.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (181 samples, 40.13%)</title><rect x="1.3304%" y="469" width="40.1330%" height="15" fill="rgb(235,212,8)" fg:x="6" fg:w="181"/><text x="1.5804%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::cal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (181 samples, 40.13%)</title><rect x="1.3304%" y="453" width="40.1330%" height="15" fill="rgb(223,33,50)" fg:x="6" fg:w="181"/><text x="1.5804%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::cal..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (181 samples, 40.13%)</title><rect x="1.3304%" y="437" width="40.1330%" height="15" fill="rgb(219,149,13)" fg:x="6" fg:w="181"/><text x="1.5804%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (181 samples, 40.13%)</title><rect x="1.3304%" y="421" width="40.1330%" height="15" fill="rgb(250,156,29)" fg:x="6" fg:w="181"/><text x="1.5804%" y="431.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (181 samples, 40.13%)</title><rect x="1.3304%" y="405" width="40.1330%" height="15" fill="rgb(216,193,19)" fg:x="6" fg:w="181"/><text x="1.5804%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (181 samples, 40.13%)</title><rect x="1.3304%" y="389" width="40.1330%" height="15" fill="rgb(216,135,14)" fg:x="6" fg:w="181"/><text x="1.5804%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (181 samples, 40.13%)</title><rect x="1.3304%" y="373" width="40.1330%" height="15" fill="rgb(241,47,5)" fg:x="6" fg:w="181"/><text x="1.5804%" y="383.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (181 samples, 40.13%)</title><rect x="1.3304%" y="357" width="40.1330%" height="15" fill="rgb(233,42,35)" fg:x="6" fg:w="181"/><text x="1.5804%" y="367.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::funct..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (181 samples, 40.13%)</title><rect x="1.3304%" y="341" width="40.1330%" height="15" fill="rgb(231,13,6)" fg:x="6" fg:w="181"/><text x="1.5804%" y="351.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (181 samples, 40.13%)</title><rect x="1.3304%" y="325" width="40.1330%" height="15" fill="rgb(207,181,40)" fg:x="6" fg:w="181"/><text x="1.5804%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::level::level_loop::{{closure}} (181 samples, 40.13%)</title><rect x="1.3304%" y="309" width="40.1330%" height="15" fill="rgb(254,173,49)" fg:x="6" fg:w="181"/><text x="1.5804%" y="319.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (181 samples, 40.13%)</title><rect x="1.3304%" y="293" width="40.1330%" height="15" fill="rgb(221,1,38)" fg:x="6" fg:w="181"/><text x="1.5804%" y="303.50">torpedo::physics::update</text></g><g><title>torpedo::physics::make_octree (23 samples, 5.10%)</title><rect x="36.3636%" y="277" width="5.0998%" height="15" fill="rgb(206,124,46)" fg:x="164" fg:w="23"/><text x="36.6136%" y="287.50">torped..</text></g><g><title>std::thread::scoped::scope (23 samples, 5.10%)</title><rect x="36.3636%" y="261" width="5.0998%" height="15" fill="rgb(249,21,11)" fg:x="164" fg:w="23"/><text x="36.6136%" y="271.50">std::t..</text></g><g><title>std::panic::catch_unwind (23 samples, 5.10%)</title><rect x="36.3636%" y="245" width="5.0998%" height="15" fill="rgb(222,201,40)" fg:x="164" fg:w="23"/><text x="36.6136%" y="255.50">std::p..</text></g><g><title>std::panicking::try (23 samples, 5.10%)</title><rect x="36.3636%" y="229" width="5.0998%" height="15" fill="rgb(235,61,29)" fg:x="164" fg:w="23"/><text x="36.6136%" y="239.50">std::p..</text></g><g><title>std::panicking::try::do_call (23 samples, 5.10%)</title><rect x="36.3636%" y="213" width="5.0998%" height="15" fill="rgb(219,207,3)" fg:x="164" fg:w="23"/><text x="36.6136%" y="223.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 5.10%)</title><rect x="36.3636%" y="197" width="5.0998%" height="15" fill="rgb(222,56,46)" fg:x="164" fg:w="23"/><text x="36.6136%" y="207.50">&lt;core:..</text></g><g><title>std::thread::scoped::scope::{{closure}} (23 samples, 5.10%)</title><rect x="36.3636%" y="181" width="5.0998%" height="15" fill="rgb(239,76,54)" fg:x="164" fg:w="23"/><text x="36.6136%" y="191.50">std::t..</text></g><g><title>torpedo::physics::make_octree::{{closure}} (23 samples, 5.10%)</title><rect x="36.3636%" y="165" width="5.0998%" height="15" fill="rgb(231,124,27)" fg:x="164" fg:w="23"/><text x="36.6136%" y="175.50">torped..</text></g><g><title>std::thread::scoped::Scope::spawn (23 samples, 5.10%)</title><rect x="36.3636%" y="149" width="5.0998%" height="15" fill="rgb(249,195,6)" fg:x="164" fg:w="23"/><text x="36.6136%" y="159.50">std::t..</text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (23 samples, 5.10%)</title><rect x="36.3636%" y="133" width="5.0998%" height="15" fill="rgb(237,174,47)" fg:x="164" fg:w="23"/><text x="36.6136%" y="143.50">std::t..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (23 samples, 5.10%)</title><rect x="36.3636%" y="117" width="5.0998%" height="15" fill="rgb(206,201,31)" fg:x="164" fg:w="23"/><text x="36.6136%" y="127.50">std::t..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (23 samples, 5.10%)</title><rect x="36.3636%" y="101" width="5.0998%" height="15" fill="rgb(231,57,52)" fg:x="164" fg:w="23"/><text x="36.6136%" y="111.50">std::s..</text></g><g><title>_pthread_jit_write_with_callback_np (21 samples, 4.66%)</title><rect x="36.8071%" y="85" width="4.6563%" height="15" fill="rgb(248,177,22)" fg:x="166" fg:w="21"/><text x="37.0571%" y="95.50">_pthr..</text></g><g><title>6141865984 (243 samples, 53.88%)</title><rect x="1.3304%" y="517" width="53.8803%" height="15" fill="rgb(215,211,37)" fg:x="6" fg:w="243"/><text x="1.5804%" y="527.50">6141865984</text></g><g><title>__pthread_deallocate (243 samples, 53.88%)</title><rect x="1.3304%" y="501" width="53.8803%" height="15" fill="rgb(241,128,51)" fg:x="6" fg:w="243"/><text x="1.5804%" y="511.50">__pthread_deallocate</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (243 samples, 53.88%)</title><rect x="1.3304%" y="485" width="53.8803%" height="15" fill="rgb(227,165,31)" fg:x="6" fg:w="243"/><text x="1.5804%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (62 samples, 13.75%)</title><rect x="41.4634%" y="469" width="13.7472%" height="15" fill="rgb(228,167,24)" fg:x="187" fg:w="62"/><text x="41.7134%" y="479.50">core::ptr::drop_in_pl..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (62 samples, 13.75%)</title><rect x="41.4634%" y="453" width="13.7472%" height="15" fill="rgb(228,143,12)" fg:x="187" fg:w="62"/><text x="41.7134%" y="463.50">&lt;std::sys::pal::unix:..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (62 samples, 13.75%)</title><rect x="41.4634%" y="437" width="13.7472%" height="15" fill="rgb(249,149,8)" fg:x="187" fg:w="62"/><text x="41.7134%" y="447.50">std::sys::pal::unix::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.22%)</title><rect x="55.2106%" y="469" width="0.2217%" height="15" fill="rgb(243,35,44)" fg:x="249" fg:w="1"/><text x="55.4606%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.22%)</title><rect x="55.2106%" y="453" width="0.2217%" height="15" fill="rgb(246,89,9)" fg:x="249" fg:w="1"/><text x="55.4606%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.22%)</title><rect x="55.2106%" y="437" width="0.2217%" height="15" fill="rgb(233,213,13)" fg:x="249" fg:w="1"/><text x="55.4606%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.22%)</title><rect x="55.2106%" y="421" width="0.2217%" height="15" fill="rgb(233,141,41)" fg:x="249" fg:w="1"/><text x="55.4606%" y="431.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.22%)</title><rect x="55.2106%" y="405" width="0.2217%" height="15" fill="rgb(239,167,4)" fg:x="249" fg:w="1"/><text x="55.4606%" y="415.50"></text></g><g><title>std::panicking::try (1 samples, 0.22%)</title><rect x="55.2106%" y="389" width="0.2217%" height="15" fill="rgb(209,217,16)" fg:x="249" fg:w="1"/><text x="55.4606%" y="399.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.22%)</title><rect x="55.2106%" y="373" width="0.2217%" height="15" fill="rgb(219,88,35)" fg:x="249" fg:w="1"/><text x="55.4606%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.22%)</title><rect x="55.2106%" y="357" width="0.2217%" height="15" fill="rgb(220,193,23)" fg:x="249" fg:w="1"/><text x="55.4606%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.22%)</title><rect x="55.2106%" y="341" width="0.2217%" height="15" fill="rgb(230,90,52)" fg:x="249" fg:w="1"/><text x="55.4606%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.22%)</title><rect x="55.2106%" y="325" width="0.2217%" height="15" fill="rgb(252,106,19)" fg:x="249" fg:w="1"/><text x="55.4606%" y="335.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (1 samples, 0.22%)</title><rect x="55.2106%" y="309" width="0.2217%" height="15" fill="rgb(206,74,20)" fg:x="249" fg:w="1"/><text x="55.4606%" y="319.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.22%)</title><rect x="55.2106%" y="293" width="0.2217%" height="15" fill="rgb(230,138,44)" fg:x="249" fg:w="1"/><text x="55.4606%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.22%)</title><rect x="55.2106%" y="277" width="0.2217%" height="15" fill="rgb(235,182,43)" fg:x="249" fg:w="1"/><text x="55.4606%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.22%)</title><rect x="55.2106%" y="261" width="0.2217%" height="15" fill="rgb(242,16,51)" fg:x="249" fg:w="1"/><text x="55.4606%" y="271.50"></text></g><g><title>torpedo::arena::AVec&lt;T&gt;::push (1 samples, 0.22%)</title><rect x="55.2106%" y="245" width="0.2217%" height="15" fill="rgb(248,9,4)" fg:x="249" fg:w="1"/><text x="55.4606%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_space (1 samples, 0.22%)</title><rect x="55.2106%" y="229" width="0.2217%" height="15" fill="rgb(210,31,22)" fg:x="249" fg:w="1"/><text x="55.4606%" y="239.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.22%)</title><rect x="55.2106%" y="213" width="0.2217%" height="15" fill="rgb(239,54,39)" fg:x="249" fg:w="1"/><text x="55.4606%" y="223.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.22%)</title><rect x="55.2106%" y="197" width="0.2217%" height="15" fill="rgb(230,99,41)" fg:x="249" fg:w="1"/><text x="55.4606%" y="207.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.22%)</title><rect x="55.2106%" y="181" width="0.2217%" height="15" fill="rgb(253,106,12)" fg:x="249" fg:w="1"/><text x="55.4606%" y="191.50"></text></g><g><title>6144012288 (3 samples, 0.67%)</title><rect x="55.2106%" y="517" width="0.6652%" height="15" fill="rgb(213,46,41)" fg:x="249" fg:w="3"/><text x="55.4606%" y="527.50"></text></g><g><title>__pthread_deallocate (3 samples, 0.67%)</title><rect x="55.2106%" y="501" width="0.6652%" height="15" fill="rgb(215,133,35)" fg:x="249" fg:w="3"/><text x="55.4606%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.67%)</title><rect x="55.2106%" y="485" width="0.6652%" height="15" fill="rgb(213,28,5)" fg:x="249" fg:w="3"/><text x="55.4606%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (2 samples, 0.44%)</title><rect x="55.4324%" y="469" width="0.4435%" height="15" fill="rgb(215,77,49)" fg:x="250" fg:w="2"/><text x="55.6824%" y="479.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (2 samples, 0.44%)</title><rect x="55.4324%" y="453" width="0.4435%" height="15" fill="rgb(248,100,22)" fg:x="250" fg:w="2"/><text x="55.6824%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (2 samples, 0.44%)</title><rect x="55.4324%" y="437" width="0.4435%" height="15" fill="rgb(208,67,9)" fg:x="250" fg:w="2"/><text x="55.6824%" y="447.50"></text></g><g><title>6146158592 (1 samples, 0.22%)</title><rect x="55.8758%" y="517" width="0.2217%" height="15" fill="rgb(219,133,21)" fg:x="252" fg:w="1"/><text x="56.1258%" y="527.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.22%)</title><rect x="55.8758%" y="501" width="0.2217%" height="15" fill="rgb(246,46,29)" fg:x="252" fg:w="1"/><text x="56.1258%" y="511.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.22%)</title><rect x="56.3193%" y="213" width="0.2217%" height="15" fill="rgb(246,185,52)" fg:x="254" fg:w="1"/><text x="56.5693%" y="223.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.22%)</title><rect x="56.3193%" y="197" width="0.2217%" height="15" fill="rgb(252,136,11)" fg:x="254" fg:w="1"/><text x="56.5693%" y="207.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.22%)</title><rect x="56.3193%" y="181" width="0.2217%" height="15" fill="rgb(219,138,53)" fg:x="254" fg:w="1"/><text x="56.5693%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.3193%" y="469" width="0.4435%" height="15" fill="rgb(211,51,23)" fg:x="254" fg:w="2"/><text x="56.5693%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.3193%" y="453" width="0.4435%" height="15" fill="rgb(247,221,28)" fg:x="254" fg:w="2"/><text x="56.5693%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.44%)</title><rect x="56.3193%" y="437" width="0.4435%" height="15" fill="rgb(251,222,45)" fg:x="254" fg:w="2"/><text x="56.5693%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.44%)</title><rect x="56.3193%" y="421" width="0.4435%" height="15" fill="rgb(217,162,53)" fg:x="254" fg:w="2"/><text x="56.5693%" y="431.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.44%)</title><rect x="56.3193%" y="405" width="0.4435%" height="15" fill="rgb(229,93,14)" fg:x="254" fg:w="2"/><text x="56.5693%" y="415.50"></text></g><g><title>std::panicking::try (2 samples, 0.44%)</title><rect x="56.3193%" y="389" width="0.4435%" height="15" fill="rgb(209,67,49)" fg:x="254" fg:w="2"/><text x="56.5693%" y="399.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.44%)</title><rect x="56.3193%" y="373" width="0.4435%" height="15" fill="rgb(213,87,29)" fg:x="254" fg:w="2"/><text x="56.5693%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.3193%" y="357" width="0.4435%" height="15" fill="rgb(205,151,52)" fg:x="254" fg:w="2"/><text x="56.5693%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.44%)</title><rect x="56.3193%" y="341" width="0.4435%" height="15" fill="rgb(253,215,39)" fg:x="254" fg:w="2"/><text x="56.5693%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.44%)</title><rect x="56.3193%" y="325" width="0.4435%" height="15" fill="rgb(221,220,41)" fg:x="254" fg:w="2"/><text x="56.5693%" y="335.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (2 samples, 0.44%)</title><rect x="56.3193%" y="309" width="0.4435%" height="15" fill="rgb(218,133,21)" fg:x="254" fg:w="2"/><text x="56.5693%" y="319.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.44%)</title><rect x="56.3193%" y="293" width="0.4435%" height="15" fill="rgb(221,193,43)" fg:x="254" fg:w="2"/><text x="56.5693%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.44%)</title><rect x="56.3193%" y="277" width="0.4435%" height="15" fill="rgb(240,128,52)" fg:x="254" fg:w="2"/><text x="56.5693%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.44%)</title><rect x="56.3193%" y="261" width="0.4435%" height="15" fill="rgb(253,114,12)" fg:x="254" fg:w="2"/><text x="56.5693%" y="271.50"></text></g><g><title>torpedo::arena::AVec&lt;T&gt;::push (2 samples, 0.44%)</title><rect x="56.3193%" y="245" width="0.4435%" height="15" fill="rgb(215,223,47)" fg:x="254" fg:w="2"/><text x="56.5693%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_space (2 samples, 0.44%)</title><rect x="56.3193%" y="229" width="0.4435%" height="15" fill="rgb(248,225,23)" fg:x="254" fg:w="2"/><text x="56.5693%" y="239.50"></text></g><g><title>torpedo::arena::Arena::unlock (1 samples, 0.22%)</title><rect x="56.5410%" y="213" width="0.2217%" height="15" fill="rgb(250,108,0)" fg:x="255" fg:w="1"/><text x="56.7910%" y="223.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.22%)</title><rect x="56.5410%" y="197" width="0.2217%" height="15" fill="rgb(228,208,7)" fg:x="255" fg:w="1"/><text x="56.7910%" y="207.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.22%)</title><rect x="56.5410%" y="181" width="0.2217%" height="15" fill="rgb(244,45,10)" fg:x="255" fg:w="1"/><text x="56.7910%" y="191.50"></text></g><g><title>6148304896 (4 samples, 0.89%)</title><rect x="56.0976%" y="517" width="0.8869%" height="15" fill="rgb(207,125,25)" fg:x="253" fg:w="4"/><text x="56.3476%" y="527.50"></text></g><g><title>__pthread_deallocate (3 samples, 0.67%)</title><rect x="56.3193%" y="501" width="0.6652%" height="15" fill="rgb(210,195,18)" fg:x="254" fg:w="3"/><text x="56.5693%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.67%)</title><rect x="56.3193%" y="485" width="0.6652%" height="15" fill="rgb(249,80,12)" fg:x="254" fg:w="3"/><text x="56.5693%" y="495.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.22%)</title><rect x="56.7627%" y="469" width="0.2217%" height="15" fill="rgb(221,65,9)" fg:x="256" fg:w="1"/><text x="57.0127%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.22%)</title><rect x="56.7627%" y="453" width="0.2217%" height="15" fill="rgb(235,49,36)" fg:x="256" fg:w="1"/><text x="57.0127%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.22%)</title><rect x="56.7627%" y="437" width="0.2217%" height="15" fill="rgb(225,32,20)" fg:x="256" fg:w="1"/><text x="57.0127%" y="447.50"></text></g><g><title>_task_info (1 samples, 0.22%)</title><rect x="56.7627%" y="421" width="0.2217%" height="15" fill="rgb(215,141,46)" fg:x="256" fg:w="1"/><text x="57.0127%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt; (1 samples, 0.22%)</title><rect x="56.9845%" y="277" width="0.2217%" height="15" fill="rgb(250,160,47)" fg:x="257" fg:w="1"/><text x="57.2345%" y="287.50"></text></g><g><title> 8]&gt; (1 samples, 0.22%)</title><rect x="56.9845%" y="261" width="0.2217%" height="15" fill="rgb(216,222,40)" fg:x="257" fg:w="1"/><text x="57.2345%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.22%)</title><rect x="56.9845%" y="245" width="0.2217%" height="15" fill="rgb(234,217,39)" fg:x="257" fg:w="1"/><text x="57.2345%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.22%)</title><rect x="56.9845%" y="229" width="0.2217%" height="15" fill="rgb(207,178,40)" fg:x="257" fg:w="1"/><text x="57.2345%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="56.9845%" y="213" width="0.2217%" height="15" fill="rgb(221,136,13)" fg:x="257" fg:w="1"/><text x="57.2345%" y="223.50"></text></g><g><title>__platform_memchr (1 samples, 0.22%)</title><rect x="56.9845%" y="197" width="0.2217%" height="15" fill="rgb(249,199,10)" fg:x="257" fg:w="1"/><text x="57.2345%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.9845%" y="469" width="0.4435%" height="15" fill="rgb(249,222,13)" fg:x="257" fg:w="2"/><text x="57.2345%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.9845%" y="453" width="0.4435%" height="15" fill="rgb(244,185,38)" fg:x="257" fg:w="2"/><text x="57.2345%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.44%)</title><rect x="56.9845%" y="437" width="0.4435%" height="15" fill="rgb(236,202,9)" fg:x="257" fg:w="2"/><text x="57.2345%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.44%)</title><rect x="56.9845%" y="421" width="0.4435%" height="15" fill="rgb(250,229,37)" fg:x="257" fg:w="2"/><text x="57.2345%" y="431.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.44%)</title><rect x="56.9845%" y="405" width="0.4435%" height="15" fill="rgb(206,174,23)" fg:x="257" fg:w="2"/><text x="57.2345%" y="415.50"></text></g><g><title>std::panicking::try (2 samples, 0.44%)</title><rect x="56.9845%" y="389" width="0.4435%" height="15" fill="rgb(211,33,43)" fg:x="257" fg:w="2"/><text x="57.2345%" y="399.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.44%)</title><rect x="56.9845%" y="373" width="0.4435%" height="15" fill="rgb(245,58,50)" fg:x="257" fg:w="2"/><text x="57.2345%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.44%)</title><rect x="56.9845%" y="357" width="0.4435%" height="15" fill="rgb(244,68,36)" fg:x="257" fg:w="2"/><text x="57.2345%" y="367.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.44%)</title><rect x="56.9845%" y="341" width="0.4435%" height="15" fill="rgb(232,229,15)" fg:x="257" fg:w="2"/><text x="57.2345%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 0.44%)</title><rect x="56.9845%" y="325" width="0.4435%" height="15" fill="rgb(254,30,23)" fg:x="257" fg:w="2"/><text x="57.2345%" y="335.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (2 samples, 0.44%)</title><rect x="56.9845%" y="309" width="0.4435%" height="15" fill="rgb(235,160,14)" fg:x="257" fg:w="2"/><text x="57.2345%" y="319.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.44%)</title><rect x="56.9845%" y="293" width="0.4435%" height="15" fill="rgb(212,155,44)" fg:x="257" fg:w="2"/><text x="57.2345%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.22%)</title><rect x="57.2062%" y="277" width="0.2217%" height="15" fill="rgb(226,2,50)" fg:x="258" fg:w="1"/><text x="57.4562%" y="287.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.22%)</title><rect x="57.2062%" y="261" width="0.2217%" height="15" fill="rgb(234,177,6)" fg:x="258" fg:w="1"/><text x="57.4562%" y="271.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (1 samples, 0.22%)</title><rect x="57.2062%" y="245" width="0.2217%" height="15" fill="rgb(217,24,9)" fg:x="258" fg:w="1"/><text x="57.4562%" y="255.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.22%)</title><rect x="57.2062%" y="229" width="0.2217%" height="15" fill="rgb(220,13,46)" fg:x="258" fg:w="1"/><text x="57.4562%" y="239.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.22%)</title><rect x="57.2062%" y="213" width="0.2217%" height="15" fill="rgb(239,221,27)" fg:x="258" fg:w="1"/><text x="57.4562%" y="223.50"></text></g><g><title>6150451200 (4 samples, 0.89%)</title><rect x="56.9845%" y="517" width="0.8869%" height="15" fill="rgb(222,198,25)" fg:x="257" fg:w="4"/><text x="57.2345%" y="527.50"></text></g><g><title>__pthread_deallocate (4 samples, 0.89%)</title><rect x="56.9845%" y="501" width="0.8869%" height="15" fill="rgb(211,99,13)" fg:x="257" fg:w="4"/><text x="57.2345%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 0.89%)</title><rect x="56.9845%" y="485" width="0.8869%" height="15" fill="rgb(232,111,31)" fg:x="257" fg:w="4"/><text x="57.2345%" y="495.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (2 samples, 0.44%)</title><rect x="57.4279%" y="469" width="0.4435%" height="15" fill="rgb(245,82,37)" fg:x="259" fg:w="2"/><text x="57.6779%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.44%)</title><rect x="57.4279%" y="453" width="0.4435%" height="15" fill="rgb(227,149,46)" fg:x="259" fg:w="2"/><text x="57.6779%" y="463.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.22%)</title><rect x="63.6364%" y="501" width="0.2217%" height="15" fill="rgb(218,36,50)" fg:x="287" fg:w="1"/><text x="63.8864%" y="511.50"></text></g><g><title>_mach_reply_port (2 samples, 0.44%)</title><rect x="63.8581%" y="501" width="0.4435%" height="15" fill="rgb(226,80,48)" fg:x="288" fg:w="2"/><text x="64.1081%" y="511.50"></text></g><g><title>_thread_get_state (2 samples, 0.44%)</title><rect x="63.8581%" y="485" width="0.4435%" height="15" fill="rgb(238,224,15)" fg:x="288" fg:w="2"/><text x="64.1081%" y="495.50"></text></g><g><title>_proc_udata_info (2 samples, 0.44%)</title><rect x="63.8581%" y="469" width="0.4435%" height="15" fill="rgb(241,136,10)" fg:x="288" fg:w="2"/><text x="64.1081%" y="479.50"></text></g><g><title>_mach_reply_port (1 samples, 0.22%)</title><rect x="65.4102%" y="165" width="0.2217%" height="15" fill="rgb(208,32,45)" fg:x="295" fg:w="1"/><text x="65.6602%" y="175.50"></text></g><g><title>_thread_get_state (1 samples, 0.22%)</title><rect x="65.4102%" y="149" width="0.2217%" height="15" fill="rgb(207,135,9)" fg:x="295" fg:w="1"/><text x="65.6602%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.22%)</title><rect x="65.4102%" y="133" width="0.2217%" height="15" fill="rgb(206,86,44)" fg:x="295" fg:w="1"/><text x="65.6602%" y="143.50"></text></g><g><title>Unknown (8 samples, 1.77%)</title><rect x="64.3016%" y="181" width="1.7738%" height="15" fill="rgb(245,177,15)" fg:x="290" fg:w="8"/><text x="64.5516%" y="191.50">U..</text></g><g><title>_proc_udata_info (2 samples, 0.44%)</title><rect x="65.6319%" y="165" width="0.4435%" height="15" fill="rgb(206,64,50)" fg:x="296" fg:w="2"/><text x="65.8819%" y="175.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.22%)</title><rect x="66.0754%" y="181" width="0.2217%" height="15" fill="rgb(234,36,40)" fg:x="298" fg:w="1"/><text x="66.3254%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 2.22%)</title><rect x="64.3016%" y="261" width="2.2173%" height="15" fill="rgb(213,64,8)" fg:x="290" fg:w="10"/><text x="64.5516%" y="271.50">c..</text></g><g><title>Unknown (10 samples, 2.22%)</title><rect x="64.3016%" y="245" width="2.2173%" height="15" fill="rgb(210,75,36)" fg:x="290" fg:w="10"/><text x="64.5516%" y="255.50">U..</text></g><g><title>Unknown (10 samples, 2.22%)</title><rect x="64.3016%" y="229" width="2.2173%" height="15" fill="rgb(229,88,21)" fg:x="290" fg:w="10"/><text x="64.5516%" y="239.50">U..</text></g><g><title>Unknown (10 samples, 2.22%)</title><rect x="64.3016%" y="213" width="2.2173%" height="15" fill="rgb(252,204,47)" fg:x="290" fg:w="10"/><text x="64.5516%" y="223.50">U..</text></g><g><title>Unknown (10 samples, 2.22%)</title><rect x="64.3016%" y="197" width="2.2173%" height="15" fill="rgb(208,77,27)" fg:x="290" fg:w="10"/><text x="64.5516%" y="207.50">U..</text></g><g><title>_mach_reply_port (1 samples, 0.22%)</title><rect x="66.2971%" y="181" width="0.2217%" height="15" fill="rgb(221,76,26)" fg:x="299" fg:w="1"/><text x="66.5471%" y="191.50"></text></g><g><title>_thread_get_state (1 samples, 0.22%)</title><rect x="66.2971%" y="165" width="0.2217%" height="15" fill="rgb(225,139,18)" fg:x="299" fg:w="1"/><text x="66.5471%" y="175.50"></text></g><g><title>_proc_udata_info (1 samples, 0.22%)</title><rect x="66.2971%" y="149" width="0.2217%" height="15" fill="rgb(230,137,11)" fg:x="299" fg:w="1"/><text x="66.5471%" y="159.50"></text></g><g><title>___commpage_gettimeofday_internal (1 samples, 0.22%)</title><rect x="71.8404%" y="133" width="0.2217%" height="15" fill="rgb(212,28,1)" fg:x="324" fg:w="1"/><text x="72.0904%" y="143.50"></text></g><g><title>__kernelrpc_vm_map (2 samples, 0.44%)</title><rect x="72.0621%" y="133" width="0.4435%" height="15" fill="rgb(248,164,17)" fg:x="325" fg:w="2"/><text x="72.3121%" y="143.50"></text></g><g><title>Unknown (11 samples, 2.44%)</title><rect x="70.2882%" y="149" width="2.4390%" height="15" fill="rgb(222,171,42)" fg:x="317" fg:w="11"/><text x="70.5382%" y="159.50">Un..</text></g><g><title>_posix_spawnattr_set_importancewatch_port_np (1 samples, 0.22%)</title><rect x="72.5055%" y="133" width="0.2217%" height="15" fill="rgb(243,84,45)" fg:x="327" fg:w="1"/><text x="72.7555%" y="143.50"></text></g><g><title>_mach_reply_port (1 samples, 0.22%)</title><rect x="72.7273%" y="149" width="0.2217%" height="15" fill="rgb(252,49,23)" fg:x="328" fg:w="1"/><text x="72.9773%" y="159.50"></text></g><g><title>_thread_get_state (1 samples, 0.22%)</title><rect x="72.7273%" y="133" width="0.2217%" height="15" fill="rgb(215,19,7)" fg:x="328" fg:w="1"/><text x="72.9773%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.22%)</title><rect x="72.7273%" y="117" width="0.2217%" height="15" fill="rgb(238,81,41)" fg:x="328" fg:w="1"/><text x="72.9773%" y="127.50"></text></g><g><title>_proc_udata_info (4 samples, 0.89%)</title><rect x="72.9490%" y="149" width="0.8869%" height="15" fill="rgb(210,199,37)" fg:x="329" fg:w="4"/><text x="73.1990%" y="159.50"></text></g><g><title>Unknown (26 samples, 5.76%)</title><rect x="68.2927%" y="165" width="5.7650%" height="15" fill="rgb(244,192,49)" fg:x="308" fg:w="26"/><text x="68.5427%" y="175.50">Unknown</text></g><g><title>_task_info (1 samples, 0.22%)</title><rect x="73.8359%" y="149" width="0.2217%" height="15" fill="rgb(226,211,11)" fg:x="333" fg:w="1"/><text x="74.0859%" y="159.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.22%)</title><rect x="74.0576%" y="165" width="0.2217%" height="15" fill="rgb(236,162,54)" fg:x="334" fg:w="1"/><text x="74.3076%" y="175.50"></text></g><g><title>raylib::core::RaylibBuilder::build (36 samples, 7.98%)</title><rect x="66.5188%" y="261" width="7.9823%" height="15" fill="rgb(220,229,9)" fg:x="300" fg:w="36"/><text x="66.7688%" y="271.50">raylib::cor..</text></g><g><title>raylib::core::init_window (36 samples, 7.98%)</title><rect x="66.5188%" y="245" width="7.9823%" height="15" fill="rgb(250,87,22)" fg:x="300" fg:w="36"/><text x="66.7688%" y="255.50">raylib::cor..</text></g><g><title>Unknown (36 samples, 7.98%)</title><rect x="66.5188%" y="229" width="7.9823%" height="15" fill="rgb(239,43,17)" fg:x="300" fg:w="36"/><text x="66.7688%" y="239.50">Unknown</text></g><g><title>Unknown (36 samples, 7.98%)</title><rect x="66.5188%" y="213" width="7.9823%" height="15" fill="rgb(231,177,25)" fg:x="300" fg:w="36"/><text x="66.7688%" y="223.50">Unknown</text></g><g><title>Unknown (36 samples, 7.98%)</title><rect x="66.5188%" y="197" width="7.9823%" height="15" fill="rgb(219,179,1)" fg:x="300" fg:w="36"/><text x="66.7688%" y="207.50">Unknown</text></g><g><title>Unknown (35 samples, 7.76%)</title><rect x="66.7406%" y="181" width="7.7605%" height="15" fill="rgb(238,219,53)" fg:x="301" fg:w="35"/><text x="66.9906%" y="191.50">Unknown</text></g><g><title>_mach_reply_port (1 samples, 0.22%)</title><rect x="74.2794%" y="165" width="0.2217%" height="15" fill="rgb(232,167,36)" fg:x="335" fg:w="1"/><text x="74.5294%" y="175.50"></text></g><g><title>_thread_get_state (1 samples, 0.22%)</title><rect x="74.2794%" y="149" width="0.2217%" height="15" fill="rgb(244,19,51)" fg:x="335" fg:w="1"/><text x="74.5294%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.22%)</title><rect x="74.2794%" y="133" width="0.2217%" height="15" fill="rgb(224,6,22)" fg:x="335" fg:w="1"/><text x="74.5294%" y="143.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_cylinder (1 samples, 0.22%)</title><rect x="74.5011%" y="197" width="0.2217%" height="15" fill="rgb(224,145,5)" fg:x="336" fg:w="1"/><text x="74.7511%" y="207.50"></text></g><g><title>Unknown (1 samples, 0.22%)</title><rect x="74.5011%" y="181" width="0.2217%" height="15" fill="rgb(234,130,49)" fg:x="336" fg:w="1"/><text x="74.7511%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.22%)</title><rect x="74.5011%" y="165" width="0.2217%" height="15" fill="rgb(254,6,2)" fg:x="336" fg:w="1"/><text x="74.7511%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.22%)</title><rect x="74.5011%" y="149" width="0.2217%" height="15" fill="rgb(208,96,46)" fg:x="336" fg:w="1"/><text x="74.7511%" y="159.50"></text></g><g><title>_mach_get_times (1 samples, 0.22%)</title><rect x="74.5011%" y="133" width="0.2217%" height="15" fill="rgb(239,3,39)" fg:x="336" fg:w="1"/><text x="74.7511%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 0.44%)</title><rect x="74.5011%" y="245" width="0.4435%" height="15" fill="rgb(233,210,1)" fg:x="336" fg:w="2"/><text x="74.7511%" y="255.50"></text></g><g><title>torpedo::make_test_level (2 samples, 0.44%)</title><rect x="74.5011%" y="229" width="0.4435%" height="15" fill="rgb(244,137,37)" fg:x="336" fg:w="2"/><text x="74.7511%" y="239.50"></text></g><g><title>torpedo::level::default_setup (2 samples, 0.44%)</title><rect x="74.5011%" y="213" width="0.4435%" height="15" fill="rgb(240,136,2)" fg:x="336" fg:w="2"/><text x="74.7511%" y="223.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.22%)</title><rect x="74.7228%" y="197" width="0.2217%" height="15" fill="rgb(239,18,37)" fg:x="337" fg:w="1"/><text x="74.9728%" y="207.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.22%)</title><rect x="74.7228%" y="181" width="0.2217%" height="15" fill="rgb(218,185,22)" fg:x="337" fg:w="1"/><text x="74.9728%" y="191.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.22%)</title><rect x="74.7228%" y="165" width="0.2217%" height="15" fill="rgb(225,218,4)" fg:x="337" fg:w="1"/><text x="74.9728%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.22%)</title><rect x="74.7228%" y="149" width="0.2217%" height="15" fill="rgb(230,182,32)" fg:x="337" fg:w="1"/><text x="74.9728%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.22%)</title><rect x="74.7228%" y="133" width="0.2217%" height="15" fill="rgb(242,56,43)" fg:x="337" fg:w="1"/><text x="74.9728%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.22%)</title><rect x="74.9446%" y="245" width="0.2217%" height="15" fill="rgb(233,99,24)" fg:x="338" fg:w="1"/><text x="75.1946%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.22%)</title><rect x="74.9446%" y="229" width="0.2217%" height="15" fill="rgb(234,209,42)" fg:x="338" fg:w="1"/><text x="75.1946%" y="239.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.22%)</title><rect x="80.7095%" y="165" width="0.2217%" height="15" fill="rgb(227,7,12)" fg:x="364" fg:w="1"/><text x="80.9595%" y="175.50"></text></g><g><title>_host_get_special_port (1 samples, 0.22%)</title><rect x="80.9313%" y="165" width="0.2217%" height="15" fill="rgb(245,203,43)" fg:x="365" fg:w="1"/><text x="81.1813%" y="175.50"></text></g><g><title>_mach_get_times (4 samples, 0.89%)</title><rect x="81.1530%" y="165" width="0.8869%" height="15" fill="rgb(238,205,33)" fg:x="366" fg:w="4"/><text x="81.4030%" y="175.50"></text></g><g><title>_mach_get_times (2 samples, 0.44%)</title><rect x="81.5965%" y="149" width="0.4435%" height="15" fill="rgb(231,56,7)" fg:x="368" fg:w="2"/><text x="81.8465%" y="159.50"></text></g><g><title>_mach_reply_port (5 samples, 1.11%)</title><rect x="82.0399%" y="165" width="1.1086%" height="15" fill="rgb(244,186,29)" fg:x="370" fg:w="5"/><text x="82.2899%" y="175.50"></text></g><g><title>_thread_get_state (5 samples, 1.11%)</title><rect x="82.0399%" y="149" width="1.1086%" height="15" fill="rgb(234,111,31)" fg:x="370" fg:w="5"/><text x="82.2899%" y="159.50"></text></g><g><title>_proc_udata_info (5 samples, 1.11%)</title><rect x="82.0399%" y="133" width="1.1086%" height="15" fill="rgb(241,149,10)" fg:x="370" fg:w="5"/><text x="82.2899%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (42 samples, 9.31%)</title><rect x="75.1663%" y="245" width="9.3126%" height="15" fill="rgb(249,206,44)" fg:x="339" fg:w="42"/><text x="75.4163%" y="255.50">core::ptr::dr..</text></g><g><title>Unknown (42 samples, 9.31%)</title><rect x="75.1663%" y="229" width="9.3126%" height="15" fill="rgb(251,153,30)" fg:x="339" fg:w="42"/><text x="75.4163%" y="239.50">Unknown</text></g><g><title>Unknown (42 samples, 9.31%)</title><rect x="75.1663%" y="213" width="9.3126%" height="15" fill="rgb(239,152,38)" fg:x="339" fg:w="42"/><text x="75.4163%" y="223.50">Unknown</text></g><g><title>Unknown (42 samples, 9.31%)</title><rect x="75.1663%" y="197" width="9.3126%" height="15" fill="rgb(249,139,47)" fg:x="339" fg:w="42"/><text x="75.4163%" y="207.50">Unknown</text></g><g><title>Unknown (42 samples, 9.31%)</title><rect x="75.1663%" y="181" width="9.3126%" height="15" fill="rgb(244,64,35)" fg:x="339" fg:w="42"/><text x="75.4163%" y="191.50">Unknown</text></g><g><title>_proc_udata_info (6 samples, 1.33%)</title><rect x="83.1486%" y="165" width="1.3304%" height="15" fill="rgb(216,46,15)" fg:x="375" fg:w="6"/><text x="83.3986%" y="175.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (1 samples, 0.22%)</title><rect x="84.4789%" y="245" width="0.2217%" height="15" fill="rgb(250,74,19)" fg:x="381" fg:w="1"/><text x="84.7289%" y="255.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.22%)</title><rect x="84.4789%" y="229" width="0.2217%" height="15" fill="rgb(249,42,33)" fg:x="381" fg:w="1"/><text x="84.7289%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (1 samples, 0.22%)</title><rect x="84.4789%" y="213" width="0.2217%" height="15" fill="rgb(242,149,17)" fg:x="381" fg:w="1"/><text x="84.7289%" y="223.50"></text></g><g><title>__pthread_join (1 samples, 0.22%)</title><rect x="84.4789%" y="197" width="0.2217%" height="15" fill="rgb(244,29,21)" fg:x="381" fg:w="1"/><text x="84.7289%" y="207.50"></text></g><g><title>__pthread_mutex_global_init (30 samples, 6.65%)</title><rect x="84.7007%" y="229" width="6.6519%" height="15" fill="rgb(220,130,37)" fg:x="382" fg:w="30"/><text x="84.9507%" y="239.50">__pthread..</text></g><g><title>_pthread_set_qos_class_self_np (30 samples, 6.65%)</title><rect x="84.7007%" y="213" width="6.6519%" height="15" fill="rgb(211,67,2)" fg:x="382" fg:w="30"/><text x="84.9507%" y="223.50">_pthread_..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (30 samples, 6.65%)</title><rect x="91.3525%" y="229" width="6.6519%" height="15" fill="rgb(235,68,52)" fg:x="412" fg:w="30"/><text x="91.6025%" y="239.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (30 samples, 6.65%)</title><rect x="91.3525%" y="213" width="6.6519%" height="15" fill="rgb(246,142,3)" fg:x="412" fg:w="30"/><text x="91.6025%" y="223.50">core::ptr..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 6.65%)</title><rect x="91.3525%" y="197" width="6.6519%" height="15" fill="rgb(241,25,7)" fg:x="412" fg:w="30"/><text x="91.6025%" y="207.50">&lt;std::syn..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (30 samples, 6.65%)</title><rect x="91.3525%" y="181" width="6.6519%" height="15" fill="rgb(242,119,39)" fg:x="412" fg:w="30"/><text x="91.6025%" y="191.50">std::sys:..</text></g><g><title>__pthread_mutex_global_init (30 samples, 6.65%)</title><rect x="91.3525%" y="165" width="6.6519%" height="15" fill="rgb(241,98,45)" fg:x="412" fg:w="30"/><text x="91.6025%" y="175.50">__pthread..</text></g><g><title>_pthread_set_qos_class_self_np (30 samples, 6.65%)</title><rect x="91.3525%" y="149" width="6.6519%" height="15" fill="rgb(254,28,30)" fg:x="412" fg:w="30"/><text x="91.6025%" y="159.50">_pthread_..</text></g><g><title>_main (159 samples, 35.25%)</title><rect x="64.3016%" y="501" width="35.2550%" height="15" fill="rgb(241,142,54)" fg:x="290" fg:w="159"/><text x="64.5516%" y="511.50">_main</text></g><g><title>std::rt::lang_start_internal (159 samples, 35.25%)</title><rect x="64.3016%" y="485" width="35.2550%" height="15" fill="rgb(222,85,15)" fg:x="290" fg:w="159"/><text x="64.5516%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (159 samples, 35.25%)</title><rect x="64.3016%" y="469" width="35.2550%" height="15" fill="rgb(210,85,47)" fg:x="290" fg:w="159"/><text x="64.5516%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (159 samples, 35.25%)</title><rect x="64.3016%" y="453" width="35.2550%" height="15" fill="rgb(224,206,25)" fg:x="290" fg:w="159"/><text x="64.5516%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (159 samples, 35.25%)</title><rect x="64.3016%" y="437" width="35.2550%" height="15" fill="rgb(243,201,19)" fg:x="290" fg:w="159"/><text x="64.5516%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (159 samples, 35.25%)</title><rect x="64.3016%" y="421" width="35.2550%" height="15" fill="rgb(236,59,4)" fg:x="290" fg:w="159"/><text x="64.5516%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (159 samples, 35.25%)</title><rect x="64.3016%" y="405" width="35.2550%" height="15" fill="rgb(254,179,45)" fg:x="290" fg:w="159"/><text x="64.5516%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (159 samples, 35.25%)</title><rect x="64.3016%" y="389" width="35.2550%" height="15" fill="rgb(226,14,10)" fg:x="290" fg:w="159"/><text x="64.5516%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (159 samples, 35.25%)</title><rect x="64.3016%" y="373" width="35.2550%" height="15" fill="rgb(244,27,41)" fg:x="290" fg:w="159"/><text x="64.5516%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (159 samples, 35.25%)</title><rect x="64.3016%" y="357" width="35.2550%" height="15" fill="rgb(235,35,32)" fg:x="290" fg:w="159"/><text x="64.5516%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::Fn..</text></g><g><title>std::rt::lang_start::{{closure}} (159 samples, 35.25%)</title><rect x="64.3016%" y="341" width="35.2550%" height="15" fill="rgb(218,68,31)" fg:x="290" fg:w="159"/><text x="64.5516%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (159 samples, 35.25%)</title><rect x="64.3016%" y="325" width="35.2550%" height="15" fill="rgb(207,120,37)" fg:x="290" fg:w="159"/><text x="64.5516%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (159 samples, 35.25%)</title><rect x="64.3016%" y="309" width="35.2550%" height="15" fill="rgb(227,98,0)" fg:x="290" fg:w="159"/><text x="64.5516%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (159 samples, 35.25%)</title><rect x="64.3016%" y="293" width="35.2550%" height="15" fill="rgb(207,7,3)" fg:x="290" fg:w="159"/><text x="64.5516%" y="303.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (159 samples, 35.25%)</title><rect x="64.3016%" y="277" width="35.2550%" height="15" fill="rgb(206,98,19)" fg:x="290" fg:w="159"/><text x="64.5516%" y="287.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (113 samples, 25.06%)</title><rect x="74.5011%" y="261" width="25.0554%" height="15" fill="rgb(217,5,26)" fg:x="336" fg:w="113"/><text x="74.7511%" y="271.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (67 samples, 14.86%)</title><rect x="84.7007%" y="245" width="14.8559%" height="15" fill="rgb(235,190,38)" fg:x="382" fg:w="67"/><text x="84.9507%" y="255.50">torpedo::renderer::rend..</text></g><g><title>torpedo::renderer::render_object (7 samples, 1.55%)</title><rect x="98.0044%" y="229" width="1.5521%" height="15" fill="rgb(247,86,24)" fg:x="442" fg:w="7"/><text x="98.2544%" y="239.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (7 samples, 1.55%)</title><rect x="98.0044%" y="213" width="1.5521%" height="15" fill="rgb(205,101,16)" fg:x="442" fg:w="7"/><text x="98.2544%" y="223.50"></text></g><g><title>Unknown (7 samples, 1.55%)</title><rect x="98.0044%" y="197" width="1.5521%" height="15" fill="rgb(246,168,33)" fg:x="442" fg:w="7"/><text x="98.2544%" y="207.50"></text></g><g><title>Unknown (7 samples, 1.55%)</title><rect x="98.0044%" y="181" width="1.5521%" height="15" fill="rgb(231,114,1)" fg:x="442" fg:w="7"/><text x="98.2544%" y="191.50"></text></g><g><title>Unknown (7 samples, 1.55%)</title><rect x="98.0044%" y="165" width="1.5521%" height="15" fill="rgb(207,184,53)" fg:x="442" fg:w="7"/><text x="98.2544%" y="175.50"></text></g><g><title>Unknown (6 samples, 1.33%)</title><rect x="98.2262%" y="149" width="1.3304%" height="15" fill="rgb(224,95,51)" fg:x="443" fg:w="6"/><text x="98.4762%" y="159.50"></text></g><g><title>_mig_get_reply_port (1 samples, 0.22%)</title><rect x="99.5565%" y="501" width="0.2217%" height="15" fill="rgb(212,188,45)" fg:x="449" fg:w="1"/><text x="99.8065%" y="511.50"></text></g><g><title>all (451 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="451"/><text x="0.2500%" y="543.50"></text></g><g><title>8302233664 (190 samples, 42.13%)</title><rect x="57.8714%" y="517" width="42.1286%" height="15" fill="rgb(251,22,52)" fg:x="261" fg:w="190"/><text x="58.1214%" y="527.50">8302233664</text></g><g><title>_pthread_atfork (1 samples, 0.22%)</title><rect x="99.7783%" y="501" width="0.2217%" height="15" fill="rgb(229,209,22)" fg:x="450" fg:w="1"/><text x="100.0283%" y="511.50"></text></g><g><title>_pthread_atfork (1 samples, 0.22%)</title><rect x="99.7783%" y="485" width="0.2217%" height="15" fill="rgb(234,138,34)" fg:x="450" fg:w="1"/><text x="100.0283%" y="495.50"></text></g><g><title>_mig_get_special_reply_port (1 samples, 0.22%)</title><rect x="99.7783%" y="469" width="0.2217%" height="15" fill="rgb(212,95,11)" fg:x="450" fg:w="1"/><text x="100.0283%" y="479.50"></text></g></svg></svg>