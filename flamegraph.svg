<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="393"><g><title>6096596992 (2 samples, 0.51%)</title><rect x="0.0000%" y="501" width="0.5089%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.25%)</title><rect x="0.2545%" y="485" width="0.2545%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.5045%" y="495.50"></text></g><g><title>__platform_strcpy (1 samples, 0.25%)</title><rect x="0.2545%" y="469" width="0.2545%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.5045%" y="479.50"></text></g><g><title>6097170432 (1 samples, 0.25%)</title><rect x="0.5089%" y="501" width="0.2545%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.7589%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.25%)</title><rect x="0.5089%" y="485" width="0.2545%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.7589%" y="495.50"></text></g><g><title>6097743872 (1 samples, 0.25%)</title><rect x="0.7634%" y="501" width="0.2545%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="1.0134%" y="511.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.25%)</title><rect x="0.7634%" y="485" width="0.2545%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="1.0134%" y="495.50"></text></g><g><title>6296416256 (2 samples, 0.51%)</title><rect x="1.0178%" y="501" width="0.5089%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="1.2678%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (2 samples, 0.51%)</title><rect x="1.0178%" y="485" width="0.5089%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="2"/><text x="1.2678%" y="495.50"></text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="1.2723%" y="469" width="0.2545%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="1.5223%" y="479.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="1.2723%" y="453" width="0.2545%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="1.5223%" y="463.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="1.2723%" y="437" width="0.2545%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="1.5223%" y="447.50"></text></g><g><title>6296989696 (1 samples, 0.25%)</title><rect x="1.5267%" y="501" width="0.2545%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="1.7767%" y="511.50"></text></g><g><title>_pthread_mach_thread_np (1 samples, 0.25%)</title><rect x="1.5267%" y="485" width="0.2545%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.7767%" y="495.50"></text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="1.5267%" y="469" width="0.2545%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.7767%" y="479.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="1.5267%" y="453" width="0.2545%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.7767%" y="463.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="1.5267%" y="437" width="0.2545%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="1.7767%" y="447.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (1 samples, 0.25%)</title><rect x="1.7812%" y="261" width="0.2545%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="2.0312%" y="271.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (1 samples, 0.25%)</title><rect x="1.7812%" y="245" width="0.2545%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="2.0312%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="1.7812%" y="229" width="0.2545%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="2.0312%" y="239.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="1.7812%" y="213" width="0.2545%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="2.0312%" y="223.50"></text></g><g><title>6301741056 (3 samples, 0.76%)</title><rect x="1.7812%" y="501" width="0.7634%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="3"/><text x="2.0312%" y="511.50"></text></g><g><title>__pthread_deallocate (3 samples, 0.76%)</title><rect x="1.7812%" y="485" width="0.7634%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="3"/><text x="2.0312%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.76%)</title><rect x="1.7812%" y="469" width="0.7634%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="3"/><text x="2.0312%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="1.7812%" y="453" width="0.7634%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="3"/><text x="2.0312%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="1.7812%" y="437" width="0.7634%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="3"/><text x="2.0312%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.76%)</title><rect x="1.7812%" y="421" width="0.7634%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="3"/><text x="2.0312%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 0.76%)</title><rect x="1.7812%" y="405" width="0.7634%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="3"/><text x="2.0312%" y="415.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.76%)</title><rect x="1.7812%" y="389" width="0.7634%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="3"/><text x="2.0312%" y="399.50"></text></g><g><title>std::panicking::try (3 samples, 0.76%)</title><rect x="1.7812%" y="373" width="0.7634%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="3"/><text x="2.0312%" y="383.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.76%)</title><rect x="1.7812%" y="357" width="0.7634%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="3"/><text x="2.0312%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="1.7812%" y="341" width="0.7634%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="3"/><text x="2.0312%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 0.76%)</title><rect x="1.7812%" y="325" width="0.7634%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="3"/><text x="2.0312%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.76%)</title><rect x="1.7812%" y="309" width="0.7634%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="3"/><text x="2.0312%" y="319.50"></text></g><g><title>torpedo::level::level_loop::{{closure}} (3 samples, 0.76%)</title><rect x="1.7812%" y="293" width="0.7634%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="3"/><text x="2.0312%" y="303.50"></text></g><g><title>torpedo::physics::update (3 samples, 0.76%)</title><rect x="1.7812%" y="277" width="0.7634%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="3"/><text x="2.0312%" y="287.50"></text></g><g><title>torpedo::physics::check_collision_comps (2 samples, 0.51%)</title><rect x="2.0356%" y="261" width="0.5089%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="2"/><text x="2.2856%" y="271.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="2.0356%" y="245" width="0.5089%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="2.2856%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="2.0356%" y="229" width="0.5089%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="2"/><text x="2.2856%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.51%)</title><rect x="2.0356%" y="213" width="0.5089%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="2"/><text x="2.2856%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.51%)</title><rect x="2.0356%" y="197" width="0.5089%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="2"/><text x="2.2856%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.51%)</title><rect x="2.0356%" y="181" width="0.5089%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="2"/><text x="2.2856%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.51%)</title><rect x="2.0356%" y="165" width="0.5089%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="2"/><text x="2.2856%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.51%)</title><rect x="2.0356%" y="149" width="0.5089%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="2"/><text x="2.2856%" y="159.50"></text></g><g><title>6333427712 (1 samples, 0.25%)</title><rect x="2.5445%" y="501" width="0.2545%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="2.7945%" y="511.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.25%)</title><rect x="2.5445%" y="485" width="0.2545%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="2.7945%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.25%)</title><rect x="2.5445%" y="469" width="0.2545%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="2.7945%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1 samples, 0.25%)</title><rect x="2.5445%" y="453" width="0.2545%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="2.7945%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="2.5445%" y="437" width="0.2545%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="2.7945%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1 samples, 0.25%)</title><rect x="2.5445%" y="421" width="0.2545%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="2.7945%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="2.7990%" y="165" width="0.5089%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="2"/><text x="3.0490%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="2.7990%" y="149" width="0.5089%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="2"/><text x="3.0490%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="2.7990%" y="133" width="0.5089%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="2"/><text x="3.0490%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.51%)</title><rect x="2.7990%" y="117" width="0.5089%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="2"/><text x="3.0490%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.51%)</title><rect x="2.7990%" y="101" width="0.5089%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="2"/><text x="3.0490%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.51%)</title><rect x="2.7990%" y="85" width="0.5089%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="2"/><text x="3.0490%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.51%)</title><rect x="2.7990%" y="69" width="0.5089%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="2"/><text x="3.0490%" y="79.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.76%)</title><rect x="2.7990%" y="261" width="0.7634%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="3"/><text x="3.0490%" y="271.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.76%)</title><rect x="2.7990%" y="245" width="0.7634%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="3"/><text x="3.0490%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.76%)</title><rect x="2.7990%" y="229" width="0.7634%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="3"/><text x="3.0490%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.76%)</title><rect x="2.7990%" y="213" width="0.7634%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="3"/><text x="3.0490%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.76%)</title><rect x="2.7990%" y="197" width="0.7634%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="3"/><text x="3.0490%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.76%)</title><rect x="2.7990%" y="181" width="0.7634%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="3"/><text x="3.0490%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.25%)</title><rect x="3.3079%" y="165" width="0.2545%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="3.5579%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.25%)</title><rect x="3.3079%" y="149" width="0.2545%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="3.5579%" y="159.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="3.5623%" y="261" width="0.2545%" height="15" fill="rgb(247,98,35)" fg:x="14" fg:w="1"/><text x="3.8123%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="3.5623%" y="245" width="0.2545%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="1"/><text x="3.8123%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.25%)</title><rect x="3.5623%" y="229" width="0.2545%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="3.8123%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.25%)</title><rect x="3.5623%" y="213" width="0.2545%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="3.8123%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.25%)</title><rect x="3.5623%" y="197" width="0.2545%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="3.8123%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.25%)</title><rect x="3.5623%" y="181" width="0.2545%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="1"/><text x="3.8123%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.25%)</title><rect x="3.5623%" y="165" width="0.2545%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="1"/><text x="3.8123%" y="175.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (5 samples, 1.27%)</title><rect x="3.8168%" y="261" width="1.2723%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="5"/><text x="4.0668%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 1.27%)</title><rect x="3.8168%" y="245" width="1.2723%" height="15" fill="rgb(240,54,50)" fg:x="15" fg:w="5"/><text x="4.0668%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 1.27%)</title><rect x="3.8168%" y="229" width="1.2723%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="5"/><text x="4.0668%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 1.27%)</title><rect x="3.8168%" y="213" width="1.2723%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="5"/><text x="4.0668%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 1.27%)</title><rect x="3.8168%" y="197" width="1.2723%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="5"/><text x="4.0668%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 1.27%)</title><rect x="3.8168%" y="181" width="1.2723%" height="15" fill="rgb(209,38,44)" fg:x="15" fg:w="5"/><text x="4.0668%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 1.27%)</title><rect x="3.8168%" y="165" width="1.2723%" height="15" fill="rgb(236,212,23)" fg:x="15" fg:w="5"/><text x="4.0668%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5 samples, 1.27%)</title><rect x="3.8168%" y="149" width="1.2723%" height="15" fill="rgb(242,79,21)" fg:x="15" fg:w="5"/><text x="4.0668%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5 samples, 1.27%)</title><rect x="3.8168%" y="133" width="1.2723%" height="15" fill="rgb(211,96,35)" fg:x="15" fg:w="5"/><text x="4.0668%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 1.27%)</title><rect x="3.8168%" y="117" width="1.2723%" height="15" fill="rgb(253,215,40)" fg:x="15" fg:w="5"/><text x="4.0668%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.27%)</title><rect x="3.8168%" y="101" width="1.2723%" height="15" fill="rgb(211,81,21)" fg:x="15" fg:w="5"/><text x="4.0668%" y="111.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 1.27%)</title><rect x="3.8168%" y="85" width="1.2723%" height="15" fill="rgb(208,190,38)" fg:x="15" fg:w="5"/><text x="4.0668%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.25%)</title><rect x="5.0891%" y="261" width="0.2545%" height="15" fill="rgb(235,213,38)" fg:x="20" fg:w="1"/><text x="5.3391%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.25%)</title><rect x="5.0891%" y="245" width="0.2545%" height="15" fill="rgb(237,122,38)" fg:x="20" fg:w="1"/><text x="5.3391%" y="255.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.25%)</title><rect x="5.0891%" y="229" width="0.2545%" height="15" fill="rgb(244,218,35)" fg:x="20" fg:w="1"/><text x="5.3391%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.25%)</title><rect x="5.0891%" y="213" width="0.2545%" height="15" fill="rgb(240,68,47)" fg:x="20" fg:w="1"/><text x="5.3391%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.25%)</title><rect x="5.0891%" y="197" width="0.2545%" height="15" fill="rgb(210,16,53)" fg:x="20" fg:w="1"/><text x="5.3391%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (4 samples, 1.02%)</title><rect x="5.3435%" y="261" width="1.0178%" height="15" fill="rgb(235,124,12)" fg:x="21" fg:w="4"/><text x="5.5935%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (4 samples, 1.02%)</title><rect x="5.3435%" y="245" width="1.0178%" height="15" fill="rgb(224,169,11)" fg:x="21" fg:w="4"/><text x="5.5935%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (4 samples, 1.02%)</title><rect x="5.3435%" y="229" width="1.0178%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="4"/><text x="5.5935%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.02%)</title><rect x="5.3435%" y="213" width="1.0178%" height="15" fill="rgb(242,216,29)" fg:x="21" fg:w="4"/><text x="5.5935%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 1.02%)</title><rect x="5.3435%" y="197" width="1.0178%" height="15" fill="rgb(230,116,27)" fg:x="21" fg:w="4"/><text x="5.5935%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 1.02%)</title><rect x="5.3435%" y="181" width="1.0178%" height="15" fill="rgb(228,99,48)" fg:x="21" fg:w="4"/><text x="5.5935%" y="191.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.25%)</title><rect x="6.1069%" y="165" width="0.2545%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="1"/><text x="6.3569%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (1 samples, 0.25%)</title><rect x="6.1069%" y="149" width="0.2545%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="1"/><text x="6.3569%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.25%)</title><rect x="6.1069%" y="133" width="0.2545%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="1"/><text x="6.3569%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.25%)</title><rect x="6.1069%" y="117" width="0.2545%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="1"/><text x="6.3569%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="6.1069%" y="101" width="0.2545%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="1"/><text x="6.3569%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.25%)</title><rect x="6.1069%" y="85" width="0.2545%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="1"/><text x="6.3569%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.25%)</title><rect x="6.1069%" y="69" width="0.2545%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="1"/><text x="6.3569%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (4 samples, 1.02%)</title><rect x="6.3613%" y="261" width="1.0178%" height="15" fill="rgb(242,107,0)" fg:x="25" fg:w="4"/><text x="6.6113%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (4 samples, 1.02%)</title><rect x="6.3613%" y="245" width="1.0178%" height="15" fill="rgb(251,28,31)" fg:x="25" fg:w="4"/><text x="6.6113%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (4 samples, 1.02%)</title><rect x="6.3613%" y="229" width="1.0178%" height="15" fill="rgb(233,223,10)" fg:x="25" fg:w="4"/><text x="6.6113%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (4 samples, 1.02%)</title><rect x="6.3613%" y="213" width="1.0178%" height="15" fill="rgb(215,21,27)" fg:x="25" fg:w="4"/><text x="6.6113%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (4 samples, 1.02%)</title><rect x="6.3613%" y="197" width="1.0178%" height="15" fill="rgb(232,23,21)" fg:x="25" fg:w="4"/><text x="6.6113%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.02%)</title><rect x="6.3613%" y="181" width="1.0178%" height="15" fill="rgb(244,5,23)" fg:x="25" fg:w="4"/><text x="6.6113%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (12 samples, 3.05%)</title><rect x="7.3791%" y="261" width="3.0534%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="12"/><text x="7.6291%" y="271.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (12 samples, 3.05%)</title><rect x="7.3791%" y="245" width="3.0534%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="12"/><text x="7.6291%" y="255.50">cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 3.05%)</title><rect x="7.3791%" y="229" width="3.0534%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="12"/><text x="7.6291%" y="239.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 3.05%)</title><rect x="7.3791%" y="213" width="3.0534%" height="15" fill="rgb(240,187,13)" fg:x="29" fg:w="12"/><text x="7.6291%" y="223.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (12 samples, 3.05%)</title><rect x="7.3791%" y="197" width="3.0534%" height="15" fill="rgb(223,113,26)" fg:x="29" fg:w="12"/><text x="7.6291%" y="207.50">all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.25%)</title><rect x="10.4326%" y="245" width="0.2545%" height="15" fill="rgb(206,192,2)" fg:x="41" fg:w="1"/><text x="10.6826%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.25%)</title><rect x="10.4326%" y="229" width="0.2545%" height="15" fill="rgb(241,108,4)" fg:x="41" fg:w="1"/><text x="10.6826%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="10.4326%" y="213" width="0.2545%" height="15" fill="rgb(247,173,49)" fg:x="41" fg:w="1"/><text x="10.6826%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.25%)</title><rect x="10.4326%" y="197" width="0.2545%" height="15" fill="rgb(224,114,35)" fg:x="41" fg:w="1"/><text x="10.6826%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.25%)</title><rect x="10.4326%" y="181" width="0.2545%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="10.6826%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.25%)</title><rect x="10.4326%" y="165" width="0.2545%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="1"/><text x="10.6826%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.25%)</title><rect x="10.4326%" y="149" width="0.2545%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="1"/><text x="10.6826%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.51%)</title><rect x="10.4326%" y="261" width="0.5089%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="2"/><text x="10.6826%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.25%)</title><rect x="10.6870%" y="245" width="0.2545%" height="15" fill="rgb(237,72,25)" fg:x="42" fg:w="1"/><text x="10.9370%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.25%)</title><rect x="10.6870%" y="229" width="0.2545%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="1"/><text x="10.9370%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.25%)</title><rect x="10.6870%" y="213" width="0.2545%" height="15" fill="rgb(217,125,39)" fg:x="42" fg:w="1"/><text x="10.9370%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="10.6870%" y="197" width="0.2545%" height="15" fill="rgb(235,36,10)" fg:x="42" fg:w="1"/><text x="10.9370%" y="207.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (9 samples, 2.29%)</title><rect x="10.9415%" y="261" width="2.2901%" height="15" fill="rgb(251,123,47)" fg:x="43" fg:w="9"/><text x="11.1915%" y="271.50">s..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (9 samples, 2.29%)</title><rect x="10.9415%" y="245" width="2.2901%" height="15" fill="rgb(221,13,13)" fg:x="43" fg:w="9"/><text x="11.1915%" y="255.50">s..</text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (9 samples, 2.29%)</title><rect x="10.9415%" y="229" width="2.2901%" height="15" fill="rgb(238,131,9)" fg:x="43" fg:w="9"/><text x="11.1915%" y="239.50">s..</text></g><g><title>__pthread_main_thread_init (9 samples, 2.29%)</title><rect x="10.9415%" y="213" width="2.2901%" height="15" fill="rgb(211,50,8)" fg:x="43" fg:w="9"/><text x="11.1915%" y="223.50">_..</text></g><g><title>_pthread_rwlock_wrlock (9 samples, 2.29%)</title><rect x="10.9415%" y="197" width="2.2901%" height="15" fill="rgb(245,182,24)" fg:x="43" fg:w="9"/><text x="11.1915%" y="207.50">_..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="13.2316%" y="213" width="0.5089%" height="15" fill="rgb(242,14,37)" fg:x="52" fg:w="2"/><text x="13.4816%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="13.4860%" y="197" width="0.2545%" height="15" fill="rgb(246,228,12)" fg:x="53" fg:w="1"/><text x="13.7360%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.25%)</title><rect x="13.4860%" y="181" width="0.2545%" height="15" fill="rgb(213,55,15)" fg:x="53" fg:w="1"/><text x="13.7360%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.25%)</title><rect x="13.4860%" y="165" width="0.2545%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="1"/><text x="13.7360%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.25%)</title><rect x="13.4860%" y="149" width="0.2545%" height="15" fill="rgb(230,59,30)" fg:x="53" fg:w="1"/><text x="13.7360%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.25%)</title><rect x="13.4860%" y="133" width="0.2545%" height="15" fill="rgb(209,121,21)" fg:x="53" fg:w="1"/><text x="13.7360%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.25%)</title><rect x="13.4860%" y="117" width="0.2545%" height="15" fill="rgb(220,109,13)" fg:x="53" fg:w="1"/><text x="13.7360%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 1.02%)</title><rect x="13.2316%" y="229" width="1.0178%" height="15" fill="rgb(232,18,1)" fg:x="52" fg:w="4"/><text x="13.4816%" y="239.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="13.7405%" y="213" width="0.5089%" height="15" fill="rgb(215,41,42)" fg:x="54" fg:w="2"/><text x="13.9905%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.51%)</title><rect x="13.7405%" y="197" width="0.5089%" height="15" fill="rgb(224,123,36)" fg:x="54" fg:w="2"/><text x="13.9905%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.51%)</title><rect x="13.7405%" y="181" width="0.5089%" height="15" fill="rgb(240,125,3)" fg:x="54" fg:w="2"/><text x="13.9905%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.51%)</title><rect x="13.7405%" y="165" width="0.5089%" height="15" fill="rgb(205,98,50)" fg:x="54" fg:w="2"/><text x="13.9905%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.51%)</title><rect x="13.7405%" y="149" width="0.5089%" height="15" fill="rgb(205,185,37)" fg:x="54" fg:w="2"/><text x="13.9905%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="13.7405%" y="133" width="0.5089%" height="15" fill="rgb(238,207,15)" fg:x="54" fg:w="2"/><text x="13.9905%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="13.7405%" y="117" width="0.5089%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="2"/><text x="13.9905%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.51%)</title><rect x="13.7405%" y="101" width="0.5089%" height="15" fill="rgb(235,201,11)" fg:x="54" fg:w="2"/><text x="13.9905%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.51%)</title><rect x="13.7405%" y="85" width="0.5089%" height="15" fill="rgb(207,46,11)" fg:x="54" fg:w="2"/><text x="13.9905%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.51%)</title><rect x="13.7405%" y="69" width="0.5089%" height="15" fill="rgb(241,35,35)" fg:x="54" fg:w="2"/><text x="13.9905%" y="79.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.51%)</title><rect x="13.7405%" y="53" width="0.5089%" height="15" fill="rgb(243,32,47)" fg:x="54" fg:w="2"/><text x="13.9905%" y="63.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.51%)</title><rect x="13.7405%" y="37" width="0.5089%" height="15" fill="rgb(247,202,23)" fg:x="54" fg:w="2"/><text x="13.9905%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (2 samples, 0.51%)</title><rect x="14.2494%" y="229" width="0.5089%" height="15" fill="rgb(219,102,11)" fg:x="56" fg:w="2"/><text x="14.4994%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.51%)</title><rect x="14.2494%" y="213" width="0.5089%" height="15" fill="rgb(243,110,44)" fg:x="56" fg:w="2"/><text x="14.4994%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.51%)</title><rect x="14.2494%" y="197" width="0.5089%" height="15" fill="rgb(222,74,54)" fg:x="56" fg:w="2"/><text x="14.4994%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.51%)</title><rect x="14.2494%" y="181" width="0.5089%" height="15" fill="rgb(216,99,12)" fg:x="56" fg:w="2"/><text x="14.4994%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.51%)</title><rect x="14.2494%" y="165" width="0.5089%" height="15" fill="rgb(226,22,26)" fg:x="56" fg:w="2"/><text x="14.4994%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.51%)</title><rect x="14.2494%" y="149" width="0.5089%" height="15" fill="rgb(217,163,10)" fg:x="56" fg:w="2"/><text x="14.4994%" y="159.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (7 samples, 1.78%)</title><rect x="13.2316%" y="261" width="1.7812%" height="15" fill="rgb(213,25,53)" fg:x="52" fg:w="7"/><text x="13.4816%" y="271.50">t..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (7 samples, 1.78%)</title><rect x="13.2316%" y="245" width="1.7812%" height="15" fill="rgb(252,105,26)" fg:x="52" fg:w="7"/><text x="13.4816%" y="255.50">t..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (1 samples, 0.25%)</title><rect x="14.7583%" y="229" width="0.2545%" height="15" fill="rgb(220,39,43)" fg:x="58" fg:w="1"/><text x="15.0083%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.0127%" y="245" width="0.2545%" height="15" fill="rgb(229,68,48)" fg:x="59" fg:w="1"/><text x="15.2627%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.0127%" y="229" width="0.2545%" height="15" fill="rgb(252,8,32)" fg:x="59" fg:w="1"/><text x="15.2627%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.0127%" y="213" width="0.2545%" height="15" fill="rgb(223,20,43)" fg:x="59" fg:w="1"/><text x="15.2627%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="15.0127%" y="197" width="0.2545%" height="15" fill="rgb(229,81,49)" fg:x="59" fg:w="1"/><text x="15.2627%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.25%)</title><rect x="15.0127%" y="181" width="0.2545%" height="15" fill="rgb(236,28,36)" fg:x="59" fg:w="1"/><text x="15.2627%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (1 samples, 0.25%)</title><rect x="15.2672%" y="229" width="0.2545%" height="15" fill="rgb(249,185,26)" fg:x="60" fg:w="1"/><text x="15.5172%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="15.2672%" y="213" width="0.2545%" height="15" fill="rgb(249,174,33)" fg:x="60" fg:w="1"/><text x="15.5172%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (1 samples, 0.25%)</title><rect x="15.2672%" y="197" width="0.2545%" height="15" fill="rgb(233,201,37)" fg:x="60" fg:w="1"/><text x="15.5172%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="15.2672%" y="181" width="0.2545%" height="15" fill="rgb(221,78,26)" fg:x="60" fg:w="1"/><text x="15.5172%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (1 samples, 0.25%)</title><rect x="15.2672%" y="165" width="0.2545%" height="15" fill="rgb(250,127,30)" fg:x="60" fg:w="1"/><text x="15.5172%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="15.2672%" y="149" width="0.2545%" height="15" fill="rgb(230,49,44)" fg:x="60" fg:w="1"/><text x="15.5172%" y="159.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.25%)</title><rect x="15.5216%" y="213" width="0.2545%" height="15" fill="rgb(229,67,23)" fg:x="61" fg:w="1"/><text x="15.7716%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.25%)</title><rect x="15.5216%" y="197" width="0.2545%" height="15" fill="rgb(249,83,47)" fg:x="61" fg:w="1"/><text x="15.7716%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.25%)</title><rect x="15.5216%" y="181" width="0.2545%" height="15" fill="rgb(215,43,3)" fg:x="61" fg:w="1"/><text x="15.7716%" y="191.50"></text></g><g><title>torpedo::physics::Octree::query_box (1 samples, 0.25%)</title><rect x="15.5216%" y="165" width="0.2545%" height="15" fill="rgb(238,154,13)" fg:x="61" fg:w="1"/><text x="15.7716%" y="175.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.25%)</title><rect x="15.5216%" y="149" width="0.2545%" height="15" fill="rgb(219,56,2)" fg:x="61" fg:w="1"/><text x="15.7716%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.25%)</title><rect x="15.5216%" y="133" width="0.2545%" height="15" fill="rgb(233,0,4)" fg:x="61" fg:w="1"/><text x="15.7716%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.25%)</title><rect x="15.5216%" y="117" width="0.2545%" height="15" fill="rgb(235,30,7)" fg:x="61" fg:w="1"/><text x="15.7716%" y="127.50"></text></g><g><title>torpedo::physics::Octree::query_box (4 samples, 1.02%)</title><rect x="15.0127%" y="261" width="1.0178%" height="15" fill="rgb(250,79,13)" fg:x="59" fg:w="4"/><text x="15.2627%" y="271.50"></text></g><g><title>torpedo::physics::Octree::query_box (3 samples, 0.76%)</title><rect x="15.2672%" y="245" width="0.7634%" height="15" fill="rgb(211,146,34)" fg:x="60" fg:w="3"/><text x="15.5172%" y="255.50"></text></g><g><title>torpedo::physics::Octree::query_box (2 samples, 0.51%)</title><rect x="15.5216%" y="229" width="0.5089%" height="15" fill="rgb(228,22,38)" fg:x="61" fg:w="2"/><text x="15.7716%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.7761%" y="213" width="0.2545%" height="15" fill="rgb(235,168,5)" fg:x="62" fg:w="1"/><text x="16.0261%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.7761%" y="197" width="0.2545%" height="15" fill="rgb(221,155,16)" fg:x="62" fg:w="1"/><text x="16.0261%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.25%)</title><rect x="15.7761%" y="181" width="0.2545%" height="15" fill="rgb(215,215,53)" fg:x="62" fg:w="1"/><text x="16.0261%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="15.7761%" y="165" width="0.2545%" height="15" fill="rgb(223,4,10)" fg:x="62" fg:w="1"/><text x="16.0261%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.25%)</title><rect x="15.7761%" y="149" width="0.2545%" height="15" fill="rgb(234,103,6)" fg:x="62" fg:w="1"/><text x="16.0261%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="15.7761%" y="133" width="0.2545%" height="15" fill="rgb(227,97,0)" fg:x="62" fg:w="1"/><text x="16.0261%" y="143.50"></text></g><g><title>torpedo::physics::PhysicsComp::bb (1 samples, 0.25%)</title><rect x="16.0305%" y="261" width="0.2545%" height="15" fill="rgb(234,150,53)" fg:x="63" fg:w="1"/><text x="16.2805%" y="271.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (1 samples, 0.25%)</title><rect x="16.0305%" y="245" width="0.2545%" height="15" fill="rgb(228,201,54)" fg:x="63" fg:w="1"/><text x="16.2805%" y="255.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.25%)</title><rect x="16.0305%" y="229" width="0.2545%" height="15" fill="rgb(222,22,37)" fg:x="63" fg:w="1"/><text x="16.2805%" y="239.50"></text></g><g><title>torpedo::physics::PhysicsComp::bb (1 samples, 0.25%)</title><rect x="16.0305%" y="213" width="0.2545%" height="15" fill="rgb(237,53,32)" fg:x="63" fg:w="1"/><text x="16.2805%" y="223.50"></text></g><g><title>torpedo::physics::PhysicsComp::max (1 samples, 0.25%)</title><rect x="16.0305%" y="197" width="0.2545%" height="15" fill="rgb(233,25,53)" fg:x="63" fg:w="1"/><text x="16.2805%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 2.04%)</title><rect x="16.5394%" y="165" width="2.0356%" height="15" fill="rgb(210,40,34)" fg:x="65" fg:w="8"/><text x="16.7894%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 2.04%)</title><rect x="16.5394%" y="149" width="2.0356%" height="15" fill="rgb(241,220,44)" fg:x="65" fg:w="8"/><text x="16.7894%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8 samples, 2.04%)</title><rect x="16.5394%" y="133" width="2.0356%" height="15" fill="rgb(235,28,35)" fg:x="65" fg:w="8"/><text x="16.7894%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8 samples, 2.04%)</title><rect x="16.5394%" y="117" width="2.0356%" height="15" fill="rgb(210,56,17)" fg:x="65" fg:w="8"/><text x="16.7894%" y="127.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 2.04%)</title><rect x="16.5394%" y="101" width="2.0356%" height="15" fill="rgb(224,130,29)" fg:x="65" fg:w="8"/><text x="16.7894%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 2.04%)</title><rect x="16.5394%" y="85" width="2.0356%" height="15" fill="rgb(235,212,8)" fg:x="65" fg:w="8"/><text x="16.7894%" y="95.50">a..</text></g><g><title>alloc::alloc::alloc (8 samples, 2.04%)</title><rect x="16.5394%" y="69" width="2.0356%" height="15" fill="rgb(223,33,50)" fg:x="65" fg:w="8"/><text x="16.7894%" y="79.50">a..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (59 samples, 15.01%)</title><rect x="16.2850%" y="245" width="15.0127%" height="15" fill="rgb(219,149,13)" fg:x="64" fg:w="59"/><text x="16.5350%" y="255.50">&lt;torpedo::level::Transf..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (58 samples, 14.76%)</title><rect x="16.5394%" y="229" width="14.7583%" height="15" fill="rgb(250,156,29)" fg:x="65" fg:w="58"/><text x="16.7894%" y="239.50">&lt;alloc::boxed::Box&lt;[T],..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (58 samples, 14.76%)</title><rect x="16.5394%" y="213" width="14.7583%" height="15" fill="rgb(216,193,19)" fg:x="65" fg:w="58"/><text x="16.7894%" y="223.50">alloc::slice::&lt;impl [T]..</text></g><g><title>alloc::slice::hack::to_vec (58 samples, 14.76%)</title><rect x="16.5394%" y="197" width="14.7583%" height="15" fill="rgb(216,135,14)" fg:x="65" fg:w="58"/><text x="16.7894%" y="207.50">alloc::slice::hack::to_..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (58 samples, 14.76%)</title><rect x="16.5394%" y="181" width="14.7583%" height="15" fill="rgb(241,47,5)" fg:x="65" fg:w="58"/><text x="16.7894%" y="191.50">&lt;T as alloc::slice::hac..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (50 samples, 12.72%)</title><rect x="18.5751%" y="165" width="12.7226%" height="15" fill="rgb(233,42,35)" fg:x="73" fg:w="50"/><text x="18.8251%" y="175.50">core::ptr::const_pt..</text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 12.72%)</title><rect x="18.5751%" y="149" width="12.7226%" height="15" fill="rgb(231,13,6)" fg:x="73" fg:w="50"/><text x="18.8251%" y="159.50">core::intrinsics::c..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 1.27%)</title><rect x="31.2977%" y="181" width="1.2723%" height="15" fill="rgb(207,181,40)" fg:x="123" fg:w="5"/><text x="31.5477%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 1.27%)</title><rect x="31.2977%" y="165" width="1.2723%" height="15" fill="rgb(254,173,49)" fg:x="123" fg:w="5"/><text x="31.5477%" y="175.50"></text></g><g><title>torpedo::physics::col::check_collision (2 samples, 0.51%)</title><rect x="32.0611%" y="149" width="0.5089%" height="15" fill="rgb(221,1,38)" fg:x="126" fg:w="2"/><text x="32.3111%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (2 samples, 0.51%)</title><rect x="32.0611%" y="133" width="0.5089%" height="15" fill="rgb(206,124,46)" fg:x="126" fg:w="2"/><text x="32.3111%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (2 samples, 0.51%)</title><rect x="32.0611%" y="117" width="0.5089%" height="15" fill="rgb(249,21,11)" fg:x="126" fg:w="2"/><text x="32.3111%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.51%)</title><rect x="32.0611%" y="101" width="0.5089%" height="15" fill="rgb(222,201,40)" fg:x="126" fg:w="2"/><text x="32.3111%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.51%)</title><rect x="32.0611%" y="85" width="0.5089%" height="15" fill="rgb(235,61,29)" fg:x="126" fg:w="2"/><text x="32.3111%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.51%)</title><rect x="32.0611%" y="69" width="0.5089%" height="15" fill="rgb(219,207,3)" fg:x="126" fg:w="2"/><text x="32.3111%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (6 samples, 1.53%)</title><rect x="31.2977%" y="229" width="1.5267%" height="15" fill="rgb(222,56,46)" fg:x="123" fg:w="6"/><text x="31.5477%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (6 samples, 1.53%)</title><rect x="31.2977%" y="213" width="1.5267%" height="15" fill="rgb(239,76,54)" fg:x="123" fg:w="6"/><text x="31.5477%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.53%)</title><rect x="31.2977%" y="197" width="1.5267%" height="15" fill="rgb(231,124,27)" fg:x="123" fg:w="6"/><text x="31.5477%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.25%)</title><rect x="32.5700%" y="181" width="0.2545%" height="15" fill="rgb(249,195,6)" fg:x="128" fg:w="1"/><text x="32.8200%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.25%)</title><rect x="32.5700%" y="165" width="0.2545%" height="15" fill="rgb(237,174,47)" fg:x="128" fg:w="1"/><text x="32.8200%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.25%)</title><rect x="32.5700%" y="149" width="0.2545%" height="15" fill="rgb(206,201,31)" fg:x="128" fg:w="1"/><text x="32.8200%" y="159.50"></text></g><g><title>torpedo::physics::col::check_collision (1 samples, 0.25%)</title><rect x="32.5700%" y="133" width="0.2545%" height="15" fill="rgb(231,57,52)" fg:x="128" fg:w="1"/><text x="32.8200%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.25%)</title><rect x="32.5700%" y="117" width="0.2545%" height="15" fill="rgb(248,177,22)" fg:x="128" fg:w="1"/><text x="32.8200%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.25%)</title><rect x="32.5700%" y="101" width="0.2545%" height="15" fill="rgb(215,211,37)" fg:x="128" fg:w="1"/><text x="32.8200%" y="111.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="32.5700%" y="85" width="0.2545%" height="15" fill="rgb(241,128,51)" fg:x="128" fg:w="1"/><text x="32.8200%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.25%)</title><rect x="32.5700%" y="69" width="0.2545%" height="15" fill="rgb(227,165,31)" fg:x="128" fg:w="1"/><text x="32.8200%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.25%)</title><rect x="32.5700%" y="53" width="0.2545%" height="15" fill="rgb(228,167,24)" fg:x="128" fg:w="1"/><text x="32.8200%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.25%)</title><rect x="32.5700%" y="37" width="0.2545%" height="15" fill="rgb(228,143,12)" fg:x="128" fg:w="1"/><text x="32.8200%" y="47.50"></text></g><g><title>torpedo::math::BoundingBox::check_collision (1 samples, 0.25%)</title><rect x="32.8244%" y="229" width="0.2545%" height="15" fill="rgb(249,149,8)" fg:x="129" fg:w="1"/><text x="33.0744%" y="239.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (1 samples, 0.25%)</title><rect x="32.8244%" y="213" width="0.2545%" height="15" fill="rgb(243,35,44)" fg:x="129" fg:w="1"/><text x="33.0744%" y="223.50"></text></g><g><title>torpedo::physics::check_collision_comps (68 samples, 17.30%)</title><rect x="16.2850%" y="261" width="17.3028%" height="15" fill="rgb(246,89,9)" fg:x="64" fg:w="68"/><text x="16.5350%" y="271.50">torpedo::physics::check_col..</text></g><g><title>torpedo::physics::col::check_collision (9 samples, 2.29%)</title><rect x="31.2977%" y="245" width="2.2901%" height="15" fill="rgb(233,213,13)" fg:x="123" fg:w="9"/><text x="31.5477%" y="255.50">t..</text></g><g><title>torpedo::math::Vector4::to_matrix (2 samples, 0.51%)</title><rect x="33.0789%" y="229" width="0.5089%" height="15" fill="rgb(233,141,41)" fg:x="130" fg:w="2"/><text x="33.3289%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.25%)</title><rect x="33.5878%" y="245" width="0.2545%" height="15" fill="rgb(239,167,4)" fg:x="132" fg:w="1"/><text x="33.8378%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.25%)</title><rect x="33.5878%" y="229" width="0.2545%" height="15" fill="rgb(209,217,16)" fg:x="132" fg:w="1"/><text x="33.8378%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.25%)</title><rect x="33.5878%" y="213" width="0.2545%" height="15" fill="rgb(219,88,35)" fg:x="132" fg:w="1"/><text x="33.8378%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.25%)</title><rect x="33.5878%" y="197" width="0.2545%" height="15" fill="rgb(220,193,23)" fg:x="132" fg:w="1"/><text x="33.8378%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="33.5878%" y="181" width="0.2545%" height="15" fill="rgb(230,90,52)" fg:x="132" fg:w="1"/><text x="33.8378%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.25%)</title><rect x="33.5878%" y="165" width="0.2545%" height="15" fill="rgb(252,106,19)" fg:x="132" fg:w="1"/><text x="33.8378%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.25%)</title><rect x="33.5878%" y="149" width="0.2545%" height="15" fill="rgb(206,74,20)" fg:x="132" fg:w="1"/><text x="33.8378%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.25%)</title><rect x="33.5878%" y="133" width="0.2545%" height="15" fill="rgb(230,138,44)" fg:x="132" fg:w="1"/><text x="33.8378%" y="143.50"></text></g><g><title>__pthread_create (6 samples, 1.53%)</title><rect x="33.8422%" y="69" width="1.5267%" height="15" fill="rgb(235,182,43)" fg:x="133" fg:w="6"/><text x="34.0922%" y="79.50"></text></g><g><title>std::thread::scoped::Scope::spawn (32 samples, 8.14%)</title><rect x="33.8422%" y="133" width="8.1425%" height="15" fill="rgb(242,16,51)" fg:x="133" fg:w="32"/><text x="34.0922%" y="143.50">std::thread..</text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (32 samples, 8.14%)</title><rect x="33.8422%" y="117" width="8.1425%" height="15" fill="rgb(248,9,4)" fg:x="133" fg:w="32"/><text x="34.0922%" y="127.50">std::thread..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (32 samples, 8.14%)</title><rect x="33.8422%" y="101" width="8.1425%" height="15" fill="rgb(210,31,22)" fg:x="133" fg:w="32"/><text x="34.0922%" y="111.50">std::thread..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (32 samples, 8.14%)</title><rect x="33.8422%" y="85" width="8.1425%" height="15" fill="rgb(239,54,39)" fg:x="133" fg:w="32"/><text x="34.0922%" y="95.50">std::sys::p..</text></g><g><title>_pthread_jit_write_with_callback_np (26 samples, 6.62%)</title><rect x="35.3690%" y="69" width="6.6158%" height="15" fill="rgb(230,99,41)" fg:x="139" fg:w="26"/><text x="35.6190%" y="79.50">_pthread_..</text></g><g><title>std::thread::scoped::scope (36 samples, 9.16%)</title><rect x="33.8422%" y="245" width="9.1603%" height="15" fill="rgb(253,106,12)" fg:x="133" fg:w="36"/><text x="34.0922%" y="255.50">std::thread::..</text></g><g><title>std::panic::catch_unwind (36 samples, 9.16%)</title><rect x="33.8422%" y="229" width="9.1603%" height="15" fill="rgb(213,46,41)" fg:x="133" fg:w="36"/><text x="34.0922%" y="239.50">std::panic::c..</text></g><g><title>std::panicking::try (36 samples, 9.16%)</title><rect x="33.8422%" y="213" width="9.1603%" height="15" fill="rgb(215,133,35)" fg:x="133" fg:w="36"/><text x="34.0922%" y="223.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (36 samples, 9.16%)</title><rect x="33.8422%" y="197" width="9.1603%" height="15" fill="rgb(213,28,5)" fg:x="133" fg:w="36"/><text x="34.0922%" y="207.50">std::panickin..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (36 samples, 9.16%)</title><rect x="33.8422%" y="181" width="9.1603%" height="15" fill="rgb(215,77,49)" fg:x="133" fg:w="36"/><text x="34.0922%" y="191.50">&lt;core::panic:..</text></g><g><title>std::thread::scoped::scope::{{closure}} (36 samples, 9.16%)</title><rect x="33.8422%" y="165" width="9.1603%" height="15" fill="rgb(248,100,22)" fg:x="133" fg:w="36"/><text x="34.0922%" y="175.50">std::thread::..</text></g><g><title>torpedo::physics::make_octree::{{closure}} (36 samples, 9.16%)</title><rect x="33.8422%" y="149" width="9.1603%" height="15" fill="rgb(208,67,9)" fg:x="133" fg:w="36"/><text x="34.0922%" y="159.50">torpedo::phys..</text></g><g><title>std::thread::scoped::ScopedJoinHandle&lt;T&gt;::join (4 samples, 1.02%)</title><rect x="41.9847%" y="133" width="1.0178%" height="15" fill="rgb(219,133,21)" fg:x="165" fg:w="4"/><text x="42.2347%" y="143.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (4 samples, 1.02%)</title><rect x="41.9847%" y="117" width="1.0178%" height="15" fill="rgb(246,46,29)" fg:x="165" fg:w="4"/><text x="42.2347%" y="127.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (4 samples, 1.02%)</title><rect x="41.9847%" y="101" width="1.0178%" height="15" fill="rgb(246,185,52)" fg:x="165" fg:w="4"/><text x="42.2347%" y="111.50"></text></g><g><title>__pthread_join (4 samples, 1.02%)</title><rect x="41.9847%" y="85" width="1.0178%" height="15" fill="rgb(252,136,11)" fg:x="165" fg:w="4"/><text x="42.2347%" y="95.50"></text></g><g><title>_pthread_detach (3 samples, 0.76%)</title><rect x="42.2392%" y="69" width="0.7634%" height="15" fill="rgb(219,138,53)" fg:x="166" fg:w="3"/><text x="42.4892%" y="79.50"></text></g><g><title>_mig_get_special_reply_port (3 samples, 0.76%)</title><rect x="42.2392%" y="53" width="0.7634%" height="15" fill="rgb(211,51,23)" fg:x="166" fg:w="3"/><text x="42.4892%" y="63.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (159 samples, 40.46%)</title><rect x="2.7990%" y="453" width="40.4580%" height="15" fill="rgb(247,221,28)" fg:x="11" fg:w="159"/><text x="3.0490%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::cal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (159 samples, 40.46%)</title><rect x="2.7990%" y="437" width="40.4580%" height="15" fill="rgb(251,222,45)" fg:x="11" fg:w="159"/><text x="3.0490%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::cal..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (159 samples, 40.46%)</title><rect x="2.7990%" y="421" width="40.4580%" height="15" fill="rgb(217,162,53)" fg:x="11" fg:w="159"/><text x="3.0490%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (159 samples, 40.46%)</title><rect x="2.7990%" y="405" width="40.4580%" height="15" fill="rgb(229,93,14)" fg:x="11" fg:w="159"/><text x="3.0490%" y="415.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (159 samples, 40.46%)</title><rect x="2.7990%" y="389" width="40.4580%" height="15" fill="rgb(209,67,49)" fg:x="11" fg:w="159"/><text x="3.0490%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (159 samples, 40.46%)</title><rect x="2.7990%" y="373" width="40.4580%" height="15" fill="rgb(213,87,29)" fg:x="11" fg:w="159"/><text x="3.0490%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (159 samples, 40.46%)</title><rect x="2.7990%" y="357" width="40.4580%" height="15" fill="rgb(205,151,52)" fg:x="11" fg:w="159"/><text x="3.0490%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (159 samples, 40.46%)</title><rect x="2.7990%" y="341" width="40.4580%" height="15" fill="rgb(253,215,39)" fg:x="11" fg:w="159"/><text x="3.0490%" y="351.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::funct..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (159 samples, 40.46%)</title><rect x="2.7990%" y="325" width="40.4580%" height="15" fill="rgb(221,220,41)" fg:x="11" fg:w="159"/><text x="3.0490%" y="335.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (159 samples, 40.46%)</title><rect x="2.7990%" y="309" width="40.4580%" height="15" fill="rgb(218,133,21)" fg:x="11" fg:w="159"/><text x="3.0490%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>torpedo::level::level_loop::{{closure}} (159 samples, 40.46%)</title><rect x="2.7990%" y="293" width="40.4580%" height="15" fill="rgb(221,193,43)" fg:x="11" fg:w="159"/><text x="3.0490%" y="303.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (159 samples, 40.46%)</title><rect x="2.7990%" y="277" width="40.4580%" height="15" fill="rgb(240,128,52)" fg:x="11" fg:w="159"/><text x="3.0490%" y="287.50">torpedo::physics::update</text></g><g><title>torpedo::physics::make_octree (38 samples, 9.67%)</title><rect x="33.5878%" y="261" width="9.6692%" height="15" fill="rgb(253,114,12)" fg:x="132" fg:w="38"/><text x="33.8378%" y="271.50">torpedo::physi..</text></g><g><title>torpedo::math::BoundingBox::check_collision (1 samples, 0.25%)</title><rect x="43.0025%" y="245" width="0.2545%" height="15" fill="rgb(215,223,47)" fg:x="169" fg:w="1"/><text x="43.2525%" y="255.50"></text></g><g><title>raylib::core::collision::&lt;impl raylib::core::math::BoundingBox&gt;::check_collision_boxes (1 samples, 0.25%)</title><rect x="43.0025%" y="229" width="0.2545%" height="15" fill="rgb(248,225,23)" fg:x="169" fg:w="1"/><text x="43.2525%" y="239.50"></text></g><g><title>6405173248 (217 samples, 55.22%)</title><rect x="2.7990%" y="501" width="55.2163%" height="15" fill="rgb(250,108,0)" fg:x="11" fg:w="217"/><text x="3.0490%" y="511.50">6405173248</text></g><g><title>__pthread_deallocate (217 samples, 55.22%)</title><rect x="2.7990%" y="485" width="55.2163%" height="15" fill="rgb(228,208,7)" fg:x="11" fg:w="217"/><text x="3.0490%" y="495.50">__pthread_deallocate</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (217 samples, 55.22%)</title><rect x="2.7990%" y="469" width="55.2163%" height="15" fill="rgb(244,45,10)" fg:x="11" fg:w="217"/><text x="3.0490%" y="479.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (58 samples, 14.76%)</title><rect x="43.2570%" y="453" width="14.7583%" height="15" fill="rgb(207,125,25)" fg:x="170" fg:w="58"/><text x="43.5070%" y="463.50">core::ptr::drop_in_plac..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (58 samples, 14.76%)</title><rect x="43.2570%" y="437" width="14.7583%" height="15" fill="rgb(210,195,18)" fg:x="170" fg:w="58"/><text x="43.5070%" y="447.50">&lt;std::sys::pal::unix::s..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (58 samples, 14.76%)</title><rect x="43.2570%" y="421" width="14.7583%" height="15" fill="rgb(249,80,12)" fg:x="170" fg:w="58"/><text x="43.5070%" y="431.50">std::sys::pal::unix::st..</text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.25%)</title><rect x="58.2697%" y="261" width="0.2545%" height="15" fill="rgb(221,65,9)" fg:x="229" fg:w="1"/><text x="58.5197%" y="271.50"></text></g><g><title>torpedo::arena::Arena::unlock (1 samples, 0.25%)</title><rect x="58.2697%" y="245" width="0.2545%" height="15" fill="rgb(235,49,36)" fg:x="229" fg:w="1"/><text x="58.5197%" y="255.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.25%)</title><rect x="58.2697%" y="229" width="0.2545%" height="15" fill="rgb(225,32,20)" fg:x="229" fg:w="1"/><text x="58.5197%" y="239.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.25%)</title><rect x="58.2697%" y="213" width="0.2545%" height="15" fill="rgb(215,141,46)" fg:x="229" fg:w="1"/><text x="58.5197%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt; (1 samples, 0.25%)</title><rect x="58.5242%" y="245" width="0.2545%" height="15" fill="rgb(250,160,47)" fg:x="230" fg:w="1"/><text x="58.7742%" y="255.50"></text></g><g><title> 8]&gt; (1 samples, 0.25%)</title><rect x="58.5242%" y="229" width="0.2545%" height="15" fill="rgb(216,222,40)" fg:x="230" fg:w="1"/><text x="58.7742%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.25%)</title><rect x="58.5242%" y="213" width="0.2545%" height="15" fill="rgb(234,217,39)" fg:x="230" fg:w="1"/><text x="58.7742%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.25%)</title><rect x="58.5242%" y="197" width="0.2545%" height="15" fill="rgb(207,178,40)" fg:x="230" fg:w="1"/><text x="58.7742%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="58.5242%" y="181" width="0.2545%" height="15" fill="rgb(221,136,13)" fg:x="230" fg:w="1"/><text x="58.7742%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="58.2697%" y="453" width="0.7634%" height="15" fill="rgb(249,199,10)" fg:x="229" fg:w="3"/><text x="58.5197%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="58.2697%" y="437" width="0.7634%" height="15" fill="rgb(249,222,13)" fg:x="229" fg:w="3"/><text x="58.5197%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.76%)</title><rect x="58.2697%" y="421" width="0.7634%" height="15" fill="rgb(244,185,38)" fg:x="229" fg:w="3"/><text x="58.5197%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 0.76%)</title><rect x="58.2697%" y="405" width="0.7634%" height="15" fill="rgb(236,202,9)" fg:x="229" fg:w="3"/><text x="58.5197%" y="415.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.76%)</title><rect x="58.2697%" y="389" width="0.7634%" height="15" fill="rgb(250,229,37)" fg:x="229" fg:w="3"/><text x="58.5197%" y="399.50"></text></g><g><title>std::panicking::try (3 samples, 0.76%)</title><rect x="58.2697%" y="373" width="0.7634%" height="15" fill="rgb(206,174,23)" fg:x="229" fg:w="3"/><text x="58.5197%" y="383.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.76%)</title><rect x="58.2697%" y="357" width="0.7634%" height="15" fill="rgb(211,33,43)" fg:x="229" fg:w="3"/><text x="58.5197%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.76%)</title><rect x="58.2697%" y="341" width="0.7634%" height="15" fill="rgb(245,58,50)" fg:x="229" fg:w="3"/><text x="58.5197%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3 samples, 0.76%)</title><rect x="58.2697%" y="325" width="0.7634%" height="15" fill="rgb(244,68,36)" fg:x="229" fg:w="3"/><text x="58.5197%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.76%)</title><rect x="58.2697%" y="309" width="0.7634%" height="15" fill="rgb(232,229,15)" fg:x="229" fg:w="3"/><text x="58.5197%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (3 samples, 0.76%)</title><rect x="58.2697%" y="293" width="0.7634%" height="15" fill="rgb(254,30,23)" fg:x="229" fg:w="3"/><text x="58.5197%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (3 samples, 0.76%)</title><rect x="58.2697%" y="277" width="0.7634%" height="15" fill="rgb(235,160,14)" fg:x="229" fg:w="3"/><text x="58.5197%" y="287.50"></text></g><g><title>torpedo::physics::make_octree (2 samples, 0.51%)</title><rect x="58.5242%" y="261" width="0.5089%" height="15" fill="rgb(212,155,44)" fg:x="230" fg:w="2"/><text x="58.7742%" y="271.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.25%)</title><rect x="58.7786%" y="245" width="0.2545%" height="15" fill="rgb(226,2,50)" fg:x="231" fg:w="1"/><text x="59.0286%" y="255.50"></text></g><g><title>torpedo::arena::Arena::queue_destroy (1 samples, 0.25%)</title><rect x="58.7786%" y="229" width="0.2545%" height="15" fill="rgb(234,177,6)" fg:x="231" fg:w="1"/><text x="59.0286%" y="239.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.25%)</title><rect x="58.7786%" y="213" width="0.2545%" height="15" fill="rgb(217,24,9)" fg:x="231" fg:w="1"/><text x="59.0286%" y="223.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (1 samples, 0.25%)</title><rect x="58.7786%" y="197" width="0.2545%" height="15" fill="rgb(220,13,46)" fg:x="231" fg:w="1"/><text x="59.0286%" y="207.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (1 samples, 0.25%)</title><rect x="58.7786%" y="181" width="0.2545%" height="15" fill="rgb(239,221,27)" fg:x="231" fg:w="1"/><text x="59.0286%" y="191.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.25%)</title><rect x="58.7786%" y="165" width="0.2545%" height="15" fill="rgb(222,198,25)" fg:x="231" fg:w="1"/><text x="59.0286%" y="175.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.25%)</title><rect x="58.7786%" y="149" width="0.2545%" height="15" fill="rgb(211,99,13)" fg:x="231" fg:w="1"/><text x="59.0286%" y="159.50"></text></g><g><title>6407319552 (5 samples, 1.27%)</title><rect x="58.0153%" y="501" width="1.2723%" height="15" fill="rgb(232,111,31)" fg:x="228" fg:w="5"/><text x="58.2653%" y="511.50"></text></g><g><title>__pthread_deallocate (5 samples, 1.27%)</title><rect x="58.0153%" y="485" width="1.2723%" height="15" fill="rgb(245,82,37)" fg:x="228" fg:w="5"/><text x="58.2653%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 1.02%)</title><rect x="58.2697%" y="469" width="1.0178%" height="15" fill="rgb(227,149,46)" fg:x="229" fg:w="4"/><text x="58.5197%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (1 samples, 0.25%)</title><rect x="59.0331%" y="453" width="0.2545%" height="15" fill="rgb(218,36,50)" fg:x="232" fg:w="1"/><text x="59.2831%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="59.0331%" y="437" width="0.2545%" height="15" fill="rgb(226,80,48)" fg:x="232" fg:w="1"/><text x="59.2831%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (1 samples, 0.25%)</title><rect x="59.0331%" y="421" width="0.2545%" height="15" fill="rgb(238,224,15)" fg:x="232" fg:w="1"/><text x="59.2831%" y="431.50"></text></g><g><title>6409465856 (1 samples, 0.25%)</title><rect x="59.2875%" y="501" width="0.2545%" height="15" fill="rgb(241,136,10)" fg:x="233" fg:w="1"/><text x="59.5375%" y="511.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.25%)</title><rect x="59.2875%" y="485" width="0.2545%" height="15" fill="rgb(208,32,45)" fg:x="233" fg:w="1"/><text x="59.5375%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.25%)</title><rect x="59.2875%" y="469" width="0.2545%" height="15" fill="rgb(207,135,9)" fg:x="233" fg:w="1"/><text x="59.5375%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.25%)</title><rect x="59.2875%" y="453" width="0.2545%" height="15" fill="rgb(206,86,44)" fg:x="233" fg:w="1"/><text x="59.5375%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.25%)</title><rect x="59.2875%" y="437" width="0.2545%" height="15" fill="rgb(245,177,15)" fg:x="233" fg:w="1"/><text x="59.5375%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.25%)</title><rect x="59.2875%" y="421" width="0.2545%" height="15" fill="rgb(206,64,50)" fg:x="233" fg:w="1"/><text x="59.5375%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="60.3053%" y="453" width="0.2545%" height="15" fill="rgb(234,36,40)" fg:x="237" fg:w="1"/><text x="60.5553%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="60.3053%" y="437" width="0.2545%" height="15" fill="rgb(213,64,8)" fg:x="237" fg:w="1"/><text x="60.5553%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.25%)</title><rect x="60.3053%" y="421" width="0.2545%" height="15" fill="rgb(210,75,36)" fg:x="237" fg:w="1"/><text x="60.5553%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.25%)</title><rect x="60.3053%" y="405" width="0.2545%" height="15" fill="rgb(229,88,21)" fg:x="237" fg:w="1"/><text x="60.5553%" y="415.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.25%)</title><rect x="60.3053%" y="389" width="0.2545%" height="15" fill="rgb(252,204,47)" fg:x="237" fg:w="1"/><text x="60.5553%" y="399.50"></text></g><g><title>std::panicking::try (1 samples, 0.25%)</title><rect x="60.3053%" y="373" width="0.2545%" height="15" fill="rgb(208,77,27)" fg:x="237" fg:w="1"/><text x="60.5553%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.25%)</title><rect x="60.3053%" y="357" width="0.2545%" height="15" fill="rgb(221,76,26)" fg:x="237" fg:w="1"/><text x="60.5553%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="60.3053%" y="341" width="0.2545%" height="15" fill="rgb(225,139,18)" fg:x="237" fg:w="1"/><text x="60.5553%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.25%)</title><rect x="60.3053%" y="325" width="0.2545%" height="15" fill="rgb(230,137,11)" fg:x="237" fg:w="1"/><text x="60.5553%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.25%)</title><rect x="60.3053%" y="309" width="0.2545%" height="15" fill="rgb(212,28,1)" fg:x="237" fg:w="1"/><text x="60.5553%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (1 samples, 0.25%)</title><rect x="60.3053%" y="293" width="0.2545%" height="15" fill="rgb(248,164,17)" fg:x="237" fg:w="1"/><text x="60.5553%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.25%)</title><rect x="60.3053%" y="277" width="0.2545%" height="15" fill="rgb(222,171,42)" fg:x="237" fg:w="1"/><text x="60.5553%" y="287.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (1 samples, 0.25%)</title><rect x="60.3053%" y="261" width="0.2545%" height="15" fill="rgb(243,84,45)" fg:x="237" fg:w="1"/><text x="60.5553%" y="271.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.25%)</title><rect x="60.3053%" y="245" width="0.2545%" height="15" fill="rgb(252,49,23)" fg:x="237" fg:w="1"/><text x="60.5553%" y="255.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.25%)</title><rect x="60.3053%" y="229" width="0.2545%" height="15" fill="rgb(215,19,7)" fg:x="237" fg:w="1"/><text x="60.5553%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (2 samples, 0.51%)</title><rect x="60.5598%" y="453" width="0.5089%" height="15" fill="rgb(238,81,41)" fg:x="238" fg:w="2"/><text x="60.8098%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (2 samples, 0.51%)</title><rect x="60.5598%" y="437" width="0.5089%" height="15" fill="rgb(210,199,37)" fg:x="238" fg:w="2"/><text x="60.8098%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (2 samples, 0.51%)</title><rect x="60.5598%" y="421" width="0.5089%" height="15" fill="rgb(244,192,49)" fg:x="238" fg:w="2"/><text x="60.8098%" y="431.50"></text></g><g><title>6411759616 (7 samples, 1.78%)</title><rect x="59.5420%" y="501" width="1.7812%" height="15" fill="rgb(226,211,11)" fg:x="234" fg:w="7"/><text x="59.7920%" y="511.50">6..</text></g><g><title>__pthread_deallocate (5 samples, 1.27%)</title><rect x="60.0509%" y="485" width="1.2723%" height="15" fill="rgb(236,162,54)" fg:x="236" fg:w="5"/><text x="60.3009%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 1.02%)</title><rect x="60.3053%" y="469" width="1.0178%" height="15" fill="rgb(220,229,9)" fg:x="237" fg:w="4"/><text x="60.5553%" y="479.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.25%)</title><rect x="61.0687%" y="453" width="0.2545%" height="15" fill="rgb(250,87,22)" fg:x="240" fg:w="1"/><text x="61.3187%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.25%)</title><rect x="61.0687%" y="437" width="0.2545%" height="15" fill="rgb(239,43,17)" fg:x="240" fg:w="1"/><text x="61.3187%" y="447.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (1 samples, 0.25%)</title><rect x="61.0687%" y="421" width="0.2545%" height="15" fill="rgb(231,177,25)" fg:x="240" fg:w="1"/><text x="61.3187%" y="431.50"></text></g><g><title>_task_info (1 samples, 0.25%)</title><rect x="61.0687%" y="405" width="0.2545%" height="15" fill="rgb(219,179,1)" fg:x="240" fg:w="1"/><text x="61.3187%" y="415.50"></text></g><g><title>6414053376 (1 samples, 0.25%)</title><rect x="61.3232%" y="501" width="0.2545%" height="15" fill="rgb(238,219,53)" fg:x="241" fg:w="1"/><text x="61.5732%" y="511.50"></text></g><g><title>__pthread_deallocate (1 samples, 0.25%)</title><rect x="61.3232%" y="485" width="0.2545%" height="15" fill="rgb(232,167,36)" fg:x="241" fg:w="1"/><text x="61.5732%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.25%)</title><rect x="61.3232%" y="469" width="0.2545%" height="15" fill="rgb(244,19,51)" fg:x="241" fg:w="1"/><text x="61.5732%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="61.3232%" y="453" width="0.2545%" height="15" fill="rgb(224,6,22)" fg:x="241" fg:w="1"/><text x="61.5732%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="61.3232%" y="437" width="0.2545%" height="15" fill="rgb(224,145,5)" fg:x="241" fg:w="1"/><text x="61.5732%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.25%)</title><rect x="61.3232%" y="421" width="0.2545%" height="15" fill="rgb(234,130,49)" fg:x="241" fg:w="1"/><text x="61.5732%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.25%)</title><rect x="61.3232%" y="405" width="0.2545%" height="15" fill="rgb(254,6,2)" fg:x="241" fg:w="1"/><text x="61.5732%" y="415.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.25%)</title><rect x="61.3232%" y="389" width="0.2545%" height="15" fill="rgb(208,96,46)" fg:x="241" fg:w="1"/><text x="61.5732%" y="399.50"></text></g><g><title>std::panicking::try (1 samples, 0.25%)</title><rect x="61.3232%" y="373" width="0.2545%" height="15" fill="rgb(239,3,39)" fg:x="241" fg:w="1"/><text x="61.5732%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.25%)</title><rect x="61.3232%" y="357" width="0.2545%" height="15" fill="rgb(233,210,1)" fg:x="241" fg:w="1"/><text x="61.5732%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.25%)</title><rect x="61.3232%" y="341" width="0.2545%" height="15" fill="rgb(244,137,37)" fg:x="241" fg:w="1"/><text x="61.5732%" y="351.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.25%)</title><rect x="61.3232%" y="325" width="0.2545%" height="15" fill="rgb(240,136,2)" fg:x="241" fg:w="1"/><text x="61.5732%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.25%)</title><rect x="61.3232%" y="309" width="0.2545%" height="15" fill="rgb(239,18,37)" fg:x="241" fg:w="1"/><text x="61.5732%" y="319.50"></text></g><g><title>torpedo::physics::make_octree::{{closure}}::{{closure}} (1 samples, 0.25%)</title><rect x="61.3232%" y="293" width="0.2545%" height="15" fill="rgb(218,185,22)" fg:x="241" fg:w="1"/><text x="61.5732%" y="303.50"></text></g><g><title>torpedo::physics::make_octree (1 samples, 0.25%)</title><rect x="61.3232%" y="277" width="0.2545%" height="15" fill="rgb(225,218,4)" fg:x="241" fg:w="1"/><text x="61.5732%" y="287.50"></text></g><g><title>torpedo::arena::Arena::alloc (1 samples, 0.25%)</title><rect x="61.3232%" y="261" width="0.2545%" height="15" fill="rgb(230,182,32)" fg:x="241" fg:w="1"/><text x="61.5732%" y="271.50"></text></g><g><title>torpedo::arena::Arena::lock (1 samples, 0.25%)</title><rect x="61.3232%" y="245" width="0.2545%" height="15" fill="rgb(242,56,43)" fg:x="241" fg:w="1"/><text x="61.5732%" y="255.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.25%)</title><rect x="61.3232%" y="229" width="0.2545%" height="15" fill="rgb(233,99,24)" fg:x="241" fg:w="1"/><text x="61.5732%" y="239.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.25%)</title><rect x="61.3232%" y="213" width="0.2545%" height="15" fill="rgb(234,209,42)" fg:x="241" fg:w="1"/><text x="61.5732%" y="223.50"></text></g><g><title>_host_get_special_port (1 samples, 0.25%)</title><rect x="70.4835%" y="149" width="0.2545%" height="15" fill="rgb(227,7,12)" fg:x="277" fg:w="1"/><text x="70.7335%" y="159.50"></text></g><g><title>Unknown (8 samples, 2.04%)</title><rect x="69.2112%" y="165" width="2.0356%" height="15" fill="rgb(245,203,43)" fg:x="272" fg:w="8"/><text x="69.4612%" y="175.50">U..</text></g><g><title>_proc_udata_info (2 samples, 0.51%)</title><rect x="70.7379%" y="149" width="0.5089%" height="15" fill="rgb(238,205,33)" fg:x="278" fg:w="2"/><text x="70.9879%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 2.54%)</title><rect x="68.9567%" y="245" width="2.5445%" height="15" fill="rgb(231,56,7)" fg:x="271" fg:w="10"/><text x="69.2067%" y="255.50">co..</text></g><g><title>Unknown (10 samples, 2.54%)</title><rect x="68.9567%" y="229" width="2.5445%" height="15" fill="rgb(244,186,29)" fg:x="271" fg:w="10"/><text x="69.2067%" y="239.50">Un..</text></g><g><title>Unknown (10 samples, 2.54%)</title><rect x="68.9567%" y="213" width="2.5445%" height="15" fill="rgb(234,111,31)" fg:x="271" fg:w="10"/><text x="69.2067%" y="223.50">Un..</text></g><g><title>Unknown (10 samples, 2.54%)</title><rect x="68.9567%" y="197" width="2.5445%" height="15" fill="rgb(241,149,10)" fg:x="271" fg:w="10"/><text x="69.2067%" y="207.50">Un..</text></g><g><title>Unknown (10 samples, 2.54%)</title><rect x="68.9567%" y="181" width="2.5445%" height="15" fill="rgb(249,206,44)" fg:x="271" fg:w="10"/><text x="69.2067%" y="191.50">Un..</text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="71.2468%" y="165" width="0.2545%" height="15" fill="rgb(251,153,30)" fg:x="280" fg:w="1"/><text x="71.4968%" y="175.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="71.2468%" y="149" width="0.2545%" height="15" fill="rgb(239,152,38)" fg:x="280" fg:w="1"/><text x="71.4968%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="71.2468%" y="133" width="0.2545%" height="15" fill="rgb(249,139,47)" fg:x="280" fg:w="1"/><text x="71.4968%" y="143.50"></text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="78.3715%" y="117" width="0.2545%" height="15" fill="rgb(244,64,35)" fg:x="308" fg:w="1"/><text x="78.6215%" y="127.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="78.3715%" y="101" width="0.2545%" height="15" fill="rgb(216,46,15)" fg:x="308" fg:w="1"/><text x="78.6215%" y="111.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="78.3715%" y="85" width="0.2545%" height="15" fill="rgb(250,74,19)" fg:x="308" fg:w="1"/><text x="78.6215%" y="95.50"></text></g><g><title>Unknown (9 samples, 2.29%)</title><rect x="76.8448%" y="133" width="2.2901%" height="15" fill="rgb(249,42,33)" fg:x="302" fg:w="9"/><text x="77.0948%" y="143.50">U..</text></g><g><title>_proc_udata_info (2 samples, 0.51%)</title><rect x="78.6260%" y="117" width="0.5089%" height="15" fill="rgb(242,149,17)" fg:x="309" fg:w="2"/><text x="78.8760%" y="127.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.25%)</title><rect x="79.1349%" y="133" width="0.2545%" height="15" fill="rgb(244,29,21)" fg:x="311" fg:w="1"/><text x="79.3849%" y="143.50"></text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="79.3893%" y="133" width="0.2545%" height="15" fill="rgb(220,130,37)" fg:x="312" fg:w="1"/><text x="79.6393%" y="143.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="79.3893%" y="117" width="0.2545%" height="15" fill="rgb(211,67,2)" fg:x="312" fg:w="1"/><text x="79.6393%" y="127.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="79.3893%" y="101" width="0.2545%" height="15" fill="rgb(235,68,52)" fg:x="312" fg:w="1"/><text x="79.6393%" y="111.50"></text></g><g><title>Unknown (30 samples, 7.63%)</title><rect x="73.0280%" y="149" width="7.6336%" height="15" fill="rgb(246,142,3)" fg:x="287" fg:w="30"/><text x="73.2780%" y="159.50">Unknown</text></g><g><title>_proc_udata_info (4 samples, 1.02%)</title><rect x="79.6438%" y="133" width="1.0178%" height="15" fill="rgb(241,25,7)" fg:x="313" fg:w="4"/><text x="79.8938%" y="143.50"></text></g><g><title>__kernelrpc_vm_map (3 samples, 0.76%)</title><rect x="80.6616%" y="149" width="0.7634%" height="15" fill="rgb(242,119,39)" fg:x="317" fg:w="3"/><text x="80.9116%" y="159.50"></text></g><g><title>__platform_memchr (1 samples, 0.25%)</title><rect x="81.4249%" y="149" width="0.2545%" height="15" fill="rgb(241,98,45)" fg:x="320" fg:w="1"/><text x="81.6749%" y="159.50"></text></g><g><title>_mach_reply_port (1 samples, 0.25%)</title><rect x="81.6794%" y="149" width="0.2545%" height="15" fill="rgb(254,28,30)" fg:x="321" fg:w="1"/><text x="81.9294%" y="159.50"></text></g><g><title>_thread_get_state (1 samples, 0.25%)</title><rect x="81.6794%" y="133" width="0.2545%" height="15" fill="rgb(241,142,54)" fg:x="321" fg:w="1"/><text x="81.9294%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="81.6794%" y="117" width="0.2545%" height="15" fill="rgb(222,85,15)" fg:x="321" fg:w="1"/><text x="81.9294%" y="127.50"></text></g><g><title>_mig_get_reply_port (1 samples, 0.25%)</title><rect x="81.9338%" y="149" width="0.2545%" height="15" fill="rgb(210,85,47)" fg:x="322" fg:w="1"/><text x="82.1838%" y="159.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="82.1883%" y="149" width="0.2545%" height="15" fill="rgb(224,206,25)" fg:x="323" fg:w="1"/><text x="82.4383%" y="159.50"></text></g><g><title>Unknown (46 samples, 11.70%)</title><rect x="71.5013%" y="165" width="11.7048%" height="15" fill="rgb(243,201,19)" fg:x="281" fg:w="46"/><text x="71.7513%" y="175.50">Unknown</text></g><g><title>_task_info (3 samples, 0.76%)</title><rect x="82.4427%" y="149" width="0.7634%" height="15" fill="rgb(236,59,4)" fg:x="324" fg:w="3"/><text x="82.6927%" y="159.50"></text></g><g><title>raylib::core::RaylibBuilder::build (47 samples, 11.96%)</title><rect x="71.5013%" y="245" width="11.9593%" height="15" fill="rgb(254,179,45)" fg:x="281" fg:w="47"/><text x="71.7513%" y="255.50">raylib::core::Rayl..</text></g><g><title>raylib::core::init_window (47 samples, 11.96%)</title><rect x="71.5013%" y="229" width="11.9593%" height="15" fill="rgb(226,14,10)" fg:x="281" fg:w="47"/><text x="71.7513%" y="239.50">raylib::core::init..</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="71.5013%" y="213" width="11.9593%" height="15" fill="rgb(244,27,41)" fg:x="281" fg:w="47"/><text x="71.7513%" y="223.50">Unknown</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="71.5013%" y="197" width="11.9593%" height="15" fill="rgb(235,35,32)" fg:x="281" fg:w="47"/><text x="71.7513%" y="207.50">Unknown</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="71.5013%" y="181" width="11.9593%" height="15" fill="rgb(218,68,31)" fg:x="281" fg:w="47"/><text x="71.7513%" y="191.50">Unknown</text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="83.2061%" y="165" width="0.2545%" height="15" fill="rgb(207,120,37)" fg:x="327" fg:w="1"/><text x="83.4561%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.25%)</title><rect x="83.4606%" y="229" width="0.2545%" height="15" fill="rgb(227,98,0)" fg:x="328" fg:w="1"/><text x="83.7106%" y="239.50"></text></g><g><title>torpedo::make_test_level (1 samples, 0.25%)</title><rect x="83.4606%" y="213" width="0.2545%" height="15" fill="rgb(207,7,3)" fg:x="328" fg:w="1"/><text x="83.7106%" y="223.50"></text></g><g><title>torpedo::level::default_setup (1 samples, 0.25%)</title><rect x="83.4606%" y="197" width="0.2545%" height="15" fill="rgb(206,98,19)" fg:x="328" fg:w="1"/><text x="83.7106%" y="207.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_torus (1 samples, 0.25%)</title><rect x="83.4606%" y="181" width="0.2545%" height="15" fill="rgb(217,5,26)" fg:x="328" fg:w="1"/><text x="83.7106%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="165" width="0.2545%" height="15" fill="rgb(235,190,38)" fg:x="328" fg:w="1"/><text x="83.7106%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="149" width="0.2545%" height="15" fill="rgb(247,86,24)" fg:x="328" fg:w="1"/><text x="83.7106%" y="159.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="133" width="0.2545%" height="15" fill="rgb(205,101,16)" fg:x="328" fg:w="1"/><text x="83.7106%" y="143.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="117" width="0.2545%" height="15" fill="rgb(246,168,33)" fg:x="328" fg:w="1"/><text x="83.7106%" y="127.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="101" width="0.2545%" height="15" fill="rgb(231,114,1)" fg:x="328" fg:w="1"/><text x="83.7106%" y="111.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="83.4606%" y="85" width="0.2545%" height="15" fill="rgb(207,184,53)" fg:x="328" fg:w="1"/><text x="83.7106%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.25%)</title><rect x="83.7150%" y="229" width="0.2545%" height="15" fill="rgb(224,95,51)" fg:x="329" fg:w="1"/><text x="83.9650%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.25%)</title><rect x="83.7150%" y="213" width="0.2545%" height="15" fill="rgb(212,188,45)" fg:x="329" fg:w="1"/><text x="83.9650%" y="223.50"></text></g><g><title>Unknown (1 samples, 0.25%)</title><rect x="89.8219%" y="149" width="0.2545%" height="15" fill="rgb(223,154,38)" fg:x="353" fg:w="1"/><text x="90.0719%" y="159.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (2 samples, 0.51%)</title><rect x="90.0763%" y="149" width="0.5089%" height="15" fill="rgb(251,22,52)" fg:x="354" fg:w="2"/><text x="90.3263%" y="159.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.25%)</title><rect x="90.5852%" y="149" width="0.2545%" height="15" fill="rgb(229,209,22)" fg:x="356" fg:w="1"/><text x="90.8352%" y="159.50"></text></g><g><title>_csr_check (1 samples, 0.25%)</title><rect x="90.8397%" y="149" width="0.2545%" height="15" fill="rgb(234,138,34)" fg:x="357" fg:w="1"/><text x="91.0897%" y="159.50"></text></g><g><title>_mach_msg_destroy (1 samples, 0.25%)</title><rect x="90.8397%" y="133" width="0.2545%" height="15" fill="rgb(212,95,11)" fg:x="357" fg:w="1"/><text x="91.0897%" y="143.50"></text></g><g><title>_mach_get_times (5 samples, 1.27%)</title><rect x="91.0941%" y="149" width="1.2723%" height="15" fill="rgb(240,179,47)" fg:x="358" fg:w="5"/><text x="91.3441%" y="159.50"></text></g><g><title>_mach_get_times (1 samples, 0.25%)</title><rect x="92.1120%" y="133" width="0.2545%" height="15" fill="rgb(240,163,11)" fg:x="362" fg:w="1"/><text x="92.3620%" y="143.50"></text></g><g><title>_mach_reply_port (3 samples, 0.76%)</title><rect x="92.3664%" y="149" width="0.7634%" height="15" fill="rgb(236,37,12)" fg:x="363" fg:w="3"/><text x="92.6164%" y="159.50"></text></g><g><title>_thread_get_state (3 samples, 0.76%)</title><rect x="92.3664%" y="133" width="0.7634%" height="15" fill="rgb(232,164,16)" fg:x="363" fg:w="3"/><text x="92.6164%" y="143.50"></text></g><g><title>_proc_udata_info (3 samples, 0.76%)</title><rect x="92.3664%" y="117" width="0.7634%" height="15" fill="rgb(244,205,15)" fg:x="363" fg:w="3"/><text x="92.6164%" y="127.50"></text></g><g><title>_proc_udata_info (8 samples, 2.04%)</title><rect x="93.1298%" y="149" width="2.0356%" height="15" fill="rgb(223,117,47)" fg:x="366" fg:w="8"/><text x="93.3798%" y="159.50">_..</text></g><g><title>_pthread_mutex_init (1 samples, 0.25%)</title><rect x="95.1654%" y="149" width="0.2545%" height="15" fill="rgb(244,107,35)" fg:x="374" fg:w="1"/><text x="95.4154%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (47 samples, 11.96%)</title><rect x="83.9695%" y="229" width="11.9593%" height="15" fill="rgb(205,140,8)" fg:x="330" fg:w="47"/><text x="84.2195%" y="239.50">core::ptr::drop_in..</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="83.9695%" y="213" width="11.9593%" height="15" fill="rgb(228,84,46)" fg:x="330" fg:w="47"/><text x="84.2195%" y="223.50">Unknown</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="83.9695%" y="197" width="11.9593%" height="15" fill="rgb(254,188,9)" fg:x="330" fg:w="47"/><text x="84.2195%" y="207.50">Unknown</text></g><g><title>Unknown (47 samples, 11.96%)</title><rect x="83.9695%" y="181" width="11.9593%" height="15" fill="rgb(206,112,54)" fg:x="330" fg:w="47"/><text x="84.2195%" y="191.50">Unknown</text></g><g><title>Unknown (46 samples, 11.70%)</title><rect x="84.2239%" y="165" width="11.7048%" height="15" fill="rgb(216,84,49)" fg:x="331" fg:w="46"/><text x="84.4739%" y="175.50">Unknown</text></g><g><title>_task_info (2 samples, 0.51%)</title><rect x="95.4198%" y="149" width="0.5089%" height="15" fill="rgb(214,194,35)" fg:x="375" fg:w="2"/><text x="95.6698%" y="159.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (2 samples, 0.51%)</title><rect x="95.9288%" y="229" width="0.5089%" height="15" fill="rgb(249,28,3)" fg:x="377" fg:w="2"/><text x="96.1788%" y="239.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (2 samples, 0.51%)</title><rect x="95.9288%" y="213" width="0.5089%" height="15" fill="rgb(222,56,52)" fg:x="377" fg:w="2"/><text x="96.1788%" y="223.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::join (2 samples, 0.51%)</title><rect x="95.9288%" y="197" width="0.5089%" height="15" fill="rgb(245,217,50)" fg:x="377" fg:w="2"/><text x="96.1788%" y="207.50"></text></g><g><title>__pthread_join (2 samples, 0.51%)</title><rect x="95.9288%" y="181" width="0.5089%" height="15" fill="rgb(213,201,24)" fg:x="377" fg:w="2"/><text x="96.1788%" y="191.50"></text></g><g><title>__pthread_mutex_global_init (3 samples, 0.76%)</title><rect x="96.6921%" y="213" width="0.7634%" height="15" fill="rgb(248,116,28)" fg:x="380" fg:w="3"/><text x="96.9421%" y="223.50"></text></g><g><title>_pthread_set_qos_class_self_np (3 samples, 0.76%)</title><rect x="96.6921%" y="197" width="0.7634%" height="15" fill="rgb(219,72,43)" fg:x="380" fg:w="3"/><text x="96.9421%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (2 samples, 0.51%)</title><rect x="97.4555%" y="213" width="0.5089%" height="15" fill="rgb(209,138,14)" fg:x="383" fg:w="2"/><text x="97.7055%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (2 samples, 0.51%)</title><rect x="97.4555%" y="197" width="0.5089%" height="15" fill="rgb(222,18,33)" fg:x="383" fg:w="2"/><text x="97.7055%" y="207.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.51%)</title><rect x="97.4555%" y="181" width="0.5089%" height="15" fill="rgb(213,199,7)" fg:x="383" fg:w="2"/><text x="97.7055%" y="191.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (2 samples, 0.51%)</title><rect x="97.4555%" y="165" width="0.5089%" height="15" fill="rgb(250,110,10)" fg:x="383" fg:w="2"/><text x="97.7055%" y="175.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.25%)</title><rect x="97.7099%" y="149" width="0.2545%" height="15" fill="rgb(248,123,6)" fg:x="384" fg:w="1"/><text x="97.9599%" y="159.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.25%)</title><rect x="97.7099%" y="133" width="0.2545%" height="15" fill="rgb(206,91,31)" fg:x="384" fg:w="1"/><text x="97.9599%" y="143.50"></text></g><g><title>raylib::core::drawing::RaylibMode3DExt::begin_mode3D (1 samples, 0.25%)</title><rect x="97.9644%" y="213" width="0.2545%" height="15" fill="rgb(211,154,13)" fg:x="385" fg:w="1"/><text x="98.2144%" y="223.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (1 samples, 0.25%)</title><rect x="98.2188%" y="213" width="0.2545%" height="15" fill="rgb(225,148,7)" fg:x="386" fg:w="1"/><text x="98.4688%" y="223.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (1 samples, 0.25%)</title><rect x="98.2188%" y="197" width="0.2545%" height="15" fill="rgb(220,160,43)" fg:x="386" fg:w="1"/><text x="98.4688%" y="207.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::try_lock (1 samples, 0.25%)</title><rect x="98.2188%" y="181" width="0.2545%" height="15" fill="rgb(213,52,39)" fg:x="386" fg:w="1"/><text x="98.4688%" y="191.50"></text></g><g><title>_main (121 samples, 30.79%)</title><rect x="68.9567%" y="485" width="30.7888%" height="15" fill="rgb(243,137,7)" fg:x="271" fg:w="121"/><text x="69.2067%" y="495.50">_main</text></g><g><title>std::rt::lang_start_internal (121 samples, 30.79%)</title><rect x="68.9567%" y="469" width="30.7888%" height="15" fill="rgb(230,79,13)" fg:x="271" fg:w="121"/><text x="69.2067%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (121 samples, 30.79%)</title><rect x="68.9567%" y="453" width="30.7888%" height="15" fill="rgb(247,105,23)" fg:x="271" fg:w="121"/><text x="69.2067%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (121 samples, 30.79%)</title><rect x="68.9567%" y="437" width="30.7888%" height="15" fill="rgb(223,179,41)" fg:x="271" fg:w="121"/><text x="69.2067%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (121 samples, 30.79%)</title><rect x="68.9567%" y="421" width="30.7888%" height="15" fill="rgb(218,9,34)" fg:x="271" fg:w="121"/><text x="69.2067%" y="431.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (121 samples, 30.79%)</title><rect x="68.9567%" y="405" width="30.7888%" height="15" fill="rgb(222,106,8)" fg:x="271" fg:w="121"/><text x="69.2067%" y="415.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (121 samples, 30.79%)</title><rect x="68.9567%" y="389" width="30.7888%" height="15" fill="rgb(211,220,0)" fg:x="271" fg:w="121"/><text x="69.2067%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (121 samples, 30.79%)</title><rect x="68.9567%" y="373" width="30.7888%" height="15" fill="rgb(229,52,16)" fg:x="271" fg:w="121"/><text x="69.2067%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (121 samples, 30.79%)</title><rect x="68.9567%" y="357" width="30.7888%" height="15" fill="rgb(212,155,18)" fg:x="271" fg:w="121"/><text x="69.2067%" y="367.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (121 samples, 30.79%)</title><rect x="68.9567%" y="341" width="30.7888%" height="15" fill="rgb(242,21,14)" fg:x="271" fg:w="121"/><text x="69.2067%" y="351.50">core::ops::function::impls::&lt;impl core::ops::funct..</text></g><g><title>std::rt::lang_start::{{closure}} (121 samples, 30.79%)</title><rect x="68.9567%" y="325" width="30.7888%" height="15" fill="rgb(222,19,48)" fg:x="271" fg:w="121"/><text x="69.2067%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (121 samples, 30.79%)</title><rect x="68.9567%" y="309" width="30.7888%" height="15" fill="rgb(232,45,27)" fg:x="271" fg:w="121"/><text x="69.2067%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (121 samples, 30.79%)</title><rect x="68.9567%" y="293" width="30.7888%" height="15" fill="rgb(249,103,42)" fg:x="271" fg:w="121"/><text x="69.2067%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (121 samples, 30.79%)</title><rect x="68.9567%" y="277" width="30.7888%" height="15" fill="rgb(246,81,33)" fg:x="271" fg:w="121"/><text x="69.2067%" y="287.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (121 samples, 30.79%)</title><rect x="68.9567%" y="261" width="30.7888%" height="15" fill="rgb(252,33,42)" fg:x="271" fg:w="121"/><text x="69.2067%" y="271.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (64 samples, 16.28%)</title><rect x="83.4606%" y="245" width="16.2850%" height="15" fill="rgb(209,212,41)" fg:x="328" fg:w="64"/><text x="83.7106%" y="255.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (13 samples, 3.31%)</title><rect x="96.4377%" y="229" width="3.3079%" height="15" fill="rgb(207,154,6)" fg:x="379" fg:w="13"/><text x="96.6877%" y="239.50">tor..</text></g><g><title>torpedo::renderer::render_object (5 samples, 1.27%)</title><rect x="98.4733%" y="213" width="1.2723%" height="15" fill="rgb(223,64,47)" fg:x="387" fg:w="5"/><text x="98.7233%" y="223.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (4 samples, 1.02%)</title><rect x="98.7277%" y="197" width="1.0178%" height="15" fill="rgb(211,161,38)" fg:x="388" fg:w="4"/><text x="98.9777%" y="207.50"></text></g><g><title>Unknown (4 samples, 1.02%)</title><rect x="98.7277%" y="181" width="1.0178%" height="15" fill="rgb(219,138,40)" fg:x="388" fg:w="4"/><text x="98.9777%" y="191.50"></text></g><g><title>Unknown (4 samples, 1.02%)</title><rect x="98.7277%" y="165" width="1.0178%" height="15" fill="rgb(241,228,46)" fg:x="388" fg:w="4"/><text x="98.9777%" y="175.50"></text></g><g><title>Unknown (3 samples, 0.76%)</title><rect x="98.9822%" y="149" width="0.7634%" height="15" fill="rgb(223,209,38)" fg:x="389" fg:w="3"/><text x="99.2322%" y="159.50"></text></g><g><title>Unknown (3 samples, 0.76%)</title><rect x="98.9822%" y="133" width="0.7634%" height="15" fill="rgb(236,164,45)" fg:x="389" fg:w="3"/><text x="99.2322%" y="143.50"></text></g><g><title>_proc_udata_info (1 samples, 0.25%)</title><rect x="99.4911%" y="117" width="0.2545%" height="15" fill="rgb(231,15,5)" fg:x="391" fg:w="1"/><text x="99.7411%" y="127.50"></text></g><g><title>all (393 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(252,35,15)" fg:x="0" fg:w="393"/><text x="0.2500%" y="527.50"></text></g><g><title>8302233664 (151 samples, 38.42%)</title><rect x="61.5776%" y="501" width="38.4224%" height="15" fill="rgb(248,181,18)" fg:x="242" fg:w="151"/><text x="61.8276%" y="511.50">8302233664</text></g><g><title>_pthread_atfork (1 samples, 0.25%)</title><rect x="99.7455%" y="485" width="0.2545%" height="15" fill="rgb(233,39,42)" fg:x="392" fg:w="1"/><text x="99.9955%" y="495.50"></text></g><g><title>_pthread_atfork (1 samples, 0.25%)</title><rect x="99.7455%" y="469" width="0.2545%" height="15" fill="rgb(238,110,33)" fg:x="392" fg:w="1"/><text x="99.9955%" y="479.50"></text></g></svg></svg>