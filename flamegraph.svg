<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="2140"><g><title>_pthread_mach_thread_np (3 samples, 0.14%)</title><rect x="0.0467%" y="565" width="0.1402%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2967%" y="575.50"></text></g><g><title>_mach_reply_port (2 samples, 0.09%)</title><rect x="0.0935%" y="549" width="0.0935%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.3435%" y="559.50"></text></g><g><title>_thread_get_state (2 samples, 0.09%)</title><rect x="0.0935%" y="533" width="0.0935%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.3435%" y="543.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="0.0935%" y="517" width="0.0935%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.3435%" y="527.50"></text></g><g><title>6156595200 (5 samples, 0.23%)</title><rect x="0.0000%" y="581" width="0.2336%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>_pthread_mutexattr_init (1 samples, 0.05%)</title><rect x="0.1869%" y="565" width="0.0467%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.4369%" y="575.50"></text></g><g><title>_getuid (1 samples, 0.05%)</title><rect x="0.1869%" y="549" width="0.0467%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.4369%" y="559.50"></text></g><g><title>_mach_reply_port (9 samples, 0.42%)</title><rect x="0.3271%" y="549" width="0.4206%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="9"/><text x="0.5771%" y="559.50"></text></g><g><title>_thread_get_state (9 samples, 0.42%)</title><rect x="0.3271%" y="533" width="0.4206%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="9"/><text x="0.5771%" y="543.50"></text></g><g><title>_proc_udata_info (9 samples, 0.42%)</title><rect x="0.3271%" y="517" width="0.4206%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="9"/><text x="0.5771%" y="527.50"></text></g><g><title>_pthread_mach_thread_np (11 samples, 0.51%)</title><rect x="0.2804%" y="565" width="0.5140%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="11"/><text x="0.5304%" y="575.50"></text></g><g><title>_task_info (1 samples, 0.05%)</title><rect x="0.7477%" y="549" width="0.0467%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="1"/><text x="0.9977%" y="559.50"></text></g><g><title>_mach_reply_port (2 samples, 0.09%)</title><rect x="0.7944%" y="549" width="0.0935%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="2"/><text x="1.0444%" y="559.50"></text></g><g><title>_thread_get_state (2 samples, 0.09%)</title><rect x="0.7944%" y="533" width="0.0935%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="2"/><text x="1.0444%" y="543.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="0.7944%" y="517" width="0.0935%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="2"/><text x="1.0444%" y="527.50"></text></g><g><title>6157168640 (15 samples, 0.70%)</title><rect x="0.2336%" y="581" width="0.7009%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="15"/><text x="0.4836%" y="591.50"></text></g><g><title>_pthread_mutexattr_init (3 samples, 0.14%)</title><rect x="0.7944%" y="565" width="0.1402%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="3"/><text x="1.0444%" y="575.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="0.8879%" y="549" width="0.0467%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="1.1379%" y="559.50"></text></g><g><title>_mach_msg_destroy (1 samples, 0.05%)</title><rect x="1.0748%" y="549" width="0.0467%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="1"/><text x="1.3248%" y="559.50"></text></g><g><title>_proc_regionfilename (2 samples, 0.09%)</title><rect x="1.1215%" y="517" width="0.0935%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="2"/><text x="1.3715%" y="527.50"></text></g><g><title>_mach_reply_port (8 samples, 0.37%)</title><rect x="1.1215%" y="549" width="0.3738%" height="15" fill="rgb(249,33,26)" fg:x="24" fg:w="8"/><text x="1.3715%" y="559.50"></text></g><g><title>_thread_get_state (8 samples, 0.37%)</title><rect x="1.1215%" y="533" width="0.3738%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="8"/><text x="1.3715%" y="543.50"></text></g><g><title>_proc_udata_info (6 samples, 0.28%)</title><rect x="1.2150%" y="517" width="0.2804%" height="15" fill="rgb(221,5,38)" fg:x="26" fg:w="6"/><text x="1.4650%" y="527.50"></text></g><g><title>6157742080 (15 samples, 0.70%)</title><rect x="0.9346%" y="581" width="0.7009%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="15"/><text x="1.1846%" y="591.50"></text></g><g><title>__pthread_deallocate (15 samples, 0.70%)</title><rect x="0.9346%" y="565" width="0.7009%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="15"/><text x="1.1846%" y="575.50"></text></g><g><title>_mig_get_special_reply_port (3 samples, 0.14%)</title><rect x="1.4953%" y="549" width="0.1402%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="3"/><text x="1.7453%" y="559.50"></text></g><g><title>_mach_make_memory_entry_64 (1 samples, 0.05%)</title><rect x="1.6822%" y="549" width="0.0467%" height="15" fill="rgb(225,111,53)" fg:x="36" fg:w="1"/><text x="1.9322%" y="559.50"></text></g><g><title>_mach_reply_port (4 samples, 0.19%)</title><rect x="1.7290%" y="549" width="0.1869%" height="15" fill="rgb(238,160,17)" fg:x="37" fg:w="4"/><text x="1.9790%" y="559.50"></text></g><g><title>_thread_get_state (4 samples, 0.19%)</title><rect x="1.7290%" y="533" width="0.1869%" height="15" fill="rgb(214,148,48)" fg:x="37" fg:w="4"/><text x="1.9790%" y="543.50"></text></g><g><title>_proc_udata_info (4 samples, 0.19%)</title><rect x="1.7290%" y="517" width="0.1869%" height="15" fill="rgb(232,36,49)" fg:x="37" fg:w="4"/><text x="1.9790%" y="527.50"></text></g><g><title>6158315520 (7 samples, 0.33%)</title><rect x="1.6355%" y="581" width="0.3271%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="7"/><text x="1.8855%" y="591.50"></text></g><g><title>_pthread_mach_thread_np (7 samples, 0.33%)</title><rect x="1.6355%" y="565" width="0.3271%" height="15" fill="rgb(229,88,8)" fg:x="35" fg:w="7"/><text x="1.8855%" y="575.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="1.9159%" y="549" width="0.0467%" height="15" fill="rgb(213,181,19)" fg:x="41" fg:w="1"/><text x="2.1659%" y="559.50"></text></g><g><title>___commpage_gettimeofday_internal (1 samples, 0.05%)</title><rect x="2.1028%" y="549" width="0.0467%" height="15" fill="rgb(254,191,54)" fg:x="45" fg:w="1"/><text x="2.3528%" y="559.50"></text></g><g><title>__platform_memchr (1 samples, 0.05%)</title><rect x="2.1495%" y="549" width="0.0467%" height="15" fill="rgb(241,83,37)" fg:x="46" fg:w="1"/><text x="2.3995%" y="559.50"></text></g><g><title>6158888960 (9 samples, 0.42%)</title><rect x="1.9626%" y="581" width="0.4206%" height="15" fill="rgb(233,36,39)" fg:x="42" fg:w="9"/><text x="2.2126%" y="591.50"></text></g><g><title>_pthread_mach_thread_np (8 samples, 0.37%)</title><rect x="2.0093%" y="565" width="0.3738%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="8"/><text x="2.2593%" y="575.50"></text></g><g><title>_mach_reply_port (4 samples, 0.19%)</title><rect x="2.1963%" y="549" width="0.1869%" height="15" fill="rgb(245,192,40)" fg:x="47" fg:w="4"/><text x="2.4463%" y="559.50"></text></g><g><title>_thread_get_state (4 samples, 0.19%)</title><rect x="2.1963%" y="533" width="0.1869%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="4"/><text x="2.4463%" y="543.50"></text></g><g><title>_proc_udata_info (4 samples, 0.19%)</title><rect x="2.1963%" y="517" width="0.1869%" height="15" fill="rgb(232,182,51)" fg:x="47" fg:w="4"/><text x="2.4463%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="2.7103%" y="245" width="0.0467%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="1"/><text x="2.9603%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="2.7103%" y="229" width="0.0467%" height="15" fill="rgb(208,69,12)" fg:x="58" fg:w="1"/><text x="2.9603%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="2.7103%" y="213" width="0.0467%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="1"/><text x="2.9603%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.05%)</title><rect x="2.7103%" y="197" width="0.0467%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="1"/><text x="2.9603%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="2.7103%" y="181" width="0.0467%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="1"/><text x="2.9603%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="2.7103%" y="165" width="0.0467%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="1"/><text x="2.9603%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="2.7103%" y="149" width="0.0467%" height="15" fill="rgb(218,138,4)" fg:x="58" fg:w="1"/><text x="2.9603%" y="159.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.23%)</title><rect x="2.7103%" y="341" width="0.2336%" height="15" fill="rgb(250,191,14)" fg:x="58" fg:w="5"/><text x="2.9603%" y="351.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (5 samples, 0.23%)</title><rect x="2.7103%" y="325" width="0.2336%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="5"/><text x="2.9603%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.23%)</title><rect x="2.7103%" y="309" width="0.2336%" height="15" fill="rgb(206,27,48)" fg:x="58" fg:w="5"/><text x="2.9603%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.23%)</title><rect x="2.7103%" y="293" width="0.2336%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="5"/><text x="2.9603%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.23%)</title><rect x="2.7103%" y="277" width="0.2336%" height="15" fill="rgb(250,213,24)" fg:x="58" fg:w="5"/><text x="2.9603%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.23%)</title><rect x="2.7103%" y="261" width="0.2336%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="5"/><text x="2.9603%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.19%)</title><rect x="2.7570%" y="245" width="0.1869%" height="15" fill="rgb(231,138,38)" fg:x="59" fg:w="4"/><text x="3.0070%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.19%)</title><rect x="2.7570%" y="229" width="0.1869%" height="15" fill="rgb(231,145,46)" fg:x="59" fg:w="4"/><text x="3.0070%" y="239.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (4 samples, 0.19%)</title><rect x="2.9439%" y="341" width="0.1869%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="4"/><text x="3.1939%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.19%)</title><rect x="2.9439%" y="325" width="0.1869%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="4"/><text x="3.1939%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.19%)</title><rect x="2.9439%" y="309" width="0.1869%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="4"/><text x="3.1939%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.19%)</title><rect x="2.9439%" y="293" width="0.1869%" height="15" fill="rgb(209,12,38)" fg:x="63" fg:w="4"/><text x="3.1939%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.19%)</title><rect x="2.9439%" y="277" width="0.1869%" height="15" fill="rgb(227,1,9)" fg:x="63" fg:w="4"/><text x="3.1939%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.19%)</title><rect x="2.9439%" y="261" width="0.1869%" height="15" fill="rgb(248,47,43)" fg:x="63" fg:w="4"/><text x="3.1939%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.19%)</title><rect x="2.9439%" y="245" width="0.1869%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="4"/><text x="3.1939%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.05%)</title><rect x="3.1308%" y="341" width="0.0467%" height="15" fill="rgb(210,229,1)" fg:x="67" fg:w="1"/><text x="3.3808%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="3.1308%" y="325" width="0.0467%" height="15" fill="rgb(222,148,37)" fg:x="67" fg:w="1"/><text x="3.3808%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="3.1308%" y="309" width="0.0467%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="1"/><text x="3.3808%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="3.1308%" y="293" width="0.0467%" height="15" fill="rgb(247,98,35)" fg:x="67" fg:w="1"/><text x="3.3808%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="3.1308%" y="277" width="0.0467%" height="15" fill="rgb(247,138,52)" fg:x="67" fg:w="1"/><text x="3.3808%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.05%)</title><rect x="3.1308%" y="261" width="0.0467%" height="15" fill="rgb(213,79,30)" fg:x="67" fg:w="1"/><text x="3.3808%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="245" width="0.0467%" height="15" fill="rgb(246,177,23)" fg:x="67" fg:w="1"/><text x="3.3808%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;,core::slice::iter::Iter&lt;usize&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="229" width="0.0467%" height="15" fill="rgb(230,62,27)" fg:x="67" fg:w="1"/><text x="3.3808%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="213" width="0.0467%" height="15" fill="rgb(216,154,8)" fg:x="67" fg:w="1"/><text x="3.3808%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="197" width="0.0467%" height="15" fill="rgb(244,35,45)" fg:x="67" fg:w="1"/><text x="3.3808%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;[usize]&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="181" width="0.0467%" height="15" fill="rgb(251,115,12)" fg:x="67" fg:w="1"/><text x="3.3808%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="3.1308%" y="165" width="0.0467%" height="15" fill="rgb(240,54,50)" fg:x="67" fg:w="1"/><text x="3.3808%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;[usize],alloc::alloc::Global&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="149" width="0.0467%" height="15" fill="rgb(233,84,52)" fg:x="67" fg:w="1"/><text x="3.3808%" y="159.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="3.1308%" y="133" width="0.0467%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="1"/><text x="3.3808%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;[usize]&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1308%" y="117" width="0.0467%" height="15" fill="rgb(249,43,39)" fg:x="67" fg:w="1"/><text x="3.3808%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="3.1308%" y="101" width="0.0467%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="1"/><text x="3.3808%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.05%)</title><rect x="3.1308%" y="85" width="0.0467%" height="15" fill="rgb(236,212,23)" fg:x="67" fg:w="1"/><text x="3.3808%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.05%)</title><rect x="3.1308%" y="69" width="0.0467%" height="15" fill="rgb(242,79,21)" fg:x="67" fg:w="1"/><text x="3.3808%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.05%)</title><rect x="3.1308%" y="53" width="0.0467%" height="15" fill="rgb(211,96,35)" fg:x="67" fg:w="1"/><text x="3.3808%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.05%)</title><rect x="3.1308%" y="37" width="0.0467%" height="15" fill="rgb(253,215,40)" fg:x="67" fg:w="1"/><text x="3.3808%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1776%" y="341" width="0.0467%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="3.4276%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1776%" y="325" width="0.0467%" height="15" fill="rgb(208,190,38)" fg:x="68" fg:w="1"/><text x="3.4276%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="3.1776%" y="309" width="0.0467%" height="15" fill="rgb(235,213,38)" fg:x="68" fg:w="1"/><text x="3.4276%" y="319.50"></text></g><g><title>torpedo::physics::update (1 samples, 0.05%)</title><rect x="3.1776%" y="293" width="0.0467%" height="15" fill="rgb(237,122,38)" fg:x="68" fg:w="1"/><text x="3.4276%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1776%" y="277" width="0.0467%" height="15" fill="rgb(244,218,35)" fg:x="68" fg:w="1"/><text x="3.4276%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.05%)</title><rect x="3.1776%" y="261" width="0.0467%" height="15" fill="rgb(240,68,47)" fg:x="68" fg:w="1"/><text x="3.4276%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="3.1776%" y="245" width="0.0467%" height="15" fill="rgb(210,16,53)" fg:x="68" fg:w="1"/><text x="3.4276%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (37 samples, 1.73%)</title><rect x="3.2243%" y="341" width="1.7290%" height="15" fill="rgb(235,124,12)" fg:x="69" fg:w="37"/><text x="3.4743%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (37 samples, 1.73%)</title><rect x="3.2243%" y="325" width="1.7290%" height="15" fill="rgb(224,169,11)" fg:x="69" fg:w="37"/><text x="3.4743%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (37 samples, 1.73%)</title><rect x="3.2243%" y="309" width="1.7290%" height="15" fill="rgb(250,166,2)" fg:x="69" fg:w="37"/><text x="3.4743%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 1.73%)</title><rect x="3.2243%" y="293" width="1.7290%" height="15" fill="rgb(242,216,29)" fg:x="69" fg:w="37"/><text x="3.4743%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 1.73%)</title><rect x="3.2243%" y="277" width="1.7290%" height="15" fill="rgb(230,116,27)" fg:x="69" fg:w="37"/><text x="3.4743%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 1.73%)</title><rect x="3.2243%" y="261" width="1.7290%" height="15" fill="rgb(228,99,48)" fg:x="69" fg:w="37"/><text x="3.4743%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (16 samples, 0.75%)</title><rect x="4.9533%" y="341" width="0.7477%" height="15" fill="rgb(253,11,6)" fg:x="106" fg:w="16"/><text x="5.2033%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (16 samples, 0.75%)</title><rect x="4.9533%" y="325" width="0.7477%" height="15" fill="rgb(247,143,39)" fg:x="106" fg:w="16"/><text x="5.2033%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (16 samples, 0.75%)</title><rect x="4.9533%" y="309" width="0.7477%" height="15" fill="rgb(236,97,10)" fg:x="106" fg:w="16"/><text x="5.2033%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (16 samples, 0.75%)</title><rect x="4.9533%" y="293" width="0.7477%" height="15" fill="rgb(233,208,19)" fg:x="106" fg:w="16"/><text x="5.2033%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (16 samples, 0.75%)</title><rect x="4.9533%" y="277" width="0.7477%" height="15" fill="rgb(216,164,2)" fg:x="106" fg:w="16"/><text x="5.2033%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.75%)</title><rect x="4.9533%" y="261" width="0.7477%" height="15" fill="rgb(220,129,5)" fg:x="106" fg:w="16"/><text x="5.2033%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (1 samples, 0.05%)</title><rect x="5.7009%" y="341" width="0.0467%" height="15" fill="rgb(242,17,10)" fg:x="122" fg:w="1"/><text x="5.9509%" y="351.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="5.7009%" y="325" width="0.0467%" height="15" fill="rgb(242,107,0)" fg:x="122" fg:w="1"/><text x="5.9509%" y="335.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (1 samples, 0.05%)</title><rect x="5.7009%" y="309" width="0.0467%" height="15" fill="rgb(251,28,31)" fg:x="122" fg:w="1"/><text x="5.9509%" y="319.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 0.05%)</title><rect x="5.7009%" y="293" width="0.0467%" height="15" fill="rgb(233,223,10)" fg:x="122" fg:w="1"/><text x="5.9509%" y="303.50"></text></g><g><title>_pthread_set_qos_class_self_np (1 samples, 0.05%)</title><rect x="5.7009%" y="277" width="0.0467%" height="15" fill="rgb(215,21,27)" fg:x="122" fg:w="1"/><text x="5.9509%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (53 samples, 2.48%)</title><rect x="5.7477%" y="341" width="2.4766%" height="15" fill="rgb(232,23,21)" fg:x="123" fg:w="53"/><text x="5.9977%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (53 samples, 2.48%)</title><rect x="5.7477%" y="325" width="2.4766%" height="15" fill="rgb(244,5,23)" fg:x="123" fg:w="53"/><text x="5.9977%" y="335.50">co..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 2.48%)</title><rect x="5.7477%" y="309" width="2.4766%" height="15" fill="rgb(226,81,46)" fg:x="123" fg:w="53"/><text x="5.9977%" y="319.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 2.48%)</title><rect x="5.7477%" y="293" width="2.4766%" height="15" fill="rgb(247,70,30)" fg:x="123" fg:w="53"/><text x="5.9977%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (53 samples, 2.48%)</title><rect x="5.7477%" y="277" width="2.4766%" height="15" fill="rgb(212,68,19)" fg:x="123" fg:w="53"/><text x="5.9977%" y="287.50">al..</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (20 samples, 0.93%)</title><rect x="8.2243%" y="341" width="0.9346%" height="15" fill="rgb(240,187,13)" fg:x="176" fg:w="20"/><text x="8.4743%" y="351.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (20 samples, 0.93%)</title><rect x="8.2243%" y="325" width="0.9346%" height="15" fill="rgb(223,113,26)" fg:x="176" fg:w="20"/><text x="8.4743%" y="335.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (20 samples, 0.93%)</title><rect x="8.2243%" y="309" width="0.9346%" height="15" fill="rgb(206,192,2)" fg:x="176" fg:w="20"/><text x="8.4743%" y="319.50"></text></g><g><title>__pthread_main_thread_init (20 samples, 0.93%)</title><rect x="8.2243%" y="293" width="0.9346%" height="15" fill="rgb(241,108,4)" fg:x="176" fg:w="20"/><text x="8.4743%" y="303.50"></text></g><g><title>_pthread_rwlock_wrlock (20 samples, 0.93%)</title><rect x="8.2243%" y="277" width="0.9346%" height="15" fill="rgb(247,173,49)" fg:x="176" fg:w="20"/><text x="8.4743%" y="287.50"></text></g><g><title>__kernelrpc_mach_port_deallocate_trap (194 samples, 9.07%)</title><rect x="9.1589%" y="213" width="9.0654%" height="15" fill="rgb(224,114,35)" fg:x="196" fg:w="194"/><text x="9.4089%" y="223.50">__kernelrpc_m..</text></g><g><title>_host_get_special_port (194 samples, 9.07%)</title><rect x="9.1589%" y="197" width="9.0654%" height="15" fill="rgb(245,159,27)" fg:x="196" fg:w="194"/><text x="9.4089%" y="207.50">_host_get_spe..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::lock_contended (199 samples, 9.30%)</title><rect x="9.1589%" y="309" width="9.2991%" height="15" fill="rgb(245,172,44)" fg:x="196" fg:w="199"/><text x="9.4089%" y="319.50">std::sys::syn..</text></g><g><title>std::sys::sync::rwlock::queue::Node::wait (199 samples, 9.30%)</title><rect x="9.1589%" y="293" width="9.2991%" height="15" fill="rgb(236,23,11)" fg:x="196" fg:w="199"/><text x="9.4089%" y="303.50">std::sys::syn..</text></g><g><title>std::thread::Thread::park (199 samples, 9.30%)</title><rect x="9.1589%" y="277" width="9.2991%" height="15" fill="rgb(205,117,38)" fg:x="196" fg:w="199"/><text x="9.4089%" y="287.50">std::thread::..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::park (199 samples, 9.30%)</title><rect x="9.1589%" y="261" width="9.2991%" height="15" fill="rgb(237,72,25)" fg:x="196" fg:w="199"/><text x="9.4089%" y="271.50">std::sys::syn..</text></g><g><title>__simple_asl_escape_key (199 samples, 9.30%)</title><rect x="9.1589%" y="245" width="9.2991%" height="15" fill="rgb(244,70,9)" fg:x="196" fg:w="199"/><text x="9.4089%" y="255.50">__simple_asl_..</text></g><g><title>_task_restartable_ranges_synchronize (199 samples, 9.30%)</title><rect x="9.1589%" y="229" width="9.2991%" height="15" fill="rgb(217,125,39)" fg:x="196" fg:w="199"/><text x="9.4089%" y="239.50">_task_restart..</text></g><g><title>_proc_udata_info (5 samples, 0.23%)</title><rect x="18.2243%" y="213" width="0.2336%" height="15" fill="rgb(235,36,10)" fg:x="390" fg:w="5"/><text x="18.4743%" y="223.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (200 samples, 9.35%)</title><rect x="9.1589%" y="341" width="9.3458%" height="15" fill="rgb(251,123,47)" fg:x="196" fg:w="200"/><text x="9.4089%" y="351.50">std::sync::po..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (200 samples, 9.35%)</title><rect x="9.1589%" y="325" width="9.3458%" height="15" fill="rgb(221,13,13)" fg:x="196" fg:w="200"/><text x="9.4089%" y="335.50">std::sys::syn..</text></g><g><title>torpedo::physics::update (1 samples, 0.05%)</title><rect x="18.4579%" y="309" width="0.0467%" height="15" fill="rgb(238,131,9)" fg:x="395" fg:w="1"/><text x="18.7079%" y="319.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (1 samples, 0.05%)</title><rect x="18.4579%" y="293" width="0.0467%" height="15" fill="rgb(211,50,8)" fg:x="395" fg:w="1"/><text x="18.7079%" y="303.50"></text></g><g><title>std::sys::sync::rwlock::queue::RwLock::write (1 samples, 0.05%)</title><rect x="18.4579%" y="277" width="0.0467%" height="15" fill="rgb(245,182,24)" fg:x="395" fg:w="1"/><text x="18.7079%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="19.9533%" y="213" width="0.0467%" height="15" fill="rgb(242,14,37)" fg:x="427" fg:w="1"/><text x="20.2033%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="19.9533%" y="197" width="0.0467%" height="15" fill="rgb(246,228,12)" fg:x="427" fg:w="1"/><text x="20.2033%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="19.9533%" y="181" width="0.0467%" height="15" fill="rgb(213,55,15)" fg:x="427" fg:w="1"/><text x="20.2033%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.05%)</title><rect x="19.9533%" y="165" width="0.0467%" height="15" fill="rgb(209,9,3)" fg:x="427" fg:w="1"/><text x="20.2033%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="19.9533%" y="149" width="0.0467%" height="15" fill="rgb(230,59,30)" fg:x="427" fg:w="1"/><text x="20.2033%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="19.9533%" y="133" width="0.0467%" height="15" fill="rgb(209,121,21)" fg:x="427" fg:w="1"/><text x="20.2033%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="19.9533%" y="117" width="0.0467%" height="15" fill="rgb(220,109,13)" fg:x="427" fg:w="1"/><text x="20.2033%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 1.54%)</title><rect x="18.5047%" y="309" width="1.5421%" height="15" fill="rgb(232,18,1)" fg:x="396" fg:w="33"/><text x="18.7547%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (33 samples, 1.54%)</title><rect x="18.5047%" y="293" width="1.5421%" height="15" fill="rgb(215,41,42)" fg:x="396" fg:w="33"/><text x="18.7547%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="19.9533%" y="277" width="0.0935%" height="15" fill="rgb(224,123,36)" fg:x="427" fg:w="2"/><text x="20.2033%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="19.9533%" y="261" width="0.0935%" height="15" fill="rgb(240,125,3)" fg:x="427" fg:w="2"/><text x="20.2033%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="19.9533%" y="245" width="0.0935%" height="15" fill="rgb(205,98,50)" fg:x="427" fg:w="2"/><text x="20.2033%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="19.9533%" y="229" width="0.0935%" height="15" fill="rgb(205,185,37)" fg:x="427" fg:w="2"/><text x="20.2033%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.05%)</title><rect x="20.0000%" y="213" width="0.0467%" height="15" fill="rgb(238,207,15)" fg:x="428" fg:w="1"/><text x="20.2500%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="20.0000%" y="197" width="0.0467%" height="15" fill="rgb(213,199,42)" fg:x="428" fg:w="1"/><text x="20.2500%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (13 samples, 0.61%)</title><rect x="20.0467%" y="277" width="0.6075%" height="15" fill="rgb(235,201,11)" fg:x="429" fg:w="13"/><text x="20.2967%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (13 samples, 0.61%)</title><rect x="20.0467%" y="261" width="0.6075%" height="15" fill="rgb(207,46,11)" fg:x="429" fg:w="13"/><text x="20.2967%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.61%)</title><rect x="20.0467%" y="245" width="0.6075%" height="15" fill="rgb(241,35,35)" fg:x="429" fg:w="13"/><text x="20.2967%" y="255.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (8 samples, 0.37%)</title><rect x="20.2804%" y="229" width="0.3738%" height="15" fill="rgb(243,32,47)" fg:x="434" fg:w="8"/><text x="20.5304%" y="239.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (8 samples, 0.37%)</title><rect x="20.2804%" y="213" width="0.3738%" height="15" fill="rgb(247,202,23)" fg:x="434" fg:w="8"/><text x="20.5304%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (8 samples, 0.37%)</title><rect x="20.2804%" y="197" width="0.3738%" height="15" fill="rgb(219,102,11)" fg:x="434" fg:w="8"/><text x="20.5304%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (8 samples, 0.37%)</title><rect x="20.2804%" y="181" width="0.3738%" height="15" fill="rgb(243,110,44)" fg:x="434" fg:w="8"/><text x="20.5304%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (8 samples, 0.37%)</title><rect x="20.2804%" y="165" width="0.3738%" height="15" fill="rgb(222,74,54)" fg:x="434" fg:w="8"/><text x="20.5304%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (8 samples, 0.37%)</title><rect x="20.2804%" y="149" width="0.3738%" height="15" fill="rgb(216,99,12)" fg:x="434" fg:w="8"/><text x="20.5304%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.37%)</title><rect x="20.2804%" y="133" width="0.3738%" height="15" fill="rgb(226,22,26)" fg:x="434" fg:w="8"/><text x="20.5304%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (117 samples, 5.47%)</title><rect x="20.0467%" y="309" width="5.4673%" height="15" fill="rgb(217,163,10)" fg:x="429" fg:w="117"/><text x="20.2967%" y="319.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (117 samples, 5.47%)</title><rect x="20.0467%" y="293" width="5.4673%" height="15" fill="rgb(213,25,53)" fg:x="429" fg:w="117"/><text x="20.2967%" y="303.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (104 samples, 4.86%)</title><rect x="20.6542%" y="277" width="4.8598%" height="15" fill="rgb(252,105,26)" fg:x="442" fg:w="104"/><text x="20.9042%" y="287.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (104 samples, 4.86%)</title><rect x="20.6542%" y="261" width="4.8598%" height="15" fill="rgb(220,39,43)" fg:x="442" fg:w="104"/><text x="20.9042%" y="271.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (104 samples, 4.86%)</title><rect x="20.6542%" y="245" width="4.8598%" height="15" fill="rgb(229,68,48)" fg:x="442" fg:w="104"/><text x="20.9042%" y="255.50">core::..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 4.86%)</title><rect x="20.6542%" y="229" width="4.8598%" height="15" fill="rgb(252,8,32)" fg:x="442" fg:w="104"/><text x="20.9042%" y="239.50">&lt;hashb..</text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (16 samples, 0.75%)</title><rect x="24.7664%" y="213" width="0.7477%" height="15" fill="rgb(223,20,43)" fg:x="530" fg:w="16"/><text x="25.0164%" y="223.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (16 samples, 0.75%)</title><rect x="24.7664%" y="197" width="0.7477%" height="15" fill="rgb(229,81,49)" fg:x="530" fg:w="16"/><text x="25.0164%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (16 samples, 0.75%)</title><rect x="24.7664%" y="181" width="0.7477%" height="15" fill="rgb(236,28,36)" fg:x="530" fg:w="16"/><text x="25.0164%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (16 samples, 0.75%)</title><rect x="24.7664%" y="165" width="0.7477%" height="15" fill="rgb(249,185,26)" fg:x="530" fg:w="16"/><text x="25.0164%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (16 samples, 0.75%)</title><rect x="24.7664%" y="149" width="0.7477%" height="15" fill="rgb(249,174,33)" fg:x="530" fg:w="16"/><text x="25.0164%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (16 samples, 0.75%)</title><rect x="24.7664%" y="133" width="0.7477%" height="15" fill="rgb(233,201,37)" fg:x="530" fg:w="16"/><text x="25.0164%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (16 samples, 0.75%)</title><rect x="24.7664%" y="117" width="0.7477%" height="15" fill="rgb(221,78,26)" fg:x="530" fg:w="16"/><text x="25.0164%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.75%)</title><rect x="24.7664%" y="101" width="0.7477%" height="15" fill="rgb(250,127,30)" fg:x="530" fg:w="16"/><text x="25.0164%" y="111.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (168 samples, 7.85%)</title><rect x="18.5047%" y="341" width="7.8505%" height="15" fill="rgb(230,49,44)" fg:x="396" fg:w="168"/><text x="18.7547%" y="351.50">torpedo::ar..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (168 samples, 7.85%)</title><rect x="18.5047%" y="325" width="7.8505%" height="15" fill="rgb(229,67,23)" fg:x="396" fg:w="168"/><text x="18.7547%" y="335.50">torpedo::ar..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (18 samples, 0.84%)</title><rect x="25.5140%" y="309" width="0.8411%" height="15" fill="rgb(249,83,47)" fg:x="546" fg:w="18"/><text x="25.7640%" y="319.50"></text></g><g><title>torpedo::physics::PhysicsComp::bb (1 samples, 0.05%)</title><rect x="26.3551%" y="341" width="0.0467%" height="15" fill="rgb(215,43,3)" fg:x="564" fg:w="1"/><text x="26.6051%" y="351.50"></text></g><g><title>torpedo::physics::PhysicsComp::min (1 samples, 0.05%)</title><rect x="26.3551%" y="325" width="0.0467%" height="15" fill="rgb(238,154,13)" fg:x="564" fg:w="1"/><text x="26.6051%" y="335.50"></text></g><g><title>torpedo::physics::Collision::max (1 samples, 0.05%)</title><rect x="26.3551%" y="309" width="0.0467%" height="15" fill="rgb(219,56,2)" fg:x="564" fg:w="1"/><text x="26.6051%" y="319.50"></text></g><g><title>torpedo::math::Vector4::to_matrix (1 samples, 0.05%)</title><rect x="26.3551%" y="293" width="0.0467%" height="15" fill="rgb(233,0,4)" fg:x="564" fg:w="1"/><text x="26.6051%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (508 samples, 23.74%)</title><rect x="2.7103%" y="533" width="23.7383%" height="15" fill="rgb(235,30,7)" fg:x="58" fg:w="508"/><text x="2.9603%" y="543.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (508 samples, 23.74%)</title><rect x="2.7103%" y="517" width="23.7383%" height="15" fill="rgb(250,79,13)" fg:x="58" fg:w="508"/><text x="2.9603%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (508 samples, 23.74%)</title><rect x="2.7103%" y="501" width="23.7383%" height="15" fill="rgb(211,146,34)" fg:x="58" fg:w="508"/><text x="2.9603%" y="511.50">core::ops::function::FnOnce::call_once..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (508 samples, 23.74%)</title><rect x="2.7103%" y="485" width="23.7383%" height="15" fill="rgb(228,22,38)" fg:x="58" fg:w="508"/><text x="2.9603%" y="495.50">std::thread::Builder::spawn_unchecked_..</text></g><g><title>std::panic::catch_unwind (508 samples, 23.74%)</title><rect x="2.7103%" y="469" width="23.7383%" height="15" fill="rgb(235,168,5)" fg:x="58" fg:w="508"/><text x="2.9603%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (508 samples, 23.74%)</title><rect x="2.7103%" y="453" width="23.7383%" height="15" fill="rgb(221,155,16)" fg:x="58" fg:w="508"/><text x="2.9603%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (508 samples, 23.74%)</title><rect x="2.7103%" y="437" width="23.7383%" height="15" fill="rgb(215,215,53)" fg:x="58" fg:w="508"/><text x="2.9603%" y="447.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (508 samples, 23.74%)</title><rect x="2.7103%" y="421" width="23.7383%" height="15" fill="rgb(223,4,10)" fg:x="58" fg:w="508"/><text x="2.9603%" y="431.50">&lt;core::panic::unwind_safe::AssertUnwin..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (508 samples, 23.74%)</title><rect x="2.7103%" y="405" width="23.7383%" height="15" fill="rgb(234,103,6)" fg:x="58" fg:w="508"/><text x="2.9603%" y="415.50">std::thread::Builder::spawn_unchecked_..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (508 samples, 23.74%)</title><rect x="2.7103%" y="389" width="23.7383%" height="15" fill="rgb(227,97,0)" fg:x="58" fg:w="508"/><text x="2.9603%" y="399.50">std::sys::backtrace::__rust_begin_shor..</text></g><g><title>torpedo::level::level_loop::{{closure}} (508 samples, 23.74%)</title><rect x="2.7103%" y="373" width="23.7383%" height="15" fill="rgb(234,150,53)" fg:x="58" fg:w="508"/><text x="2.9603%" y="383.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (508 samples, 23.74%)</title><rect x="2.7103%" y="357" width="23.7383%" height="15" fill="rgb(228,201,54)" fg:x="58" fg:w="508"/><text x="2.9603%" y="367.50">torpedo::physics::update</text></g><g><title>torpedo::physics::make_octree (1 samples, 0.05%)</title><rect x="26.4019%" y="341" width="0.0467%" height="15" fill="rgb(222,22,37)" fg:x="565" fg:w="1"/><text x="26.6519%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (193 samples, 9.02%)</title><rect x="26.4486%" y="533" width="9.0187%" height="15" fill="rgb(237,53,32)" fg:x="566" fg:w="193"/><text x="26.6986%" y="543.50">core::ptr::dr..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (193 samples, 9.02%)</title><rect x="26.4486%" y="517" width="9.0187%" height="15" fill="rgb(233,25,53)" fg:x="566" fg:w="193"/><text x="26.6986%" y="527.50">&lt;std::sys::pa..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (193 samples, 9.02%)</title><rect x="26.4486%" y="501" width="9.0187%" height="15" fill="rgb(210,40,34)" fg:x="566" fg:w="193"/><text x="26.6986%" y="511.50">std::sys::pal..</text></g><g><title>6161035264 (731 samples, 34.16%)</title><rect x="2.3832%" y="581" width="34.1589%" height="15" fill="rgb(241,220,44)" fg:x="51" fg:w="731"/><text x="2.6332%" y="591.50">6161035264</text></g><g><title>__pthread_deallocate (731 samples, 34.16%)</title><rect x="2.3832%" y="565" width="34.1589%" height="15" fill="rgb(235,28,35)" fg:x="51" fg:w="731"/><text x="2.6332%" y="575.50">__pthread_deallocate</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (724 samples, 33.83%)</title><rect x="2.7103%" y="549" width="33.8318%" height="15" fill="rgb(210,56,17)" fg:x="58" fg:w="724"/><text x="2.9603%" y="559.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (23 samples, 1.07%)</title><rect x="35.4673%" y="533" width="1.0748%" height="15" fill="rgb(224,130,29)" fg:x="759" fg:w="23"/><text x="35.7173%" y="543.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (23 samples, 1.07%)</title><rect x="35.4673%" y="517" width="1.0748%" height="15" fill="rgb(235,212,8)" fg:x="759" fg:w="23"/><text x="35.7173%" y="527.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (20 samples, 0.93%)</title><rect x="35.6075%" y="501" width="0.9346%" height="15" fill="rgb(223,33,50)" fg:x="762" fg:w="20"/><text x="35.8575%" y="511.50"></text></g><g><title>_task_info (16 samples, 0.75%)</title><rect x="35.7944%" y="485" width="0.7477%" height="15" fill="rgb(219,149,13)" fg:x="766" fg:w="16"/><text x="36.0444%" y="495.50"></text></g><g><title>__kernelrpc_vm_map (1 samples, 0.05%)</title><rect x="38.2243%" y="565" width="0.0467%" height="15" fill="rgb(250,156,29)" fg:x="818" fg:w="1"/><text x="38.4743%" y="575.50"></text></g><g><title>_mach_reply_port (1 samples, 0.05%)</title><rect x="38.6449%" y="229" width="0.0467%" height="15" fill="rgb(216,193,19)" fg:x="827" fg:w="1"/><text x="38.8949%" y="239.50"></text></g><g><title>_thread_get_state (1 samples, 0.05%)</title><rect x="38.6449%" y="213" width="0.0467%" height="15" fill="rgb(216,135,14)" fg:x="827" fg:w="1"/><text x="38.8949%" y="223.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="38.6449%" y="197" width="0.0467%" height="15" fill="rgb(241,47,5)" fg:x="827" fg:w="1"/><text x="38.8949%" y="207.50"></text></g><g><title>Unknown (9 samples, 0.42%)</title><rect x="38.3645%" y="245" width="0.4206%" height="15" fill="rgb(233,42,35)" fg:x="821" fg:w="9"/><text x="38.6145%" y="255.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="38.6916%" y="229" width="0.0935%" height="15" fill="rgb(231,13,6)" fg:x="828" fg:w="2"/><text x="38.9416%" y="239.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.05%)</title><rect x="38.7850%" y="245" width="0.0467%" height="15" fill="rgb(207,181,40)" fg:x="830" fg:w="1"/><text x="39.0350%" y="255.50"></text></g><g><title>_mach_reply_port (2 samples, 0.09%)</title><rect x="38.8318%" y="245" width="0.0935%" height="15" fill="rgb(254,173,49)" fg:x="831" fg:w="2"/><text x="39.0818%" y="255.50"></text></g><g><title>_thread_get_state (2 samples, 0.09%)</title><rect x="38.8318%" y="229" width="0.0935%" height="15" fill="rgb(221,1,38)" fg:x="831" fg:w="2"/><text x="39.0818%" y="239.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="38.8318%" y="213" width="0.0935%" height="15" fill="rgb(206,124,46)" fg:x="831" fg:w="2"/><text x="39.0818%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (15 samples, 0.70%)</title><rect x="38.2710%" y="325" width="0.7009%" height="15" fill="rgb(249,21,11)" fg:x="819" fg:w="15"/><text x="38.5210%" y="335.50"></text></g><g><title>Unknown (15 samples, 0.70%)</title><rect x="38.2710%" y="309" width="0.7009%" height="15" fill="rgb(222,201,40)" fg:x="819" fg:w="15"/><text x="38.5210%" y="319.50"></text></g><g><title>Unknown (15 samples, 0.70%)</title><rect x="38.2710%" y="293" width="0.7009%" height="15" fill="rgb(235,61,29)" fg:x="819" fg:w="15"/><text x="38.5210%" y="303.50"></text></g><g><title>Unknown (15 samples, 0.70%)</title><rect x="38.2710%" y="277" width="0.7009%" height="15" fill="rgb(219,207,3)" fg:x="819" fg:w="15"/><text x="38.5210%" y="287.50"></text></g><g><title>Unknown (15 samples, 0.70%)</title><rect x="38.2710%" y="261" width="0.7009%" height="15" fill="rgb(222,56,46)" fg:x="819" fg:w="15"/><text x="38.5210%" y="271.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="38.9252%" y="245" width="0.0467%" height="15" fill="rgb(239,76,54)" fg:x="833" fg:w="1"/><text x="39.1752%" y="255.50"></text></g><g><title>Unknown (11 samples, 0.51%)</title><rect x="39.9065%" y="213" width="0.5140%" height="15" fill="rgb(231,124,27)" fg:x="854" fg:w="11"/><text x="40.1565%" y="223.50"></text></g><g><title>__kernelrpc_mach_port_set_attributes (1 samples, 0.05%)</title><rect x="40.4206%" y="213" width="0.0467%" height="15" fill="rgb(249,195,6)" fg:x="865" fg:w="1"/><text x="40.6706%" y="223.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="40.4673%" y="213" width="0.0935%" height="15" fill="rgb(237,174,47)" fg:x="866" fg:w="2"/><text x="40.7173%" y="223.50"></text></g><g><title>_pthread_atfork (1 samples, 0.05%)</title><rect x="40.5607%" y="213" width="0.0467%" height="15" fill="rgb(206,201,31)" fg:x="868" fg:w="1"/><text x="40.8107%" y="223.50"></text></g><g><title>_pthread_atfork (1 samples, 0.05%)</title><rect x="40.5607%" y="197" width="0.0467%" height="15" fill="rgb(231,57,52)" fg:x="868" fg:w="1"/><text x="40.8107%" y="207.50"></text></g><g><title>Unknown (31 samples, 1.45%)</title><rect x="39.2056%" y="229" width="1.4486%" height="15" fill="rgb(248,177,22)" fg:x="839" fg:w="31"/><text x="39.4556%" y="239.50"></text></g><g><title>_pthread_mutex_init (1 samples, 0.05%)</title><rect x="40.6075%" y="213" width="0.0467%" height="15" fill="rgb(215,211,37)" fg:x="869" fg:w="1"/><text x="40.8575%" y="223.50"></text></g><g><title>__platform_strcpy (1 samples, 0.05%)</title><rect x="40.6542%" y="229" width="0.0467%" height="15" fill="rgb(241,128,51)" fg:x="870" fg:w="1"/><text x="40.9042%" y="239.50"></text></g><g><title>raylib::core::RaylibBuilder::build (38 samples, 1.78%)</title><rect x="38.9720%" y="325" width="1.7757%" height="15" fill="rgb(227,165,31)" fg:x="834" fg:w="38"/><text x="39.2220%" y="335.50">r..</text></g><g><title>raylib::core::init_window (38 samples, 1.78%)</title><rect x="38.9720%" y="309" width="1.7757%" height="15" fill="rgb(228,167,24)" fg:x="834" fg:w="38"/><text x="39.2220%" y="319.50">r..</text></g><g><title>Unknown (38 samples, 1.78%)</title><rect x="38.9720%" y="293" width="1.7757%" height="15" fill="rgb(228,143,12)" fg:x="834" fg:w="38"/><text x="39.2220%" y="303.50">U..</text></g><g><title>Unknown (38 samples, 1.78%)</title><rect x="38.9720%" y="277" width="1.7757%" height="15" fill="rgb(249,149,8)" fg:x="834" fg:w="38"/><text x="39.2220%" y="287.50">U..</text></g><g><title>Unknown (38 samples, 1.78%)</title><rect x="38.9720%" y="261" width="1.7757%" height="15" fill="rgb(243,35,44)" fg:x="834" fg:w="38"/><text x="39.2220%" y="271.50">U..</text></g><g><title>Unknown (37 samples, 1.73%)</title><rect x="39.0187%" y="245" width="1.7290%" height="15" fill="rgb(246,89,9)" fg:x="835" fg:w="37"/><text x="39.2687%" y="255.50"></text></g><g><title>_posix_spawnattr_set_importancewatch_port_np (1 samples, 0.05%)</title><rect x="40.7009%" y="229" width="0.0467%" height="15" fill="rgb(233,213,13)" fg:x="871" fg:w="1"/><text x="40.9509%" y="239.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_cylinder (1 samples, 0.05%)</title><rect x="40.7477%" y="261" width="0.0467%" height="15" fill="rgb(233,141,41)" fg:x="872" fg:w="1"/><text x="40.9977%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="40.7477%" y="245" width="0.0467%" height="15" fill="rgb(239,167,4)" fg:x="872" fg:w="1"/><text x="40.9977%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="40.7477%" y="229" width="0.0467%" height="15" fill="rgb(209,217,16)" fg:x="872" fg:w="1"/><text x="40.9977%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="40.7477%" y="213" width="0.0467%" height="15" fill="rgb(219,88,35)" fg:x="872" fg:w="1"/><text x="40.9977%" y="223.50"></text></g><g><title>_mach_get_times (1 samples, 0.05%)</title><rect x="40.7477%" y="197" width="0.0467%" height="15" fill="rgb(220,193,23)" fg:x="872" fg:w="1"/><text x="40.9977%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2 samples, 0.09%)</title><rect x="40.7477%" y="309" width="0.0935%" height="15" fill="rgb(230,90,52)" fg:x="872" fg:w="2"/><text x="40.9977%" y="319.50"></text></g><g><title>torpedo::game::game_create_level (2 samples, 0.09%)</title><rect x="40.7477%" y="293" width="0.0935%" height="15" fill="rgb(252,106,19)" fg:x="872" fg:w="2"/><text x="40.9977%" y="303.50"></text></g><g><title>torpedo::level::default_setup (2 samples, 0.09%)</title><rect x="40.7477%" y="277" width="0.0935%" height="15" fill="rgb(206,74,20)" fg:x="872" fg:w="2"/><text x="40.9977%" y="287.50"></text></g><g><title>torpedo::level::init_level (1 samples, 0.05%)</title><rect x="40.7944%" y="261" width="0.0467%" height="15" fill="rgb(230,138,44)" fg:x="873" fg:w="1"/><text x="41.0444%" y="271.50"></text></g><g><title>torpedo::level::Level::new (1 samples, 0.05%)</title><rect x="40.7944%" y="245" width="0.0467%" height="15" fill="rgb(235,182,43)" fg:x="873" fg:w="1"/><text x="41.0444%" y="255.50"></text></g><g><title>torpedo::level::ComponentList&lt;T&gt;::init (1 samples, 0.05%)</title><rect x="40.7944%" y="229" width="0.0467%" height="15" fill="rgb(242,16,51)" fg:x="873" fg:w="1"/><text x="41.0444%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.05%)</title><rect x="40.7944%" y="213" width="0.0467%" height="15" fill="rgb(248,9,4)" fg:x="873" fg:w="1"/><text x="41.0444%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.05%)</title><rect x="40.7944%" y="197" width="0.0467%" height="15" fill="rgb(210,31,22)" fg:x="873" fg:w="1"/><text x="41.0444%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (1 samples, 0.05%)</title><rect x="40.8411%" y="309" width="0.0467%" height="15" fill="rgb(239,54,39)" fg:x="874" fg:w="1"/><text x="41.0911%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.05%)</title><rect x="40.8411%" y="293" width="0.0467%" height="15" fill="rgb(230,99,41)" fg:x="874" fg:w="1"/><text x="41.0911%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.05%)</title><rect x="40.8411%" y="277" width="0.0467%" height="15" fill="rgb(253,106,12)" fg:x="874" fg:w="1"/><text x="41.0911%" y="287.50"></text></g><g><title>Unknown (8 samples, 0.37%)</title><rect x="59.1589%" y="229" width="0.3738%" height="15" fill="rgb(213,46,41)" fg:x="1266" fg:w="8"/><text x="59.4089%" y="239.50"></text></g><g><title>__platform_strcpy (1 samples, 0.05%)</title><rect x="59.5327%" y="229" width="0.0467%" height="15" fill="rgb(215,133,35)" fg:x="1274" fg:w="1"/><text x="59.7827%" y="239.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.05%)</title><rect x="59.5794%" y="229" width="0.0467%" height="15" fill="rgb(213,28,5)" fg:x="1275" fg:w="1"/><text x="59.8294%" y="239.50"></text></g><g><title>_csr_check (1 samples, 0.05%)</title><rect x="59.6262%" y="229" width="0.0467%" height="15" fill="rgb(215,77,49)" fg:x="1276" fg:w="1"/><text x="59.8762%" y="239.50"></text></g><g><title>_mach_msg_destroy (1 samples, 0.05%)</title><rect x="59.6262%" y="213" width="0.0467%" height="15" fill="rgb(248,100,22)" fg:x="1276" fg:w="1"/><text x="59.8762%" y="223.50"></text></g><g><title>_kdebug_trace_string (1 samples, 0.05%)</title><rect x="59.6729%" y="229" width="0.0467%" height="15" fill="rgb(208,67,9)" fg:x="1277" fg:w="1"/><text x="59.9229%" y="239.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="59.6729%" y="213" width="0.0467%" height="15" fill="rgb(219,133,21)" fg:x="1277" fg:w="1"/><text x="59.9229%" y="223.50"></text></g><g><title>_mach_get_times (86 samples, 4.02%)</title><rect x="59.7196%" y="229" width="4.0187%" height="15" fill="rgb(246,46,29)" fg:x="1278" fg:w="86"/><text x="59.9696%" y="239.50">_mac..</text></g><g><title>_mach_port_allocate (1 samples, 0.05%)</title><rect x="63.7383%" y="229" width="0.0467%" height="15" fill="rgb(246,185,52)" fg:x="1364" fg:w="1"/><text x="63.9883%" y="239.50"></text></g><g><title>_mach_reply_port (71 samples, 3.32%)</title><rect x="63.7850%" y="229" width="3.3178%" height="15" fill="rgb(252,136,11)" fg:x="1365" fg:w="71"/><text x="64.0350%" y="239.50">_ma..</text></g><g><title>_thread_get_state (71 samples, 3.32%)</title><rect x="63.7850%" y="213" width="3.3178%" height="15" fill="rgb(219,138,53)" fg:x="1365" fg:w="71"/><text x="64.0350%" y="223.50">_th..</text></g><g><title>_proc_udata_info (71 samples, 3.32%)</title><rect x="63.7850%" y="197" width="3.3178%" height="15" fill="rgb(211,51,23)" fg:x="1365" fg:w="71"/><text x="64.0350%" y="207.50">_pr..</text></g><g><title>_mach_voucher_attr_command (2 samples, 0.09%)</title><rect x="67.1028%" y="229" width="0.0935%" height="15" fill="rgb(247,221,28)" fg:x="1436" fg:w="2"/><text x="67.3528%" y="239.50"></text></g><g><title>_proc_udata_info (2 samples, 0.09%)</title><rect x="67.1028%" y="213" width="0.0935%" height="15" fill="rgb(251,222,45)" fg:x="1436" fg:w="2"/><text x="67.3528%" y="223.50"></text></g><g><title>_mig_get_reply_port (1 samples, 0.05%)</title><rect x="67.1963%" y="229" width="0.0467%" height="15" fill="rgb(217,162,53)" fg:x="1438" fg:w="1"/><text x="67.4463%" y="239.50"></text></g><g><title>_os_unfair_lock_lock_with_options (1 samples, 0.05%)</title><rect x="67.2430%" y="229" width="0.0467%" height="15" fill="rgb(229,93,14)" fg:x="1439" fg:w="1"/><text x="67.4930%" y="239.50"></text></g><g><title>_posix_spawnattr_set_importancewatch_port_np (1 samples, 0.05%)</title><rect x="67.2897%" y="229" width="0.0467%" height="15" fill="rgb(209,67,49)" fg:x="1440" fg:w="1"/><text x="67.5397%" y="239.50"></text></g><g><title>_proc_udata_info (161 samples, 7.52%)</title><rect x="67.3364%" y="229" width="7.5234%" height="15" fill="rgb(213,87,29)" fg:x="1441" fg:w="161"/><text x="67.5864%" y="239.50">_proc_udat..</text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (728 samples, 34.02%)</title><rect x="40.8879%" y="309" width="34.0187%" height="15" fill="rgb(205,151,52)" fg:x="875" fg:w="728"/><text x="41.1379%" y="319.50">core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibD..</text></g><g><title>Unknown (728 samples, 34.02%)</title><rect x="40.8879%" y="293" width="34.0187%" height="15" fill="rgb(253,215,39)" fg:x="875" fg:w="728"/><text x="41.1379%" y="303.50">Unknown</text></g><g><title>Unknown (728 samples, 34.02%)</title><rect x="40.8879%" y="277" width="34.0187%" height="15" fill="rgb(221,220,41)" fg:x="875" fg:w="728"/><text x="41.1379%" y="287.50">Unknown</text></g><g><title>Unknown (713 samples, 33.32%)</title><rect x="41.5888%" y="261" width="33.3178%" height="15" fill="rgb(218,133,21)" fg:x="890" fg:w="713"/><text x="41.8388%" y="271.50">Unknown</text></g><g><title>Unknown (702 samples, 32.80%)</title><rect x="42.1028%" y="245" width="32.8037%" height="15" fill="rgb(221,193,43)" fg:x="901" fg:w="702"/><text x="42.3528%" y="255.50">Unknown</text></g><g><title>_task_info (1 samples, 0.05%)</title><rect x="74.8598%" y="229" width="0.0467%" height="15" fill="rgb(240,128,52)" fg:x="1602" fg:w="1"/><text x="75.1098%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::renderer::ModelList&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="309" width="0.0467%" height="15" fill="rgb(253,114,12)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,raylib::core::models::Model&gt;&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="293" width="0.0467%" height="15" fill="rgb(215,223,47)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,raylib::core::models::Model,std::hash::random::RandomState&gt;&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="277" width="0.0467%" height="15" fill="rgb(248,225,23)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,raylib::core::models::Model)&gt;&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="261" width="0.0467%" height="15" fill="rgb(250,108,0)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="74.9065%" y="245" width="0.0467%" height="15" fill="rgb(228,208,7)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.05%)</title><rect x="74.9065%" y="229" width="0.0467%" height="15" fill="rgb(244,45,10)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.05%)</title><rect x="74.9065%" y="213" width="0.0467%" height="15" fill="rgb(207,125,25)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.05%)</title><rect x="74.9065%" y="197" width="0.0467%" height="15" fill="rgb(210,195,18)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.05%)</title><rect x="74.9065%" y="181" width="0.0467%" height="15" fill="rgb(249,80,12)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,raylib::core::models::Model)&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="165" width="0.0467%" height="15" fill="rgb(221,65,9)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::models::Model&gt; (1 samples, 0.05%)</title><rect x="74.9065%" y="149" width="0.0467%" height="15" fill="rgb(235,49,36)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="159.50"></text></g><g><title>&lt;raylib::core::models::Model as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="74.9065%" y="133" width="0.0467%" height="15" fill="rgb(225,32,20)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="143.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="74.9065%" y="117" width="0.0467%" height="15" fill="rgb(215,141,46)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="127.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="74.9065%" y="101" width="0.0467%" height="15" fill="rgb(250,160,47)" fg:x="1603" fg:w="1"/><text x="75.1565%" y="111.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::clear_background (1 samples, 0.05%)</title><rect x="74.9533%" y="309" width="0.0467%" height="15" fill="rgb(216,222,40)" fg:x="1604" fg:w="1"/><text x="75.2033%" y="319.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="74.9533%" y="293" width="0.0467%" height="15" fill="rgb(234,217,39)" fg:x="1604" fg:w="1"/><text x="75.2033%" y="303.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="74.9533%" y="277" width="0.0467%" height="15" fill="rgb(207,178,40)" fg:x="1604" fg:w="1"/><text x="75.2033%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Thread&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="277" width="0.5140%" height="15" fill="rgb(221,136,13)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::Inner&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="261" width="0.5140%" height="15" fill="rgb(249,199,10)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt;&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="245" width="0.5140%" height="15" fill="rgb(249,222,13)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::thread::OtherInner&gt;&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="229" width="0.5140%" height="15" fill="rgb(244,185,38)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.51%)</title><rect x="75.0000%" y="213" width="0.5140%" height="15" fill="rgb(236,202,9)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.51%)</title><rect x="75.0000%" y="197" width="0.5140%" height="15" fill="rgb(250,229,37)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::thread::OtherInner&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="181" width="0.5140%" height="15" fill="rgb(206,174,23)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::sync::thread_parking::darwin::Parker&gt; (11 samples, 0.51%)</title><rect x="75.0000%" y="165" width="0.5140%" height="15" fill="rgb(211,33,43)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="175.50"></text></g><g><title>&lt;std::sys::sync::thread_parking::darwin::Parker as core::ops::drop::Drop&gt;::drop (11 samples, 0.51%)</title><rect x="75.0000%" y="149" width="0.5140%" height="15" fill="rgb(245,58,50)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="159.50"></text></g><g><title>__simple_asl_escape_val (11 samples, 0.51%)</title><rect x="75.0000%" y="133" width="0.5140%" height="15" fill="rgb(244,68,36)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="143.50"></text></g><g><title>_vm_copy (11 samples, 0.51%)</title><rect x="75.0000%" y="117" width="0.5140%" height="15" fill="rgb(232,229,15)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="127.50"></text></g><g><title>_proc_udata_info (11 samples, 0.51%)</title><rect x="75.0000%" y="101" width="0.5140%" height="15" fill="rgb(254,30,23)" fg:x="1605" fg:w="11"/><text x="75.2500%" y="111.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (127 samples, 5.93%)</title><rect x="75.0000%" y="309" width="5.9346%" height="15" fill="rgb(235,160,14)" fg:x="1605" fg:w="127"/><text x="75.2500%" y="319.50">std::thr..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (127 samples, 5.93%)</title><rect x="75.0000%" y="293" width="5.9346%" height="15" fill="rgb(212,155,44)" fg:x="1605" fg:w="127"/><text x="75.2500%" y="303.50">std::thr..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (116 samples, 5.42%)</title><rect x="75.5140%" y="277" width="5.4206%" height="15" fill="rgb(226,2,50)" fg:x="1616" fg:w="116"/><text x="75.7640%" y="287.50">std::sy..</text></g><g><title>__pthread_join (116 samples, 5.42%)</title><rect x="75.5140%" y="261" width="5.4206%" height="15" fill="rgb(234,177,6)" fg:x="1616" fg:w="116"/><text x="75.7640%" y="271.50">__pthre..</text></g><g><title>_pthread_detach (46 samples, 2.15%)</title><rect x="78.7850%" y="245" width="2.1495%" height="15" fill="rgb(217,24,9)" fg:x="1686" fg:w="46"/><text x="79.0350%" y="255.50">_..</text></g><g><title>_mig_get_special_reply_port (46 samples, 2.15%)</title><rect x="78.7850%" y="229" width="2.1495%" height="15" fill="rgb(220,13,46)" fg:x="1686" fg:w="46"/><text x="79.0350%" y="239.50">_..</text></g><g><title>__pthread_create (30 samples, 1.40%)</title><rect x="80.9813%" y="229" width="1.4019%" height="15" fill="rgb(239,221,27)" fg:x="1733" fg:w="30"/><text x="81.2313%" y="239.50"></text></g><g><title>std::thread::spawn (49 samples, 2.29%)</title><rect x="80.9346%" y="309" width="2.2897%" height="15" fill="rgb(222,198,25)" fg:x="1732" fg:w="49"/><text x="81.1846%" y="319.50">s..</text></g><g><title>std::thread::Builder::spawn (49 samples, 2.29%)</title><rect x="80.9346%" y="293" width="2.2897%" height="15" fill="rgb(211,99,13)" fg:x="1732" fg:w="49"/><text x="81.1846%" y="303.50">s..</text></g><g><title>std::thread::Builder::spawn_unchecked (49 samples, 2.29%)</title><rect x="80.9346%" y="277" width="2.2897%" height="15" fill="rgb(232,111,31)" fg:x="1732" fg:w="49"/><text x="81.1846%" y="287.50">s..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (49 samples, 2.29%)</title><rect x="80.9346%" y="261" width="2.2897%" height="15" fill="rgb(245,82,37)" fg:x="1732" fg:w="49"/><text x="81.1846%" y="271.50">s..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (48 samples, 2.24%)</title><rect x="80.9813%" y="245" width="2.2430%" height="15" fill="rgb(227,149,46)" fg:x="1733" fg:w="48"/><text x="81.2313%" y="255.50">s..</text></g><g><title>_pthread_jit_write_with_callback_np (18 samples, 0.84%)</title><rect x="82.3832%" y="229" width="0.8411%" height="15" fill="rgb(218,36,50)" fg:x="1763" fg:w="18"/><text x="82.6332%" y="239.50"></text></g><g><title>_chmod (4 samples, 0.19%)</title><rect x="83.0374%" y="213" width="0.1869%" height="15" fill="rgb(226,80,48)" fg:x="1777" fg:w="4"/><text x="83.2874%" y="223.50"></text></g><g><title>__pthread_mutex_global_init (45 samples, 2.10%)</title><rect x="84.9533%" y="293" width="2.1028%" height="15" fill="rgb(238,224,15)" fg:x="1818" fg:w="45"/><text x="85.2033%" y="303.50">_..</text></g><g><title>_pthread_set_qos_class_self_np (45 samples, 2.10%)</title><rect x="84.9533%" y="277" width="2.1028%" height="15" fill="rgb(241,136,10)" fg:x="1818" fg:w="45"/><text x="85.2033%" y="287.50">_..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;,std::sync::poison::TryLockError&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt;&gt;&gt; (82 samples, 3.83%)</title><rect x="87.0561%" y="293" width="3.8318%" height="15" fill="rgb(208,32,45)" fg:x="1863" fg:w="82"/><text x="87.3061%" y="303.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;bool&gt;&gt; (82 samples, 3.83%)</title><rect x="87.0561%" y="277" width="3.8318%" height="15" fill="rgb(207,135,9)" fg:x="1863" fg:w="82"/><text x="87.3061%" y="287.50">core..</text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 3.83%)</title><rect x="87.0561%" y="261" width="3.8318%" height="15" fill="rgb(206,86,44)" fg:x="1863" fg:w="82"/><text x="87.3061%" y="271.50">&lt;std..</text></g><g><title>std::sys::sync::mutex::pthread::Mutex::unlock (82 samples, 3.83%)</title><rect x="87.0561%" y="245" width="3.8318%" height="15" fill="rgb(245,177,15)" fg:x="1863" fg:w="82"/><text x="87.3061%" y="255.50">std:..</text></g><g><title>__pthread_mutex_global_init (59 samples, 2.76%)</title><rect x="88.1308%" y="229" width="2.7570%" height="15" fill="rgb(206,64,50)" fg:x="1886" fg:w="59"/><text x="88.3808%" y="239.50">__..</text></g><g><title>_pthread_set_qos_class_self_np (59 samples, 2.76%)</title><rect x="88.1308%" y="213" width="2.7570%" height="15" fill="rgb(234,36,40)" fg:x="1886" fg:w="59"/><text x="88.3808%" y="223.50">_p..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::physics::PhysicsComp&gt;]&gt;&gt;&gt; (143 samples, 6.68%)</title><rect x="90.8879%" y="293" width="6.6822%" height="15" fill="rgb(213,64,8)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="303.50">core::ptr..</text></g><g><title>&lt;std::sync::poison::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 6.68%)</title><rect x="90.8879%" y="277" width="6.6822%" height="15" fill="rgb(210,75,36)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="287.50">&lt;std::syn..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::read_unlock (143 samples, 6.68%)</title><rect x="90.8879%" y="261" width="6.6822%" height="15" fill="rgb(229,88,21)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="271.50">std::sys:..</text></g><g><title>std::sys::sync::rwlock::queue::RwLock::unlock_queue (143 samples, 6.68%)</title><rect x="90.8879%" y="245" width="6.6822%" height="15" fill="rgb(252,204,47)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="255.50">std::sys:..</text></g><g><title>std::sys::sync::rwlock::queue::complete_all (143 samples, 6.68%)</title><rect x="90.8879%" y="229" width="6.6822%" height="15" fill="rgb(208,77,27)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="239.50">std::sys:..</text></g><g><title>std::sys::sync::rwlock::queue::Node::complete (143 samples, 6.68%)</title><rect x="90.8879%" y="213" width="6.6822%" height="15" fill="rgb(221,76,26)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="223.50">std::sys:..</text></g><g><title>std::thread::Thread::unpark (143 samples, 6.68%)</title><rect x="90.8879%" y="197" width="6.6822%" height="15" fill="rgb(225,139,18)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="207.50">std::thre..</text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (143 samples, 6.68%)</title><rect x="90.8879%" y="181" width="6.6822%" height="15" fill="rgb(230,137,11)" fg:x="1945" fg:w="143"/><text x="91.1379%" y="191.50">std::sys:..</text></g><g><title>raylib::core::drawing::RaylibMode3DExt::begin_mode3D (4 samples, 0.19%)</title><rect x="97.5701%" y="293" width="0.1869%" height="15" fill="rgb(212,28,1)" fg:x="2088" fg:w="4"/><text x="97.8201%" y="303.50"></text></g><g><title>Unknown (4 samples, 0.19%)</title><rect x="97.5701%" y="277" width="0.1869%" height="15" fill="rgb(248,164,17)" fg:x="2088" fg:w="4"/><text x="97.8201%" y="287.50"></text></g><g><title>Unknown (4 samples, 0.19%)</title><rect x="97.5701%" y="261" width="0.1869%" height="15" fill="rgb(222,171,42)" fg:x="2088" fg:w="4"/><text x="97.8201%" y="271.50"></text></g><g><title>Unknown (2 samples, 0.09%)</title><rect x="97.6636%" y="245" width="0.0935%" height="15" fill="rgb(243,84,45)" fg:x="2090" fg:w="2"/><text x="97.9136%" y="255.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (10 samples, 0.47%)</title><rect x="97.7570%" y="293" width="0.4673%" height="15" fill="rgb(252,49,23)" fg:x="2092" fg:w="10"/><text x="98.0070%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::lock (10 samples, 0.47%)</title><rect x="97.7570%" y="277" width="0.4673%" height="15" fill="rgb(215,19,7)" fg:x="2092" fg:w="10"/><text x="98.0070%" y="287.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (5 samples, 0.23%)</title><rect x="97.9907%" y="261" width="0.2336%" height="15" fill="rgb(238,81,41)" fg:x="2097" fg:w="5"/><text x="98.2407%" y="271.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 0.05%)</title><rect x="98.1776%" y="245" width="0.0467%" height="15" fill="rgb(210,199,37)" fg:x="2101" fg:w="1"/><text x="98.4276%" y="255.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 0.05%)</title><rect x="98.1776%" y="229" width="0.0467%" height="15" fill="rgb(244,192,49)" fg:x="2101" fg:w="1"/><text x="98.4276%" y="239.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::try_lock (15 samples, 0.70%)</title><rect x="98.2243%" y="293" width="0.7009%" height="15" fill="rgb(226,211,11)" fg:x="2102" fg:w="15"/><text x="98.4743%" y="303.50"></text></g><g><title>std::sys::sync::mutex::pthread::Mutex::try_lock (15 samples, 0.70%)</title><rect x="98.2243%" y="277" width="0.7009%" height="15" fill="rgb(236,162,54)" fg:x="2102" fg:w="15"/><text x="98.4743%" y="287.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::try_lock (5 samples, 0.23%)</title><rect x="98.6916%" y="261" width="0.2336%" height="15" fill="rgb(220,229,9)" fg:x="2112" fg:w="5"/><text x="98.9416%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.05%)</title><rect x="99.9065%" y="197" width="0.0467%" height="15" fill="rgb(250,87,22)" fg:x="2138" fg:w="1"/><text x="100.1565%" y="207.50"></text></g><g><title>all (2,140 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="2140"/><text x="0.2500%" y="607.50"></text></g><g><title>8451819584 (1,358 samples, 63.46%)</title><rect x="36.5421%" y="581" width="63.4579%" height="15" fill="rgb(231,177,25)" fg:x="782" fg:w="1358"/><text x="36.7921%" y="591.50">8451819584</text></g><g><title>_main (1,321 samples, 61.73%)</title><rect x="38.2710%" y="565" width="61.7290%" height="15" fill="rgb(219,179,1)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="575.50">_main</text></g><g><title>std::rt::lang_start_internal (1,321 samples, 61.73%)</title><rect x="38.2710%" y="549" width="61.7290%" height="15" fill="rgb(238,219,53)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,321 samples, 61.73%)</title><rect x="38.2710%" y="533" width="61.7290%" height="15" fill="rgb(232,167,36)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,321 samples, 61.73%)</title><rect x="38.2710%" y="517" width="61.7290%" height="15" fill="rgb(244,19,51)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,321 samples, 61.73%)</title><rect x="38.2710%" y="501" width="61.7290%" height="15" fill="rgb(224,6,22)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,321 samples, 61.73%)</title><rect x="38.2710%" y="485" width="61.7290%" height="15" fill="rgb(224,145,5)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,321 samples, 61.73%)</title><rect x="38.2710%" y="469" width="61.7290%" height="15" fill="rgb(234,130,49)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,321 samples, 61.73%)</title><rect x="38.2710%" y="453" width="61.7290%" height="15" fill="rgb(254,6,2)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,321 samples, 61.73%)</title><rect x="38.2710%" y="437" width="61.7290%" height="15" fill="rgb(208,96,46)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,321 samples, 61.73%)</title><rect x="38.2710%" y="421" width="61.7290%" height="15" fill="rgb(239,3,39)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,321 samples, 61.73%)</title><rect x="38.2710%" y="405" width="61.7290%" height="15" fill="rgb(233,210,1)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,321 samples, 61.73%)</title><rect x="38.2710%" y="389" width="61.7290%" height="15" fill="rgb(244,137,37)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="399.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,321 samples, 61.73%)</title><rect x="38.2710%" y="373" width="61.7290%" height="15" fill="rgb(240,136,2)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (1,321 samples, 61.73%)</title><rect x="38.2710%" y="357" width="61.7290%" height="15" fill="rgb(239,18,37)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="367.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (1,321 samples, 61.73%)</title><rect x="38.2710%" y="341" width="61.7290%" height="15" fill="rgb(218,185,22)" fg:x="819" fg:w="1321"/><text x="38.5210%" y="351.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (1,268 samples, 59.25%)</title><rect x="40.7477%" y="325" width="59.2523%" height="15" fill="rgb(225,218,4)" fg:x="872" fg:w="1268"/><text x="40.9977%" y="335.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (359 samples, 16.78%)</title><rect x="83.2243%" y="309" width="16.7757%" height="15" fill="rgb(230,182,32)" fg:x="1781" fg:w="359"/><text x="83.4743%" y="319.50">torpedo::renderer::render</text></g><g><title>torpedo::renderer::render_object (23 samples, 1.07%)</title><rect x="98.9252%" y="293" width="1.0748%" height="15" fill="rgb(242,56,43)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="303.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (23 samples, 1.07%)</title><rect x="98.9252%" y="277" width="1.0748%" height="15" fill="rgb(233,99,24)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="287.50"></text></g><g><title>Unknown (23 samples, 1.07%)</title><rect x="98.9252%" y="261" width="1.0748%" height="15" fill="rgb(234,209,42)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="271.50"></text></g><g><title>Unknown (23 samples, 1.07%)</title><rect x="98.9252%" y="245" width="1.0748%" height="15" fill="rgb(227,7,12)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="255.50"></text></g><g><title>Unknown (23 samples, 1.07%)</title><rect x="98.9252%" y="229" width="1.0748%" height="15" fill="rgb(245,203,43)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="239.50"></text></g><g><title>Unknown (23 samples, 1.07%)</title><rect x="98.9252%" y="213" width="1.0748%" height="15" fill="rgb(238,205,33)" fg:x="2117" fg:w="23"/><text x="99.1752%" y="223.50"></text></g><g><title>_proc_udata_info (1 samples, 0.05%)</title><rect x="99.9533%" y="197" width="0.0467%" height="15" fill="rgb(231,56,7)" fg:x="2139" fg:w="1"/><text x="100.2033%" y="207.50"></text></g></svg></svg>