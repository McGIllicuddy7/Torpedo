<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="835"><g><title>6092697600 (1 samples, 0.12%)</title><rect x="0.0000%" y="549" width="0.1198%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>6093271040 (2 samples, 0.24%)</title><rect x="0.1198%" y="549" width="0.2395%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3698%" y="559.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.12%)</title><rect x="0.2395%" y="533" width="0.1198%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4895%" y="543.50"></text></g><g><title>_geteuid (1 samples, 0.12%)</title><rect x="0.2395%" y="517" width="0.1198%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4895%" y="527.50"></text></g><g><title>___workq_open (4 samples, 0.48%)</title><rect x="0.3593%" y="517" width="0.4790%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="4"/><text x="0.6093%" y="527.50"></text></g><g><title>_proc_clear_dirty (6 samples, 0.72%)</title><rect x="0.8383%" y="485" width="0.7186%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="6"/><text x="1.0883%" y="495.50"></text></g><g><title>6093844480 (11 samples, 1.32%)</title><rect x="0.3593%" y="549" width="1.3174%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="11"/><text x="0.6093%" y="559.50"></text></g><g><title>__pthread_cond_wait (11 samples, 1.32%)</title><rect x="0.3593%" y="533" width="1.3174%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="11"/><text x="0.6093%" y="543.50"></text></g><g><title>_mach_continuous_time (7 samples, 0.84%)</title><rect x="0.8383%" y="517" width="0.8383%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="7"/><text x="1.0883%" y="527.50"></text></g><g><title>__kernelrpc_vm_read (7 samples, 0.84%)</title><rect x="0.8383%" y="501" width="0.8383%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="7"/><text x="1.0883%" y="511.50"></text></g><g><title>_proc_signal_delegate (1 samples, 0.12%)</title><rect x="1.5569%" y="485" width="0.1198%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="1.8069%" y="495.50"></text></g><g><title>6094991360 (1 samples, 0.12%)</title><rect x="1.6766%" y="549" width="0.1198%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="1.9266%" y="559.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.12%)</title><rect x="1.6766%" y="533" width="0.1198%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="1"/><text x="1.9266%" y="543.50"></text></g><g><title>6095564800 (2 samples, 0.24%)</title><rect x="1.7964%" y="549" width="0.2395%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="2"/><text x="2.0464%" y="559.50"></text></g><g><title>__pthread_wqthread_setup (2 samples, 0.24%)</title><rect x="1.7964%" y="533" width="0.2395%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="2"/><text x="2.0464%" y="543.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="1.9162%" y="517" width="0.1198%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="1"/><text x="2.1662%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="2.0359%" y="309" width="0.1198%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="1"/><text x="2.2859%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="2.0359%" y="293" width="0.1198%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="1"/><text x="2.2859%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="2.0359%" y="277" width="0.1198%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="1"/><text x="2.2859%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="2.0359%" y="261" width="0.1198%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="2.2859%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="2.0359%" y="245" width="0.1198%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="2.2859%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="2.0359%" y="229" width="0.1198%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="1"/><text x="2.2859%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="2.0359%" y="213" width="0.1198%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="1"/><text x="2.2859%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="2.0359%" y="197" width="0.1198%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="1"/><text x="2.2859%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="2.0359%" y="181" width="0.1198%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="1"/><text x="2.2859%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.12%)</title><rect x="2.0359%" y="165" width="0.1198%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="2.2859%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="2.0359%" y="149" width="0.1198%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="2.2859%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="2.0359%" y="133" width="0.1198%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="1"/><text x="2.2859%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="2.0359%" y="117" width="0.1198%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="1"/><text x="2.2859%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.36%)</title><rect x="2.1557%" y="229" width="0.3593%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="3"/><text x="2.4057%" y="239.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.36%)</title><rect x="2.1557%" y="213" width="0.3593%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="3"/><text x="2.4057%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.36%)</title><rect x="2.1557%" y="197" width="0.3593%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="3"/><text x="2.4057%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.36%)</title><rect x="2.1557%" y="181" width="0.3593%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="3"/><text x="2.4057%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.36%)</title><rect x="2.1557%" y="165" width="0.3593%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="3"/><text x="2.4057%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.36%)</title><rect x="2.1557%" y="149" width="0.3593%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="3"/><text x="2.4057%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.36%)</title><rect x="2.1557%" y="133" width="0.3593%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="3"/><text x="2.4057%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.36%)</title><rect x="2.1557%" y="117" width="0.3593%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="3"/><text x="2.4057%" y="127.50"></text></g><g><title>6098284544 (5 samples, 0.60%)</title><rect x="2.0359%" y="549" width="0.5988%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="5"/><text x="2.2859%" y="559.50"></text></g><g><title>__pthread_cond_wait (5 samples, 0.60%)</title><rect x="2.0359%" y="533" width="0.5988%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="5"/><text x="2.2859%" y="543.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5 samples, 0.60%)</title><rect x="2.0359%" y="517" width="0.5988%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="5"/><text x="2.2859%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.60%)</title><rect x="2.0359%" y="501" width="0.5988%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="5"/><text x="2.2859%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.60%)</title><rect x="2.0359%" y="485" width="0.5988%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="5"/><text x="2.2859%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.60%)</title><rect x="2.0359%" y="469" width="0.5988%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="5"/><text x="2.2859%" y="479.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (5 samples, 0.60%)</title><rect x="2.0359%" y="453" width="0.5988%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="5"/><text x="2.2859%" y="463.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.60%)</title><rect x="2.0359%" y="437" width="0.5988%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="5"/><text x="2.2859%" y="447.50"></text></g><g><title>std::panicking::try (5 samples, 0.60%)</title><rect x="2.0359%" y="421" width="0.5988%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="5"/><text x="2.2859%" y="431.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.60%)</title><rect x="2.0359%" y="405" width="0.5988%" height="15" fill="rgb(218,138,4)" fg:x="17" fg:w="5"/><text x="2.2859%" y="415.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.60%)</title><rect x="2.0359%" y="389" width="0.5988%" height="15" fill="rgb(250,191,14)" fg:x="17" fg:w="5"/><text x="2.2859%" y="399.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (5 samples, 0.60%)</title><rect x="2.0359%" y="373" width="0.5988%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="5"/><text x="2.2859%" y="383.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5 samples, 0.60%)</title><rect x="2.0359%" y="357" width="0.5988%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="5"/><text x="2.2859%" y="367.50"></text></g><g><title>torpedo::level::level_loop::{{closure}} (5 samples, 0.60%)</title><rect x="2.0359%" y="341" width="0.5988%" height="15" fill="rgb(225,35,8)" fg:x="17" fg:w="5"/><text x="2.2859%" y="351.50"></text></g><g><title>torpedo::physics::update (5 samples, 0.60%)</title><rect x="2.0359%" y="325" width="0.5988%" height="15" fill="rgb(250,213,24)" fg:x="17" fg:w="5"/><text x="2.2859%" y="335.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (4 samples, 0.48%)</title><rect x="2.1557%" y="309" width="0.4790%" height="15" fill="rgb(247,123,22)" fg:x="18" fg:w="4"/><text x="2.4057%" y="319.50"></text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (4 samples, 0.48%)</title><rect x="2.1557%" y="293" width="0.4790%" height="15" fill="rgb(231,138,38)" fg:x="18" fg:w="4"/><text x="2.4057%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (4 samples, 0.48%)</title><rect x="2.1557%" y="277" width="0.4790%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="4"/><text x="2.4057%" y="287.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (4 samples, 0.48%)</title><rect x="2.1557%" y="261" width="0.4790%" height="15" fill="rgb(251,118,11)" fg:x="18" fg:w="4"/><text x="2.4057%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (4 samples, 0.48%)</title><rect x="2.1557%" y="245" width="0.4790%" height="15" fill="rgb(217,147,25)" fg:x="18" fg:w="4"/><text x="2.4057%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.12%)</title><rect x="2.5150%" y="229" width="0.1198%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="2.7650%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.12%)</title><rect x="2.5150%" y="213" width="0.1198%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="2.7650%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (1 samples, 0.12%)</title><rect x="2.5150%" y="197" width="0.1198%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="1"/><text x="2.7650%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (1 samples, 0.12%)</title><rect x="2.5150%" y="181" width="0.1198%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="2.7650%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (1 samples, 0.12%)</title><rect x="2.5150%" y="165" width="0.1198%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="2.7650%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="2.5150%" y="149" width="0.1198%" height="15" fill="rgb(210,229,1)" fg:x="21" fg:w="1"/><text x="2.7650%" y="159.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 1.56%)</title><rect x="2.6347%" y="309" width="1.5569%" height="15" fill="rgb(222,148,37)" fg:x="22" fg:w="13"/><text x="2.8847%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (13 samples, 1.56%)</title><rect x="2.6347%" y="293" width="1.5569%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="13"/><text x="2.8847%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (13 samples, 1.56%)</title><rect x="2.6347%" y="277" width="1.5569%" height="15" fill="rgb(247,98,35)" fg:x="22" fg:w="13"/><text x="2.8847%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 1.56%)</title><rect x="2.6347%" y="261" width="1.5569%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="13"/><text x="2.8847%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 1.56%)</title><rect x="2.6347%" y="245" width="1.5569%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="13"/><text x="2.8847%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 1.56%)</title><rect x="2.6347%" y="229" width="1.5569%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="13"/><text x="2.8847%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 1.56%)</title><rect x="2.6347%" y="213" width="1.5569%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="13"/><text x="2.8847%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 1.56%)</title><rect x="2.6347%" y="197" width="1.5569%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="13"/><text x="2.8847%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (13 samples, 1.56%)</title><rect x="2.6347%" y="181" width="1.5569%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="13"/><text x="2.8847%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (13 samples, 1.56%)</title><rect x="2.6347%" y="165" width="1.5569%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="13"/><text x="2.8847%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 1.56%)</title><rect x="2.6347%" y="149" width="1.5569%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="13"/><text x="2.8847%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 1.56%)</title><rect x="2.6347%" y="133" width="1.5569%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="13"/><text x="2.8847%" y="143.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 1.56%)</title><rect x="2.6347%" y="117" width="1.5569%" height="15" fill="rgb(207,117,47)" fg:x="22" fg:w="13"/><text x="2.8847%" y="127.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (8 samples, 0.96%)</title><rect x="4.1916%" y="309" width="0.9581%" height="15" fill="rgb(249,43,39)" fg:x="35" fg:w="8"/><text x="4.4416%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.96%)</title><rect x="4.1916%" y="293" width="0.9581%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="8"/><text x="4.4416%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.96%)</title><rect x="4.1916%" y="277" width="0.9581%" height="15" fill="rgb(236,212,23)" fg:x="35" fg:w="8"/><text x="4.4416%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.96%)</title><rect x="4.1916%" y="261" width="0.9581%" height="15" fill="rgb(242,79,21)" fg:x="35" fg:w="8"/><text x="4.4416%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.96%)</title><rect x="4.1916%" y="245" width="0.9581%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="8"/><text x="4.4416%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.96%)</title><rect x="4.1916%" y="229" width="0.9581%" height="15" fill="rgb(253,215,40)" fg:x="35" fg:w="8"/><text x="4.4416%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.96%)</title><rect x="4.1916%" y="213" width="0.9581%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="8"/><text x="4.4416%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8 samples, 0.96%)</title><rect x="4.1916%" y="197" width="0.9581%" height="15" fill="rgb(208,190,38)" fg:x="35" fg:w="8"/><text x="4.4416%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8 samples, 0.96%)</title><rect x="4.1916%" y="181" width="0.9581%" height="15" fill="rgb(235,213,38)" fg:x="35" fg:w="8"/><text x="4.4416%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.96%)</title><rect x="4.1916%" y="165" width="0.9581%" height="15" fill="rgb(237,122,38)" fg:x="35" fg:w="8"/><text x="4.4416%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.96%)</title><rect x="4.1916%" y="149" width="0.9581%" height="15" fill="rgb(244,218,35)" fg:x="35" fg:w="8"/><text x="4.4416%" y="159.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.96%)</title><rect x="4.1916%" y="133" width="0.9581%" height="15" fill="rgb(240,68,47)" fg:x="35" fg:w="8"/><text x="4.4416%" y="143.50"></text></g><g><title>&lt;torpedo::physics::PhysicsComp as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="5.1497%" y="309" width="0.1198%" height="15" fill="rgb(210,16,53)" fg:x="43" fg:w="1"/><text x="5.3997%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="5.1497%" y="293" width="0.1198%" height="15" fill="rgb(235,124,12)" fg:x="43" fg:w="1"/><text x="5.3997%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="5.1497%" y="277" width="0.1198%" height="15" fill="rgb(224,169,11)" fg:x="43" fg:w="1"/><text x="5.3997%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="5.1497%" y="261" width="0.1198%" height="15" fill="rgb(250,166,2)" fg:x="43" fg:w="1"/><text x="5.3997%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="5.1497%" y="245" width="0.1198%" height="15" fill="rgb(242,216,29)" fg:x="43" fg:w="1"/><text x="5.3997%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="5.1497%" y="229" width="0.1198%" height="15" fill="rgb(230,116,27)" fg:x="43" fg:w="1"/><text x="5.3997%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="5.1497%" y="213" width="0.1198%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="1"/><text x="5.3997%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="5.1497%" y="197" width="0.1198%" height="15" fill="rgb(253,11,6)" fg:x="43" fg:w="1"/><text x="5.3997%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.12%)</title><rect x="5.1497%" y="181" width="0.1198%" height="15" fill="rgb(247,143,39)" fg:x="43" fg:w="1"/><text x="5.3997%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="5.1497%" y="165" width="0.1198%" height="15" fill="rgb(236,97,10)" fg:x="43" fg:w="1"/><text x="5.3997%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="5.1497%" y="149" width="0.1198%" height="15" fill="rgb(233,208,19)" fg:x="43" fg:w="1"/><text x="5.3997%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="5.1497%" y="133" width="0.1198%" height="15" fill="rgb(216,164,2)" fg:x="43" fg:w="1"/><text x="5.3997%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (64 samples, 7.66%)</title><rect x="5.2695%" y="309" width="7.6647%" height="15" fill="rgb(220,129,5)" fg:x="44" fg:w="64"/><text x="5.5195%" y="319.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (64 samples, 7.66%)</title><rect x="5.2695%" y="293" width="7.6647%" height="15" fill="rgb(242,17,10)" fg:x="44" fg:w="64"/><text x="5.5195%" y="303.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (64 samples, 7.66%)</title><rect x="5.2695%" y="277" width="7.6647%" height="15" fill="rgb(242,107,0)" fg:x="44" fg:w="64"/><text x="5.5195%" y="287.50">core::ptr:..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 7.66%)</title><rect x="5.2695%" y="261" width="7.6647%" height="15" fill="rgb(251,28,31)" fg:x="44" fg:w="64"/><text x="5.5195%" y="271.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (64 samples, 7.66%)</title><rect x="5.2695%" y="245" width="7.6647%" height="15" fill="rgb(233,223,10)" fg:x="44" fg:w="64"/><text x="5.5195%" y="255.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (64 samples, 7.66%)</title><rect x="5.2695%" y="229" width="7.6647%" height="15" fill="rgb(215,21,27)" fg:x="44" fg:w="64"/><text x="5.5195%" y="239.50">alloc::all..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (2 samples, 0.24%)</title><rect x="12.9341%" y="309" width="0.2395%" height="15" fill="rgb(232,23,21)" fg:x="108" fg:w="2"/><text x="13.1841%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (2 samples, 0.24%)</title><rect x="12.9341%" y="293" width="0.2395%" height="15" fill="rgb(244,5,23)" fg:x="108" fg:w="2"/><text x="13.1841%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.24%)</title><rect x="12.9341%" y="277" width="0.2395%" height="15" fill="rgb(226,81,46)" fg:x="108" fg:w="2"/><text x="13.1841%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.24%)</title><rect x="12.9341%" y="261" width="0.2395%" height="15" fill="rgb(247,70,30)" fg:x="108" fg:w="2"/><text x="13.1841%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.24%)</title><rect x="12.9341%" y="245" width="0.2395%" height="15" fill="rgb(212,68,19)" fg:x="108" fg:w="2"/><text x="13.1841%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.24%)</title><rect x="12.9341%" y="229" width="0.2395%" height="15" fill="rgb(240,187,13)" fg:x="108" fg:w="2"/><text x="13.1841%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (2 samples, 0.24%)</title><rect x="13.1737%" y="309" width="0.2395%" height="15" fill="rgb(223,113,26)" fg:x="110" fg:w="2"/><text x="13.4237%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (2 samples, 0.24%)</title><rect x="13.1737%" y="293" width="0.2395%" height="15" fill="rgb(206,192,2)" fg:x="110" fg:w="2"/><text x="13.4237%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.24%)</title><rect x="13.1737%" y="277" width="0.2395%" height="15" fill="rgb(241,108,4)" fg:x="110" fg:w="2"/><text x="13.4237%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.24%)</title><rect x="13.1737%" y="261" width="0.2395%" height="15" fill="rgb(247,173,49)" fg:x="110" fg:w="2"/><text x="13.4237%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.24%)</title><rect x="13.1737%" y="245" width="0.2395%" height="15" fill="rgb(224,114,35)" fg:x="110" fg:w="2"/><text x="13.4237%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (115 samples, 13.77%)</title><rect x="13.7725%" y="133" width="13.7725%" height="15" fill="rgb(245,159,27)" fg:x="115" fg:w="115"/><text x="14.0225%" y="143.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (115 samples, 13.77%)</title><rect x="13.7725%" y="117" width="13.7725%" height="15" fill="rgb(245,172,44)" fg:x="115" fg:w="115"/><text x="14.0225%" y="127.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (115 samples, 13.77%)</title><rect x="13.7725%" y="101" width="13.7725%" height="15" fill="rgb(236,23,11)" fg:x="115" fg:w="115"/><text x="14.0225%" y="111.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (115 samples, 13.77%)</title><rect x="13.7725%" y="85" width="13.7725%" height="15" fill="rgb(205,117,38)" fg:x="115" fg:w="115"/><text x="14.0225%" y="95.50">alloc::raw_vec::RawVe..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115 samples, 13.77%)</title><rect x="13.7725%" y="69" width="13.7725%" height="15" fill="rgb(237,72,25)" fg:x="115" fg:w="115"/><text x="14.0225%" y="79.50">&lt;alloc::alloc::Global..</text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 13.77%)</title><rect x="13.7725%" y="53" width="13.7725%" height="15" fill="rgb(244,70,9)" fg:x="115" fg:w="115"/><text x="14.0225%" y="63.50">alloc::alloc::Global:..</text></g><g><title>alloc::alloc::alloc (115 samples, 13.77%)</title><rect x="13.7725%" y="37" width="13.7725%" height="15" fill="rgb(217,125,39)" fg:x="115" fg:w="115"/><text x="14.0225%" y="47.50">alloc::alloc::alloc</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (140 samples, 16.77%)</title><rect x="13.4132%" y="229" width="16.7665%" height="15" fill="rgb(235,36,10)" fg:x="112" fg:w="140"/><text x="13.6632%" y="239.50">&lt;core::option::Option&lt;T&gt; a..</text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (140 samples, 16.77%)</title><rect x="13.4132%" y="213" width="16.7665%" height="15" fill="rgb(251,123,47)" fg:x="112" fg:w="140"/><text x="13.6632%" y="223.50">&lt;torpedo::level::Transform..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (137 samples, 16.41%)</title><rect x="13.7725%" y="197" width="16.4072%" height="15" fill="rgb(221,13,13)" fg:x="115" fg:w="137"/><text x="14.0225%" y="207.50">&lt;alloc::boxed::Box&lt;[T],A&gt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (137 samples, 16.41%)</title><rect x="13.7725%" y="181" width="16.4072%" height="15" fill="rgb(238,131,9)" fg:x="115" fg:w="137"/><text x="14.0225%" y="191.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>alloc::slice::hack::to_vec (137 samples, 16.41%)</title><rect x="13.7725%" y="165" width="16.4072%" height="15" fill="rgb(211,50,8)" fg:x="115" fg:w="137"/><text x="14.0225%" y="175.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (137 samples, 16.41%)</title><rect x="13.7725%" y="149" width="16.4072%" height="15" fill="rgb(245,182,24)" fg:x="115" fg:w="137"/><text x="14.0225%" y="159.50">&lt;T as alloc::slice::hack:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22 samples, 2.63%)</title><rect x="27.5449%" y="133" width="2.6347%" height="15" fill="rgb(242,14,37)" fg:x="230" fg:w="22"/><text x="27.7949%" y="143.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 2.63%)</title><rect x="27.5449%" y="117" width="2.6347%" height="15" fill="rgb(246,228,12)" fg:x="230" fg:w="22"/><text x="27.7949%" y="127.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="197" width="0.1198%" height="15" fill="rgb(213,55,15)" fg:x="252" fg:w="1"/><text x="30.4296%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="181" width="0.1198%" height="15" fill="rgb(209,9,3)" fg:x="252" fg:w="1"/><text x="30.4296%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="30.1796%" y="165" width="0.1198%" height="15" fill="rgb(230,59,30)" fg:x="252" fg:w="1"/><text x="30.4296%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (1 samples, 0.12%)</title><rect x="30.1796%" y="149" width="0.1198%" height="15" fill="rgb(209,121,21)" fg:x="252" fg:w="1"/><text x="30.4296%" y="159.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (1 samples, 0.12%)</title><rect x="30.1796%" y="133" width="0.1198%" height="15" fill="rgb(220,109,13)" fg:x="252" fg:w="1"/><text x="30.4296%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (1 samples, 0.12%)</title><rect x="30.1796%" y="117" width="0.1198%" height="15" fill="rgb(232,18,1)" fg:x="252" fg:w="1"/><text x="30.4296%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="101" width="0.1198%" height="15" fill="rgb(215,41,42)" fg:x="252" fg:w="1"/><text x="30.4296%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="85" width="0.1198%" height="15" fill="rgb(224,123,36)" fg:x="252" fg:w="1"/><text x="30.4296%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="69" width="0.1198%" height="15" fill="rgb(240,125,3)" fg:x="252" fg:w="1"/><text x="30.4296%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;torpedo::physics::Collision&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1796%" y="53" width="0.1198%" height="15" fill="rgb(205,98,50)" fg:x="252" fg:w="1"/><text x="30.4296%" y="63.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="30.1796%" y="37" width="0.1198%" height="15" fill="rgb(205,185,37)" fg:x="252" fg:w="1"/><text x="30.4296%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (143 samples, 17.13%)</title><rect x="13.4132%" y="277" width="17.1257%" height="15" fill="rgb(238,207,15)" fg:x="112" fg:w="143"/><text x="13.6632%" y="287.50">core::slice::&lt;impl [T]&gt;::cl..</text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (143 samples, 17.13%)</title><rect x="13.4132%" y="261" width="17.1257%" height="15" fill="rgb(213,199,42)" fg:x="112" fg:w="143"/><text x="13.6632%" y="271.50">&lt;[T] as core::slice::CloneF..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone_from (143 samples, 17.13%)</title><rect x="13.4132%" y="245" width="17.1257%" height="15" fill="rgb(235,201,11)" fg:x="112" fg:w="143"/><text x="13.6632%" y="255.50">&lt;core::option::Option&lt;T&gt; as..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::physics::PhysicsComp&gt;&gt; (3 samples, 0.36%)</title><rect x="30.1796%" y="229" width="0.3593%" height="15" fill="rgb(207,46,11)" fg:x="252" fg:w="3"/><text x="30.4296%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::physics::PhysicsComp&gt; (3 samples, 0.36%)</title><rect x="30.1796%" y="213" width="0.3593%" height="15" fill="rgb(241,35,35)" fg:x="252" fg:w="3"/><text x="30.4296%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,usize&gt;&gt; (2 samples, 0.24%)</title><rect x="30.2994%" y="197" width="0.2395%" height="15" fill="rgb(243,32,47)" fg:x="253" fg:w="2"/><text x="30.5494%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.24%)</title><rect x="30.2994%" y="181" width="0.2395%" height="15" fill="rgb(247,202,23)" fg:x="253" fg:w="2"/><text x="30.5494%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,usize)&gt;&gt; (2 samples, 0.24%)</title><rect x="30.2994%" y="165" width="0.2395%" height="15" fill="rgb(219,102,11)" fg:x="253" fg:w="2"/><text x="30.5494%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.24%)</title><rect x="30.2994%" y="149" width="0.2395%" height="15" fill="rgb(243,110,44)" fg:x="253" fg:w="2"/><text x="30.5494%" y="159.50"></text></g><g><title>torpedo::arena::Arena::alloc_array_no_destructor (145 samples, 17.37%)</title><rect x="13.4132%" y="309" width="17.3653%" height="15" fill="rgb(222,74,54)" fg:x="112" fg:w="145"/><text x="13.6632%" y="319.50">torpedo::arena::Arena::allo..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_array (145 samples, 17.37%)</title><rect x="13.4132%" y="293" width="17.3653%" height="15" fill="rgb(216,99,12)" fg:x="112" fg:w="145"/><text x="13.6632%" y="303.50">torpedo::arena::ArenaIntern..</text></g><g><title>torpedo::arena::ArenaInternal::alloc_bytes (2 samples, 0.24%)</title><rect x="30.5389%" y="277" width="0.2395%" height="15" fill="rgb(226,22,26)" fg:x="255" fg:w="2"/><text x="30.7889%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.24%)</title><rect x="30.7784%" y="213" width="0.2395%" height="15" fill="rgb(217,163,10)" fg:x="257" fg:w="2"/><text x="31.0284%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.24%)</title><rect x="30.7784%" y="197" width="0.2395%" height="15" fill="rgb(213,25,53)" fg:x="257" fg:w="2"/><text x="31.0284%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.24%)</title><rect x="30.7784%" y="181" width="0.2395%" height="15" fill="rgb(252,105,26)" fg:x="257" fg:w="2"/><text x="31.0284%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.24%)</title><rect x="30.7784%" y="165" width="0.2395%" height="15" fill="rgb(220,39,43)" fg:x="257" fg:w="2"/><text x="31.0284%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.24%)</title><rect x="30.7784%" y="149" width="0.2395%" height="15" fill="rgb(229,68,48)" fg:x="257" fg:w="2"/><text x="31.0284%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.24%)</title><rect x="30.7784%" y="133" width="0.2395%" height="15" fill="rgb(252,8,32)" fg:x="257" fg:w="2"/><text x="31.0284%" y="143.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.24%)</title><rect x="30.7784%" y="117" width="0.2395%" height="15" fill="rgb(223,20,43)" fg:x="257" fg:w="2"/><text x="31.0284%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (238 samples, 28.50%)</title><rect x="2.6347%" y="501" width="28.5030%" height="15" fill="rgb(229,81,49)" fg:x="22" fg:w="238"/><text x="2.8847%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (238 samples, 28.50%)</title><rect x="2.6347%" y="485" width="28.5030%" height="15" fill="rgb(236,28,36)" fg:x="22" fg:w="238"/><text x="2.8847%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (238 samples, 28.50%)</title><rect x="2.6347%" y="469" width="28.5030%" height="15" fill="rgb(249,185,26)" fg:x="22" fg:w="238"/><text x="2.8847%" y="479.50">core::ops::function::FnOnce::call_once{{vtable..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (238 samples, 28.50%)</title><rect x="2.6347%" y="453" width="28.5030%" height="15" fill="rgb(249,174,33)" fg:x="22" fg:w="238"/><text x="2.8847%" y="463.50">std::thread::Builder::spawn_unchecked_::{{clos..</text></g><g><title>std::panic::catch_unwind (238 samples, 28.50%)</title><rect x="2.6347%" y="437" width="28.5030%" height="15" fill="rgb(233,201,37)" fg:x="22" fg:w="238"/><text x="2.8847%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (238 samples, 28.50%)</title><rect x="2.6347%" y="421" width="28.5030%" height="15" fill="rgb(221,78,26)" fg:x="22" fg:w="238"/><text x="2.8847%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (238 samples, 28.50%)</title><rect x="2.6347%" y="405" width="28.5030%" height="15" fill="rgb(250,127,30)" fg:x="22" fg:w="238"/><text x="2.8847%" y="415.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (238 samples, 28.50%)</title><rect x="2.6347%" y="389" width="28.5030%" height="15" fill="rgb(230,49,44)" fg:x="22" fg:w="238"/><text x="2.8847%" y="399.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (238 samples, 28.50%)</title><rect x="2.6347%" y="373" width="28.5030%" height="15" fill="rgb(229,67,23)" fg:x="22" fg:w="238"/><text x="2.8847%" y="383.50">std::thread::Builder::spawn_unchecked_::{{clos..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (238 samples, 28.50%)</title><rect x="2.6347%" y="357" width="28.5030%" height="15" fill="rgb(249,83,47)" fg:x="22" fg:w="238"/><text x="2.8847%" y="367.50">std::sys::backtrace::__rust_begin_short_backtr..</text></g><g><title>torpedo::level::level_loop::{{closure}} (238 samples, 28.50%)</title><rect x="2.6347%" y="341" width="28.5030%" height="15" fill="rgb(215,43,3)" fg:x="22" fg:w="238"/><text x="2.8847%" y="351.50">torpedo::level::level_loop::{{closure}}</text></g><g><title>torpedo::physics::update (238 samples, 28.50%)</title><rect x="2.6347%" y="325" width="28.5030%" height="15" fill="rgb(238,154,13)" fg:x="22" fg:w="238"/><text x="2.8847%" y="335.50">torpedo::physics::update</text></g><g><title>torpedo::physics::check_collision_comps (3 samples, 0.36%)</title><rect x="30.7784%" y="309" width="0.3593%" height="15" fill="rgb(219,56,2)" fg:x="257" fg:w="3"/><text x="31.0284%" y="319.50"></text></g><g><title>&lt;torpedo::level::TransformComp as core::clone::Clone&gt;::clone (3 samples, 0.36%)</title><rect x="30.7784%" y="293" width="0.3593%" height="15" fill="rgb(233,0,4)" fg:x="257" fg:w="3"/><text x="31.0284%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.36%)</title><rect x="30.7784%" y="277" width="0.3593%" height="15" fill="rgb(235,30,7)" fg:x="257" fg:w="3"/><text x="31.0284%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.36%)</title><rect x="30.7784%" y="261" width="0.3593%" height="15" fill="rgb(250,79,13)" fg:x="257" fg:w="3"/><text x="31.0284%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.36%)</title><rect x="30.7784%" y="245" width="0.3593%" height="15" fill="rgb(211,146,34)" fg:x="257" fg:w="3"/><text x="31.0284%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.36%)</title><rect x="30.7784%" y="229" width="0.3593%" height="15" fill="rgb(228,22,38)" fg:x="257" fg:w="3"/><text x="31.0284%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.12%)</title><rect x="31.0180%" y="213" width="0.1198%" height="15" fill="rgb(235,168,5)" fg:x="259" fg:w="1"/><text x="31.2680%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="31.0180%" y="197" width="0.1198%" height="15" fill="rgb(221,155,16)" fg:x="259" fg:w="1"/><text x="31.2680%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::stack_overflow::Handler&gt; (108 samples, 12.93%)</title><rect x="31.1377%" y="501" width="12.9341%" height="15" fill="rgb(215,215,53)" fg:x="260" fg:w="108"/><text x="31.3877%" y="511.50">core::ptr::drop_in_..</text></g><g><title>&lt;std::sys::pal::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (108 samples, 12.93%)</title><rect x="31.1377%" y="485" width="12.9341%" height="15" fill="rgb(223,4,10)" fg:x="260" fg:w="108"/><text x="31.3877%" y="495.50">&lt;std::sys::pal::uni..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::drop_handler (108 samples, 12.93%)</title><rect x="31.1377%" y="469" width="12.9341%" height="15" fill="rgb(234,103,6)" fg:x="260" fg:w="108"/><text x="31.3877%" y="479.50">std::sys::pal::unix..</text></g><g><title>6099398656 (347 samples, 41.56%)</title><rect x="2.6347%" y="549" width="41.5569%" height="15" fill="rgb(227,97,0)" fg:x="22" fg:w="347"/><text x="2.8847%" y="559.50">6099398656</text></g><g><title>__pthread_cond_wait (347 samples, 41.56%)</title><rect x="2.6347%" y="533" width="41.5569%" height="15" fill="rgb(234,150,53)" fg:x="22" fg:w="347"/><text x="2.8847%" y="543.50">__pthread_cond_wait</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (347 samples, 41.56%)</title><rect x="2.6347%" y="517" width="41.5569%" height="15" fill="rgb(228,201,54)" fg:x="22" fg:w="347"/><text x="2.8847%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (1 samples, 0.12%)</title><rect x="44.0719%" y="501" width="0.1198%" height="15" fill="rgb(222,22,37)" fg:x="368" fg:w="1"/><text x="44.3219%" y="511.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.12%)</title><rect x="44.0719%" y="485" width="0.1198%" height="15" fill="rgb(237,53,32)" fg:x="368" fg:w="1"/><text x="44.3219%" y="495.50"></text></g><g><title>__os_alloc (1 samples, 0.12%)</title><rect x="47.3054%" y="533" width="0.1198%" height="15" fill="rgb(233,25,53)" fg:x="395" fg:w="1"/><text x="47.5554%" y="543.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.12%)</title><rect x="47.4251%" y="533" width="0.1198%" height="15" fill="rgb(210,40,34)" fg:x="396" fg:w="1"/><text x="47.6751%" y="543.50"></text></g><g><title>__platform_strnlen (1 samples, 0.12%)</title><rect x="47.4251%" y="517" width="0.1198%" height="15" fill="rgb(241,220,44)" fg:x="396" fg:w="1"/><text x="47.6751%" y="527.50"></text></g><g><title>__platform_strnlen (1 samples, 0.12%)</title><rect x="47.4251%" y="501" width="0.1198%" height="15" fill="rgb(235,28,35)" fg:x="396" fg:w="1"/><text x="47.6751%" y="511.50"></text></g><g><title>__pthread_wqthread (1 samples, 0.12%)</title><rect x="47.4251%" y="485" width="0.1198%" height="15" fill="rgb(210,56,17)" fg:x="396" fg:w="1"/><text x="47.6751%" y="495.50"></text></g><g><title>___workq_open (1 samples, 0.12%)</title><rect x="47.4251%" y="469" width="0.1198%" height="15" fill="rgb(224,130,29)" fg:x="396" fg:w="1"/><text x="47.6751%" y="479.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.12%)</title><rect x="47.5449%" y="533" width="0.1198%" height="15" fill="rgb(235,212,8)" fg:x="397" fg:w="1"/><text x="47.7949%" y="543.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.12%)</title><rect x="47.5449%" y="517" width="0.1198%" height="15" fill="rgb(223,33,50)" fg:x="397" fg:w="1"/><text x="47.7949%" y="527.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="47.5449%" y="501" width="0.1198%" height="15" fill="rgb(219,149,13)" fg:x="397" fg:w="1"/><text x="47.7949%" y="511.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.12%)</title><rect x="48.2635%" y="197" width="0.1198%" height="15" fill="rgb(250,156,29)" fg:x="403" fg:w="1"/><text x="48.5135%" y="207.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.12%)</title><rect x="48.2635%" y="181" width="0.1198%" height="15" fill="rgb(216,193,19)" fg:x="403" fg:w="1"/><text x="48.5135%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="48.2635%" y="165" width="0.1198%" height="15" fill="rgb(216,135,14)" fg:x="403" fg:w="1"/><text x="48.5135%" y="175.50"></text></g><g><title>Unknown (7 samples, 0.84%)</title><rect x="47.7844%" y="213" width="0.8383%" height="15" fill="rgb(241,47,5)" fg:x="399" fg:w="7"/><text x="48.0344%" y="223.50"></text></g><g><title>_proc_clear_dirty (2 samples, 0.24%)</title><rect x="48.3832%" y="197" width="0.2395%" height="15" fill="rgb(233,42,35)" fg:x="404" fg:w="2"/><text x="48.6332%" y="207.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.12%)</title><rect x="48.6228%" y="213" width="0.1198%" height="15" fill="rgb(231,13,6)" fg:x="406" fg:w="1"/><text x="48.8728%" y="223.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.12%)</title><rect x="48.6228%" y="197" width="0.1198%" height="15" fill="rgb(207,181,40)" fg:x="406" fg:w="1"/><text x="48.8728%" y="207.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="48.6228%" y="181" width="0.1198%" height="15" fill="rgb(254,173,49)" fg:x="406" fg:w="1"/><text x="48.8728%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::RaylibHandle&gt; (10 samples, 1.20%)</title><rect x="47.6647%" y="293" width="1.1976%" height="15" fill="rgb(221,1,38)" fg:x="398" fg:w="10"/><text x="47.9147%" y="303.50"></text></g><g><title>Unknown (10 samples, 1.20%)</title><rect x="47.6647%" y="277" width="1.1976%" height="15" fill="rgb(206,124,46)" fg:x="398" fg:w="10"/><text x="47.9147%" y="287.50"></text></g><g><title>Unknown (10 samples, 1.20%)</title><rect x="47.6647%" y="261" width="1.1976%" height="15" fill="rgb(249,21,11)" fg:x="398" fg:w="10"/><text x="47.9147%" y="271.50"></text></g><g><title>Unknown (10 samples, 1.20%)</title><rect x="47.6647%" y="245" width="1.1976%" height="15" fill="rgb(222,201,40)" fg:x="398" fg:w="10"/><text x="47.9147%" y="255.50"></text></g><g><title>Unknown (10 samples, 1.20%)</title><rect x="47.6647%" y="229" width="1.1976%" height="15" fill="rgb(235,61,29)" fg:x="398" fg:w="10"/><text x="47.9147%" y="239.50"></text></g><g><title>_semaphore_create (1 samples, 0.12%)</title><rect x="48.7425%" y="213" width="0.1198%" height="15" fill="rgb(219,207,3)" fg:x="407" fg:w="1"/><text x="48.9925%" y="223.50"></text></g><g><title>Unknown (11 samples, 1.32%)</title><rect x="51.3772%" y="181" width="1.3174%" height="15" fill="rgb(222,56,46)" fg:x="429" fg:w="11"/><text x="51.6272%" y="191.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (2 samples, 0.24%)</title><rect x="52.4551%" y="165" width="0.2395%" height="15" fill="rgb(239,76,54)" fg:x="438" fg:w="2"/><text x="52.7051%" y="175.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.12%)</title><rect x="52.6946%" y="181" width="0.1198%" height="15" fill="rgb(231,124,27)" fg:x="440" fg:w="1"/><text x="52.9446%" y="191.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.12%)</title><rect x="52.8144%" y="181" width="0.1198%" height="15" fill="rgb(249,195,6)" fg:x="441" fg:w="1"/><text x="53.0644%" y="191.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.12%)</title><rect x="52.8144%" y="165" width="0.1198%" height="15" fill="rgb(237,174,47)" fg:x="441" fg:w="1"/><text x="53.0644%" y="175.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="52.8144%" y="149" width="0.1198%" height="15" fill="rgb(206,201,31)" fg:x="441" fg:w="1"/><text x="53.0644%" y="159.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (2 samples, 0.24%)</title><rect x="52.9341%" y="181" width="0.2395%" height="15" fill="rgb(231,57,52)" fg:x="442" fg:w="2"/><text x="53.1841%" y="191.50"></text></g><g><title>Unknown (28 samples, 3.35%)</title><rect x="50.2994%" y="197" width="3.3533%" height="15" fill="rgb(248,177,22)" fg:x="420" fg:w="28"/><text x="50.5494%" y="207.50">Unk..</text></g><g><title>_proc_clear_dirty (4 samples, 0.48%)</title><rect x="53.1737%" y="181" width="0.4790%" height="15" fill="rgb(215,211,37)" fg:x="444" fg:w="4"/><text x="53.4237%" y="191.50"></text></g><g><title>__kernelrpc_mach_port_deallocate_trap (1 samples, 0.12%)</title><rect x="53.6527%" y="197" width="0.1198%" height="15" fill="rgb(241,128,51)" fg:x="448" fg:w="1"/><text x="53.9027%" y="207.50"></text></g><g><title>_mach_make_memory_entry_64 (1 samples, 0.12%)</title><rect x="53.6527%" y="181" width="0.1198%" height="15" fill="rgb(227,165,31)" fg:x="448" fg:w="1"/><text x="53.9027%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="53.6527%" y="165" width="0.1198%" height="15" fill="rgb(228,167,24)" fg:x="448" fg:w="1"/><text x="53.9027%" y="175.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.12%)</title><rect x="53.7725%" y="197" width="0.1198%" height="15" fill="rgb(228,143,12)" fg:x="449" fg:w="1"/><text x="54.0225%" y="207.50"></text></g><g><title>_mach_continuous_time (1 samples, 0.12%)</title><rect x="53.8922%" y="197" width="0.1198%" height="15" fill="rgb(249,149,8)" fg:x="450" fg:w="1"/><text x="54.1422%" y="207.50"></text></g><g><title>__kernelrpc_vm_read (1 samples, 0.12%)</title><rect x="53.8922%" y="181" width="0.1198%" height="15" fill="rgb(243,35,44)" fg:x="450" fg:w="1"/><text x="54.1422%" y="191.50"></text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="53.8922%" y="165" width="0.1198%" height="15" fill="rgb(246,89,9)" fg:x="450" fg:w="1"/><text x="54.1422%" y="175.50"></text></g><g><title>raylib::core::RaylibBuilder::build (44 samples, 5.27%)</title><rect x="48.8623%" y="293" width="5.2695%" height="15" fill="rgb(233,213,13)" fg:x="408" fg:w="44"/><text x="49.1123%" y="303.50">raylib..</text></g><g><title>raylib::core::init_window (44 samples, 5.27%)</title><rect x="48.8623%" y="277" width="5.2695%" height="15" fill="rgb(233,141,41)" fg:x="408" fg:w="44"/><text x="49.1123%" y="287.50">raylib..</text></g><g><title>Unknown (44 samples, 5.27%)</title><rect x="48.8623%" y="261" width="5.2695%" height="15" fill="rgb(239,167,4)" fg:x="408" fg:w="44"/><text x="49.1123%" y="271.50">Unknown</text></g><g><title>Unknown (44 samples, 5.27%)</title><rect x="48.8623%" y="245" width="5.2695%" height="15" fill="rgb(209,217,16)" fg:x="408" fg:w="44"/><text x="49.1123%" y="255.50">Unknown</text></g><g><title>Unknown (44 samples, 5.27%)</title><rect x="48.8623%" y="229" width="5.2695%" height="15" fill="rgb(219,88,35)" fg:x="408" fg:w="44"/><text x="49.1123%" y="239.50">Unknown</text></g><g><title>Unknown (44 samples, 5.27%)</title><rect x="48.8623%" y="213" width="5.2695%" height="15" fill="rgb(220,193,23)" fg:x="408" fg:w="44"/><text x="49.1123%" y="223.50">Unknown</text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="54.0120%" y="197" width="0.1198%" height="15" fill="rgb(230,90,52)" fg:x="451" fg:w="1"/><text x="54.2620%" y="207.50"></text></g><g><title>torpedo::game::star::create_stars (1 samples, 0.12%)</title><rect x="54.1317%" y="245" width="0.1198%" height="15" fill="rgb(252,106,19)" fg:x="452" fg:w="1"/><text x="54.3817%" y="255.50"></text></g><g><title>torpedo::game::star::create_star (1 samples, 0.12%)</title><rect x="54.1317%" y="229" width="0.1198%" height="15" fill="rgb(206,74,20)" fg:x="452" fg:w="1"/><text x="54.3817%" y="239.50"></text></g><g><title>torpedo::level::TransformComp::new (1 samples, 0.12%)</title><rect x="54.1317%" y="213" width="0.1198%" height="15" fill="rgb(230,138,44)" fg:x="452" fg:w="1"/><text x="54.3817%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="54.1317%" y="197" width="0.1198%" height="15" fill="rgb(235,182,43)" fg:x="452" fg:w="1"/><text x="54.3817%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="54.1317%" y="181" width="0.1198%" height="15" fill="rgb(242,16,51)" fg:x="452" fg:w="1"/><text x="54.3817%" y="191.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_sphere (1 samples, 0.12%)</title><rect x="54.2515%" y="229" width="0.1198%" height="15" fill="rgb(248,9,4)" fg:x="453" fg:w="1"/><text x="54.5015%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.12%)</title><rect x="54.2515%" y="213" width="0.1198%" height="15" fill="rgb(210,31,22)" fg:x="453" fg:w="1"/><text x="54.5015%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (3 samples, 0.36%)</title><rect x="54.1317%" y="277" width="0.3593%" height="15" fill="rgb(239,54,39)" fg:x="452" fg:w="3"/><text x="54.3817%" y="287.50"></text></g><g><title>torpedo::game::game_create_level (3 samples, 0.36%)</title><rect x="54.1317%" y="261" width="0.3593%" height="15" fill="rgb(230,99,41)" fg:x="452" fg:w="3"/><text x="54.3817%" y="271.50"></text></g><g><title>torpedo::level::default_setup (2 samples, 0.24%)</title><rect x="54.2515%" y="245" width="0.2395%" height="15" fill="rgb(253,106,12)" fg:x="453" fg:w="2"/><text x="54.5015%" y="255.50"></text></g><g><title>raylib::core::models::RaylibMesh::gen_mesh_torus (1 samples, 0.12%)</title><rect x="54.3713%" y="229" width="0.1198%" height="15" fill="rgb(213,46,41)" fg:x="454" fg:w="1"/><text x="54.6213%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.12%)</title><rect x="54.3713%" y="213" width="0.1198%" height="15" fill="rgb(215,133,35)" fg:x="454" fg:w="1"/><text x="54.6213%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::Level&gt;&gt; (2 samples, 0.24%)</title><rect x="54.4910%" y="277" width="0.2395%" height="15" fill="rgb(213,28,5)" fg:x="455" fg:w="2"/><text x="54.7410%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::Level&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="261" width="0.1198%" height="15" fill="rgb(215,77,49)" fg:x="456" fg:w="1"/><text x="54.8608%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::ComponentList&lt;torpedo::level::TransformComp&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="245" width="0.1198%" height="15" fill="rgb(248,100,22)" fg:x="456" fg:w="1"/><text x="54.8608%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="229" width="0.1198%" height="15" fill="rgb(208,67,9)" fg:x="456" fg:w="1"/><text x="54.8608%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="213" width="0.1198%" height="15" fill="rgb(219,133,21)" fg:x="456" fg:w="1"/><text x="54.8608%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="197" width="0.1198%" height="15" fill="rgb(246,46,29)" fg:x="456" fg:w="1"/><text x="54.8608%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;torpedo::level::TransformComp&gt;]&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="181" width="0.1198%" height="15" fill="rgb(246,185,52)" fg:x="456" fg:w="1"/><text x="54.8608%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;torpedo::level::TransformComp&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="165" width="0.1198%" height="15" fill="rgb(252,136,11)" fg:x="456" fg:w="1"/><text x="54.8608%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;torpedo::level::TransformComp&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="149" width="0.1198%" height="15" fill="rgb(219,138,53)" fg:x="456" fg:w="1"/><text x="54.8608%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[torpedo::level::Instant]&gt;&gt; (1 samples, 0.12%)</title><rect x="54.6108%" y="133" width="0.1198%" height="15" fill="rgb(211,51,23)" fg:x="456" fg:w="1"/><text x="54.8608%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="54.6108%" y="117" width="0.1198%" height="15" fill="rgb(247,221,28)" fg:x="456" fg:w="1"/><text x="54.8608%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.12%)</title><rect x="54.6108%" y="101" width="0.1198%" height="15" fill="rgb(251,222,45)" fg:x="456" fg:w="1"/><text x="54.8608%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.12%)</title><rect x="54.6108%" y="85" width="0.1198%" height="15" fill="rgb(217,162,53)" fg:x="456" fg:w="1"/><text x="54.8608%" y="95.50"></text></g><g><title>__kernelrpc_mach_vm_map (1 samples, 0.12%)</title><rect x="59.1617%" y="197" width="0.1198%" height="15" fill="rgb(229,93,14)" fg:x="494" fg:w="1"/><text x="59.4117%" y="207.50"></text></g><g><title>__os_unfair_lock_lock_slow (1 samples, 0.12%)</title><rect x="59.2814%" y="197" width="0.1198%" height="15" fill="rgb(209,67,49)" fg:x="495" fg:w="1"/><text x="59.5314%" y="207.50"></text></g><g><title>__pthread_wqthread_setup (1 samples, 0.12%)</title><rect x="59.4012%" y="197" width="0.1198%" height="15" fill="rgb(213,87,29)" fg:x="496" fg:w="1"/><text x="59.6512%" y="207.50"></text></g><g><title>_mach_continuous_time (9 samples, 1.08%)</title><rect x="59.5210%" y="197" width="1.0778%" height="15" fill="rgb(205,151,52)" fg:x="497" fg:w="9"/><text x="59.7710%" y="207.50"></text></g><g><title>__kernelrpc_vm_read (9 samples, 1.08%)</title><rect x="59.5210%" y="181" width="1.0778%" height="15" fill="rgb(253,215,39)" fg:x="497" fg:w="9"/><text x="59.7710%" y="191.50"></text></g><g><title>_proc_clear_dirty (9 samples, 1.08%)</title><rect x="59.5210%" y="165" width="1.0778%" height="15" fill="rgb(221,220,41)" fg:x="497" fg:w="9"/><text x="59.7710%" y="175.50"></text></g><g><title>_os_cpu_in_cksum_mbuf (1 samples, 0.12%)</title><rect x="60.5988%" y="197" width="0.1198%" height="15" fill="rgb(218,133,21)" fg:x="506" fg:w="1"/><text x="60.8488%" y="207.50"></text></g><g><title>_proc_clear_dirty (190 samples, 22.75%)</title><rect x="60.7186%" y="197" width="22.7545%" height="15" fill="rgb(221,193,43)" fg:x="507" fg:w="190"/><text x="60.9686%" y="207.50">_proc_clear_dirty</text></g><g><title>_proc_setpcontrol (3 samples, 0.36%)</title><rect x="83.4731%" y="197" width="0.3593%" height="15" fill="rgb(240,128,52)" fg:x="697" fg:w="3"/><text x="83.7231%" y="207.50"></text></g><g><title>_pthread_cond_broadcast (1 samples, 0.12%)</title><rect x="83.8323%" y="197" width="0.1198%" height="15" fill="rgb(253,114,12)" fg:x="700" fg:w="1"/><text x="84.0823%" y="207.50"></text></g><g><title>_pthread_rwlock_init (1 samples, 0.12%)</title><rect x="83.8323%" y="181" width="0.1198%" height="15" fill="rgb(215,223,47)" fg:x="700" fg:w="1"/><text x="84.0823%" y="191.50"></text></g><g><title>Unknown (241 samples, 28.86%)</title><rect x="55.2096%" y="213" width="28.8623%" height="15" fill="rgb(248,225,23)" fg:x="461" fg:w="241"/><text x="55.4596%" y="223.50">Unknown</text></g><g><title>_vm_remap (1 samples, 0.12%)</title><rect x="83.9521%" y="197" width="0.1198%" height="15" fill="rgb(250,108,0)" fg:x="701" fg:w="1"/><text x="84.2021%" y="207.50"></text></g><g><title>_vm_remap (1 samples, 0.12%)</title><rect x="83.9521%" y="181" width="0.1198%" height="15" fill="rgb(228,208,7)" fg:x="701" fg:w="1"/><text x="84.2021%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;raylib::core::drawing::RaylibDrawHandle&gt; (246 samples, 29.46%)</title><rect x="54.7305%" y="277" width="29.4611%" height="15" fill="rgb(244,45,10)" fg:x="457" fg:w="246"/><text x="54.9805%" y="287.50">core::ptr::drop_in_place&lt;raylib::core::drawing:..</text></g><g><title>Unknown (246 samples, 29.46%)</title><rect x="54.7305%" y="261" width="29.4611%" height="15" fill="rgb(207,125,25)" fg:x="457" fg:w="246"/><text x="54.9805%" y="271.50">Unknown</text></g><g><title>Unknown (246 samples, 29.46%)</title><rect x="54.7305%" y="245" width="29.4611%" height="15" fill="rgb(210,195,18)" fg:x="457" fg:w="246"/><text x="54.9805%" y="255.50">Unknown</text></g><g><title>Unknown (244 samples, 29.22%)</title><rect x="54.9701%" y="229" width="29.2216%" height="15" fill="rgb(249,80,12)" fg:x="459" fg:w="244"/><text x="55.2201%" y="239.50">Unknown</text></g><g><title>_proc_clear_dirty (1 samples, 0.12%)</title><rect x="84.0719%" y="213" width="0.1198%" height="15" fill="rgb(221,65,9)" fg:x="702" fg:w="1"/><text x="84.3219%" y="223.50"></text></g><g><title>__pthread_jit_write_protect_bulk_image_load_callback (1 samples, 0.12%)</title><rect x="84.1916%" y="197" width="0.1198%" height="15" fill="rgb(235,49,36)" fg:x="703" fg:w="1"/><text x="84.4416%" y="207.50"></text></g><g><title>__pthread_workqueue_allow_send_signals (1 samples, 0.12%)</title><rect x="84.3114%" y="197" width="0.1198%" height="15" fill="rgb(225,32,20)" fg:x="704" fg:w="1"/><text x="84.5614%" y="207.50"></text></g><g><title>_kpersona_get (1 samples, 0.12%)</title><rect x="84.3114%" y="181" width="0.1198%" height="15" fill="rgb(215,141,46)" fg:x="704" fg:w="1"/><text x="84.5614%" y="191.50"></text></g><g><title>std::thread::spawn (4 samples, 0.48%)</title><rect x="84.1916%" y="277" width="0.4790%" height="15" fill="rgb(250,160,47)" fg:x="703" fg:w="4"/><text x="84.4416%" y="287.50"></text></g><g><title>std::thread::Builder::spawn (4 samples, 0.48%)</title><rect x="84.1916%" y="261" width="0.4790%" height="15" fill="rgb(216,222,40)" fg:x="703" fg:w="4"/><text x="84.4416%" y="271.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (4 samples, 0.48%)</title><rect x="84.1916%" y="245" width="0.4790%" height="15" fill="rgb(234,217,39)" fg:x="703" fg:w="4"/><text x="84.4416%" y="255.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (4 samples, 0.48%)</title><rect x="84.1916%" y="229" width="0.4790%" height="15" fill="rgb(207,178,40)" fg:x="703" fg:w="4"/><text x="84.4416%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (4 samples, 0.48%)</title><rect x="84.1916%" y="213" width="0.4790%" height="15" fill="rgb(221,136,13)" fg:x="703" fg:w="4"/><text x="84.4416%" y="223.50"></text></g><g><title>_pthread_workqueue_addthreads_np (2 samples, 0.24%)</title><rect x="84.4311%" y="197" width="0.2395%" height="15" fill="rgb(249,199,10)" fg:x="705" fg:w="2"/><text x="84.6811%" y="207.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (2 samples, 0.24%)</title><rect x="84.4311%" y="181" width="0.2395%" height="15" fill="rgb(249,222,13)" fg:x="705" fg:w="2"/><text x="84.6811%" y="191.50"></text></g><g><title>torpedo::draw_call::run_draw_calls (4 samples, 0.48%)</title><rect x="84.6707%" y="261" width="0.4790%" height="15" fill="rgb(244,185,38)" fg:x="707" fg:w="4"/><text x="84.9207%" y="271.50"></text></g><g><title>raylib::core::drawing::RaylibDraw::draw_text (4 samples, 0.48%)</title><rect x="84.6707%" y="245" width="0.4790%" height="15" fill="rgb(236,202,9)" fg:x="707" fg:w="4"/><text x="84.9207%" y="255.50"></text></g><g><title>Unknown (4 samples, 0.48%)</title><rect x="84.6707%" y="229" width="0.4790%" height="15" fill="rgb(250,229,37)" fg:x="707" fg:w="4"/><text x="84.9207%" y="239.50"></text></g><g><title>Unknown (4 samples, 0.48%)</title><rect x="84.6707%" y="213" width="0.4790%" height="15" fill="rgb(206,174,23)" fg:x="707" fg:w="4"/><text x="84.9207%" y="223.50"></text></g><g><title>Unknown (4 samples, 0.48%)</title><rect x="84.6707%" y="197" width="0.4790%" height="15" fill="rgb(211,33,43)" fg:x="707" fg:w="4"/><text x="84.9207%" y="207.50"></text></g><g><title>Unknown (3 samples, 0.36%)</title><rect x="84.7904%" y="181" width="0.3593%" height="15" fill="rgb(245,58,50)" fg:x="708" fg:w="3"/><text x="85.0404%" y="191.50"></text></g><g><title>Unknown (1 samples, 0.12%)</title><rect x="85.0299%" y="165" width="0.1198%" height="15" fill="rgb(244,68,36)" fg:x="710" fg:w="1"/><text x="85.2799%" y="175.50"></text></g><g><title>Unknown (1 samples, 0.12%)</title><rect x="85.0299%" y="149" width="0.1198%" height="15" fill="rgb(232,229,15)" fg:x="710" fg:w="1"/><text x="85.2799%" y="159.50"></text></g><g><title>torpedo::renderer::render (1 samples, 0.12%)</title><rect x="85.1497%" y="261" width="0.1198%" height="15" fill="rgb(254,30,23)" fg:x="711" fg:w="1"/><text x="85.3997%" y="271.50"></text></g><g><title>Unknown (1 samples, 0.12%)</title><rect x="99.2814%" y="165" width="0.1198%" height="15" fill="rgb(235,160,14)" fg:x="829" fg:w="1"/><text x="99.5314%" y="175.50"></text></g><g><title>raylib::core::drawing::RaylibDraw3D::draw_model (120 samples, 14.37%)</title><rect x="85.2695%" y="245" width="14.3713%" height="15" fill="rgb(212,155,44)" fg:x="712" fg:w="120"/><text x="85.5195%" y="255.50">raylib::core::drawing:..</text></g><g><title>Unknown (120 samples, 14.37%)</title><rect x="85.2695%" y="229" width="14.3713%" height="15" fill="rgb(226,2,50)" fg:x="712" fg:w="120"/><text x="85.5195%" y="239.50">Unknown</text></g><g><title>Unknown (120 samples, 14.37%)</title><rect x="85.2695%" y="213" width="14.3713%" height="15" fill="rgb(234,177,6)" fg:x="712" fg:w="120"/><text x="85.5195%" y="223.50">Unknown</text></g><g><title>Unknown (117 samples, 14.01%)</title><rect x="85.6287%" y="197" width="14.0120%" height="15" fill="rgb(217,24,9)" fg:x="715" fg:w="117"/><text x="85.8787%" y="207.50">Unknown</text></g><g><title>Unknown (110 samples, 13.17%)</title><rect x="86.4671%" y="181" width="13.1737%" height="15" fill="rgb(220,13,46)" fg:x="722" fg:w="110"/><text x="86.7171%" y="191.50">Unknown</text></g><g><title>_proc_clear_dirty (2 samples, 0.24%)</title><rect x="99.4012%" y="165" width="0.2395%" height="15" fill="rgb(239,221,27)" fg:x="830" fg:w="2"/><text x="99.6512%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.24%)</title><rect x="99.6407%" y="245" width="0.2395%" height="15" fill="rgb(222,198,25)" fg:x="832" fg:w="2"/><text x="99.8907%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.24%)</title><rect x="99.6407%" y="229" width="0.2395%" height="15" fill="rgb(211,99,13)" fg:x="832" fg:w="2"/><text x="99.8907%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.24%)</title><rect x="99.6407%" y="213" width="0.2395%" height="15" fill="rgb(232,111,31)" fg:x="832" fg:w="2"/><text x="99.8907%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.24%)</title><rect x="99.6407%" y="197" width="0.2395%" height="15" fill="rgb(245,82,37)" fg:x="832" fg:w="2"/><text x="99.8907%" y="207.50"></text></g><g><title>all (835 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="835"/><text x="0.2500%" y="575.50"></text></g><g><title>8336018560 (466 samples, 55.81%)</title><rect x="44.1916%" y="549" width="55.8084%" height="15" fill="rgb(218,36,50)" fg:x="369" fg:w="466"/><text x="44.4416%" y="559.50">8336018560</text></g><g><title>_main (437 samples, 52.34%)</title><rect x="47.6647%" y="533" width="52.3353%" height="15" fill="rgb(226,80,48)" fg:x="398" fg:w="437"/><text x="47.9147%" y="543.50">_main</text></g><g><title>std::rt::lang_start_internal (437 samples, 52.34%)</title><rect x="47.6647%" y="517" width="52.3353%" height="15" fill="rgb(238,224,15)" fg:x="398" fg:w="437"/><text x="47.9147%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (437 samples, 52.34%)</title><rect x="47.6647%" y="501" width="52.3353%" height="15" fill="rgb(241,136,10)" fg:x="398" fg:w="437"/><text x="47.9147%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (437 samples, 52.34%)</title><rect x="47.6647%" y="485" width="52.3353%" height="15" fill="rgb(208,32,45)" fg:x="398" fg:w="437"/><text x="47.9147%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (437 samples, 52.34%)</title><rect x="47.6647%" y="469" width="52.3353%" height="15" fill="rgb(207,135,9)" fg:x="398" fg:w="437"/><text x="47.9147%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (437 samples, 52.34%)</title><rect x="47.6647%" y="453" width="52.3353%" height="15" fill="rgb(206,86,44)" fg:x="398" fg:w="437"/><text x="47.9147%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (437 samples, 52.34%)</title><rect x="47.6647%" y="437" width="52.3353%" height="15" fill="rgb(245,177,15)" fg:x="398" fg:w="437"/><text x="47.9147%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (437 samples, 52.34%)</title><rect x="47.6647%" y="421" width="52.3353%" height="15" fill="rgb(206,64,50)" fg:x="398" fg:w="437"/><text x="47.9147%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (437 samples, 52.34%)</title><rect x="47.6647%" y="405" width="52.3353%" height="15" fill="rgb(234,36,40)" fg:x="398" fg:w="437"/><text x="47.9147%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (437 samples, 52.34%)</title><rect x="47.6647%" y="389" width="52.3353%" height="15" fill="rgb(213,64,8)" fg:x="398" fg:w="437"/><text x="47.9147%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (437 samples, 52.34%)</title><rect x="47.6647%" y="373" width="52.3353%" height="15" fill="rgb(210,75,36)" fg:x="398" fg:w="437"/><text x="47.9147%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (437 samples, 52.34%)</title><rect x="47.6647%" y="357" width="52.3353%" height="15" fill="rgb(229,88,21)" fg:x="398" fg:w="437"/><text x="47.9147%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (437 samples, 52.34%)</title><rect x="47.6647%" y="341" width="52.3353%" height="15" fill="rgb(252,204,47)" fg:x="398" fg:w="437"/><text x="47.9147%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>torpedo::main (437 samples, 52.34%)</title><rect x="47.6647%" y="325" width="52.3353%" height="15" fill="rgb(208,77,27)" fg:x="398" fg:w="437"/><text x="47.9147%" y="335.50">torpedo::main</text></g><g><title>torpedo::level::main_loop (437 samples, 52.34%)</title><rect x="47.6647%" y="309" width="52.3353%" height="15" fill="rgb(221,76,26)" fg:x="398" fg:w="437"/><text x="47.9147%" y="319.50">torpedo::level::main_loop</text></g><g><title>torpedo::level::level_loop (383 samples, 45.87%)</title><rect x="54.1317%" y="293" width="45.8683%" height="15" fill="rgb(225,139,18)" fg:x="452" fg:w="383"/><text x="54.3817%" y="303.50">torpedo::level::level_loop</text></g><g><title>torpedo::renderer::render (128 samples, 15.33%)</title><rect x="84.6707%" y="277" width="15.3293%" height="15" fill="rgb(230,137,11)" fg:x="707" fg:w="128"/><text x="84.9207%" y="287.50">torpedo::renderer::rend..</text></g><g><title>torpedo::renderer::render_object (123 samples, 14.73%)</title><rect x="85.2695%" y="261" width="14.7305%" height="15" fill="rgb(212,28,1)" fg:x="712" fg:w="123"/><text x="85.5195%" y="271.50">torpedo::renderer::ren..</text></g><g><title>torpedo::level::get_transform_comp (1 samples, 0.12%)</title><rect x="99.8802%" y="245" width="0.1198%" height="15" fill="rgb(248,164,17)" fg:x="834" fg:w="1"/><text x="100.1302%" y="255.50"></text></g></svg></svg>